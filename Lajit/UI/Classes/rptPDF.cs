using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Web.SessionState;
using System.Collections;
using System.Drawing;
using System.Text;
using LAjitControls;
using LAjit_BO;
using System.IO;
using System.Drawing.Printing;
using System.Drawing.Imaging;
using System.Reflection;
using System.Xml.Xsl;
using System.Xml.XPath;
using LAjitDev.UserControls;
using Gios.Pdf;
using ICSharpCode.SharpZipLib.Zip;
using System.Collections.Generic;
using NLog;


namespace LAjitDev
{
    public partial class rptPDF
    {
        public PdfDocument myPdfDocument;
        public NLog.Logger logger = LogManager.GetCurrentClassLogger();
        LAjit_BO.Reports reportsBO = new LAjit_BO.Reports();
        public CommonUI commonObjUI = new CommonUI();
        XmlDocument XDocUserInfo = new XmlDocument();
        public bool m_EmailStatus = false;
        private bool m_ShowPDF = true;
        Hashtable m_htGVColumns = new Hashtable();
        clsReportsUI objclsrpt = new clsReportsUI();

        #region Report Declarations
        int pageCnt = 0;
        int pgHeight = 0;
        int pgWidth = 0;
        double posX = 20;
        double posY = 70;
        double width;
        double height;
        double currentYPos = 70;
        double imgPosX;
        double imgPosY;
        Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
        Font HeaderFont = new Font("Verdana", 9, FontStyle.Bold);
        Font GridHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
        Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
        Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
        Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
        Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
        Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
        Font HeaderPageTitleFontRegular = new Font("Verdana", 9, FontStyle.Regular);
        Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
        Font SumRowFont1 = new Font("Verdana", 7, FontStyle.Bold);
        Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
        Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
        Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
        Font RowBoxFontRegular = new Font("Verdana", 10, FontStyle.Regular);
        PdfTable myPdfTable = null;
        PdfTable myHeaderPdfTable = null;
        PdfTablePage myHeaderPdfTablePage = null;
        PdfTablePage pdfMainHeaderPage = null;
        PdfLine pdfLineBrk = null;
        PdfPage newPdfPage = null;
        #endregion

        #region Properties

        /// <summary>
        /// Accessor for the Session["LinkBPinfo"]
        /// </summary>
        public string SessionLinkBPInfo
        {
            get { return Convert.ToString(HttpContext.Current.Session["LinkBPinfo"]); }
            set { HttpContext.Current.Session["LinkBPinfo"] = value; }
        }

        public bool EmailStatus
        {
            get { return m_EmailStatus; }
            set { m_EmailStatus = value; }
        }

        /// <summary>
        /// Accessor for the Session["BPInfo"]
        /// </summary>
        public string SessionBPInfo
        {
            get { return Convert.ToString(HttpContext.Current.Session["BPINFO"]); }
            set { HttpContext.Current.Session["BPINFO"] = value; }
        }

        /// <summary>
        /// Display the PDF when download is complete if true, else false.
        /// </summary>
        public bool ShowPDF
        {
            get
            {
                return m_ShowPDF;
            }
            set
            {
                m_ShowPDF = value;
            }
        }
        #endregion

        #region private Methods
        #region Creating PDF Document
        private void CreatePDFDocument(string fileName)
        {

            if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
            {
                HttpContext.Current.Response.ClearHeaders();
                HttpContext.Current.Response.ClearContent();
                HttpContext.Current.Response.Clear();
                HttpContext.Current.Response.Buffer = true;
                HttpContext.Current.Response.ContentType = "application/pdf";
                HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;" + fileName + ".pdf"));
                myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                HttpContext.Current.Response.Flush();
                HttpContext.Current.Response.Close();
            }
            else
            {
                HttpContext.Current.Response.ClearHeaders();
                HttpContext.Current.Response.ClearContent();
                HttpContext.Current.Response.Clear();
                HttpContext.Current.Response.Buffer = true;
                HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;" + fileName + ".pdf"));
                HttpContext.Current.Response.ContentType = "application/pdf";
                myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                HttpContext.Current.Response.Flush();
                HttpContext.Current.Response.Close();
            }
        }
        #endregion


        #region Generate Header PDF table using for 601 and 602 report styles
        public PdfPage GetHeaderPDFTableStyle1(DataTable dtHeader, out PdfTablePage myHeaderPdfTablePage)
        {

            width = myPdfDocument.PageWidth - 50;
            height = myPdfDocument.PageHeight - 50;
            myHeaderPdfTablePage = null;
            PdfPage newPdfPage = null;
            string imgpath = PDFImagePath();
            PdfImage LogoImage = null;
            if (!string.IsNullOrEmpty(imgpath))
            {
                LogoImage = myPdfDocument.NewImage(imgpath);
            }
            myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, dtHeader.Rows.Count, dtHeader.Columns.Count, 2);
            //Import dtHeader to PDF table
            if (dtHeader.Rows[0]["Column3"] != null)
            {
                string strdatetime = dtHeader.Rows[0]["Column3"].ToString();
                if (dtHeader.Rows[1]["Column3"] != null)
                {
                    dtHeader.Rows[1]["Column3"] = strdatetime.Replace("Date Time", "Run");
                    dtHeader.Rows[0]["Column3"] = "";
                }
            }
            myHeaderPdfTable.ImportDataTable(dtHeader);
            myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
            //
            myHeaderPdfTable.HeadersRow.SetBackgroundColor(Color.White);
            myHeaderPdfTable.HeadersRow.SetForegroundColor(Color.White);
            //
            myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
            myHeaderPdfTable.SetColumnsWidth(new int[] { 190, 350, 190, 90 });
            myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
            //
            //myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
            //
            int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
            if (titleLength < 75)
            {
                myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
            }
            myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
            //
            int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
            if (subTitleLength < 75)
            {
                myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
            }
            myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
            if (myHeaderPdfTable.Rows.Length > 2)
            {
                int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                if (dateLength < 75)
                {
                    myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleLeft);
                }
                myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                {
                    myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
            }
            myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
            imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
            imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
            //Adding New page for the first time
            newPdfPage = myPdfDocument.NewPage();
            newPdfPage.Add(myHeaderPdfTablePage);
            if (LogoImage != null)
            {
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
            }
            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
            return newPdfPage;
        }
        #endregion

        #region Get Header PDF Table
        private PdfPage GetHeaderPDFTable(DataTable dtHeader, out PdfTablePage myHeaderPdfTablePage)
        {

            width = myPdfDocument.PageWidth - 50;
            height = myPdfDocument.PageHeight - 50;
            myHeaderPdfTablePage = null;
            PdfPage newPdfPage = null;
            string imgpath = PDFImagePath();
            PdfImage LogoImage = null;
            if (!string.IsNullOrEmpty(imgpath))
            {
                LogoImage = myPdfDocument.NewImage(imgpath);
            }
            myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, dtHeader.Rows.Count, dtHeader.Columns.Count, 2);
            //Import dtHeader to PDF table
            myHeaderPdfTable.ImportDataTable(dtHeader);
            //
            myHeaderPdfTable.HeadersRow.SetBackgroundColor(Color.White);
            myHeaderPdfTable.HeadersRow.SetForegroundColor(Color.White);
            //
            myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
            myHeaderPdfTable.SetColumnsWidth(new int[] { 190, 350, 190, 90 });
            //
            int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
            //
            myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
            //
            if (titleLength < 75)
            {
                myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
            }
            myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
            int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
            if (subTitleLength < 75)
            {
                myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
            }
            myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
            if (myHeaderPdfTable.Rows.Length > 2)
            {
                int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                if (dateLength < 75)
                {
                    myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                {
                    myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
            }
            myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
            imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
            imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
            //Adding New page for the first time
            newPdfPage = myPdfDocument.NewPage();
            newPdfPage.Add(myHeaderPdfTablePage);
            if (LogoImage != null)
            {
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
            }
            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
            //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
            //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
            return newPdfPage;
        }
        #endregion



        #region PDF Page Creation 13/10/2009
        private void PDFPaging()
        {

            try
            {
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                while (!myPdfTable.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    else
                    {
                        posY = currentYPos + 25;
                    }
                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                    newPdfPage.Add(newPdfTablePage);
                    currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
            }
        }
        #endregion

        #region Save To Response
        private void SaveToResponse(string fileName)
        {
            HttpContext.Current.Response.ClearHeaders();
            HttpContext.Current.Response.ClearContent();
            HttpContext.Current.Response.ContentType = "application/pdf";
            if (ShowPDF)
            {
                HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("inline;filename={0}.pdf", fileName));
            }
            else
            {
                HttpContext.Current.Response.AddHeader("content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
            }
            myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
            HttpContext.Current.Response.Flush();
            HttpContext.Current.Response.Close();
        }
        #endregion


        private DataTable PdfPageBreaks(DataTable dt, int pageBreaks, Hashtable m_htPagebrk)
        {

            for (int pgbrk = 1; pgbrk < pageBreaks + 1; pgbrk++)
            {
                posY = 70;
                currentYPos = 70;

                int dtStRow = 0;
                int dtEndRow = 0;
                if (pgbrk == 1)
                {
                    dtStRow = 0;
                }
                else
                {
                    dtStRow = Convert.ToInt32(m_htPagebrk[pgbrk].ToString()) + 1;
                }
                if (pgbrk == pageBreaks + 1)
                {
                    dtEndRow = dt.Rows.Count - 1;
                }
                else
                {
                    if (!string.IsNullOrEmpty(m_htPagebrk[pgbrk].ToString()))
                    {
                        dtEndRow = Convert.ToInt32(m_htPagebrk[pgbrk].ToString());
                    }
                }
                int rowsInTab = dtEndRow - dtStRow + 1;
                if (pgbrk != 0)
                {
                    posY = 70;
                    currentYPos = 70;
                    newPdfPage.SaveToDocument();
                    //Adding new page and adding Header table,logo image and pageNo
                    newPdfPage = myPdfDocument.NewPage();
                    newPdfPage.Add(myHeaderPdfTablePage);
                    //    if (LogoImage != null)
                    //    {
                    //        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                    //    }
                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                }
            }
            return dt;
        }


        public string PDFImagePath()
        {
            XmlDocument xDocUserInfo = new XmlDocument();
            XDocUserInfo = commonObjUI.loadXmlFile(Convert.ToString(HttpContext.Current.Session["USERINFOXML"]));
            XmlNode m_CompanyWhiteNode = XDocUserInfo.SelectSingleNode("Root/bpe/companyinfo/WhiteReportLogo");
            XmlNode m_CompanyGreyNode = XDocUserInfo.SelectSingleNode("Root/bpe/companyinfo/GreyReportLogo");
            string appDir = System.AppDomain.CurrentDomain.BaseDirectory;
            string m_CompanyImageSrc = string.Empty;
            string m_PhysicalImgPath = string.Empty;

            //SET cdn image path
           // HttpApplication ctx = (HttpApplication)HttpContext.Current.ApplicationInstance;
           // string m_strImagesCDNPath = (String)ctx.Application["ImagesCDNPath"];

            string m_strImagesCDNPath = ConfigurationManager.AppSettings["ImagesPath"].ToString() + "/" + HttpContext.Current.Session["MyTheme"] + "/";

            if (m_CompanyWhiteNode != null)
            {
                m_CompanyImageSrc = m_CompanyWhiteNode.InnerXml.ToString();
                m_PhysicalImgPath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/"  + m_CompanyImageSrc;
                if ((!m_CompanyImageSrc.ToString().ToUpper().Contains("JPG")) && (!m_CompanyImageSrc.ToString().ToUpper().Contains("JPEG")))
                {
                    m_PhysicalImgPath = m_strImagesCDNPath + "Images/lajit_small-greylogo_03.JPG";
                }
                else
                {
                    if (!File.Exists(m_PhysicalImgPath))
                    {
                        m_PhysicalImgPath = m_strImagesCDNPath + "Images/lajit_small-greylogo_03.JPG";
                    }
                }
            }
            else if (m_CompanyGreyNode != null)
            {
                m_CompanyImageSrc = m_CompanyGreyNode.InnerXml.ToString();
                m_PhysicalImgPath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/" + m_CompanyImageSrc;

                if ((!m_CompanyImageSrc.ToString().ToUpper().Contains("JPG")) && (!m_CompanyImageSrc.ToString().ToUpper().Contains("JPEG")))
                {
                    m_PhysicalImgPath = m_PhysicalImgPath = m_strImagesCDNPath + "Images/lajit_small-greylogo_03.JPG";
                }
                else
                {
                    if (!File.Exists(m_PhysicalImgPath))
                    {
                        m_PhysicalImgPath = m_PhysicalImgPath = m_strImagesCDNPath +"Images/lajit_small-greylogo_03.JPG";
                    }
                }
            }
            else
            {
                m_PhysicalImgPath =m_PhysicalImgPath = m_strImagesCDNPath + "Images/lajit_small-greylogo_03.JPG";
            }
            return m_PhysicalImgPath;
        }

        #region Number To Words
        public string ConvertNumberToWord(long nNumber)
        {
            long CurrentNumber = nNumber;
            string sReturn = "";
            if (CurrentNumber >= 1000000000)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber / 1000000000, "Billion");
                CurrentNumber = CurrentNumber % 1000000000;
            }
            if (CurrentNumber >= 1000000)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber / 1000000, "Million");
                CurrentNumber = CurrentNumber % 1000000;
            }
            if (CurrentNumber >= 1000)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber / 1000, "Thousand");
                CurrentNumber = CurrentNumber % 1000;
            }
            if (CurrentNumber >= 100)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber / 100, "Hundred");
                CurrentNumber = CurrentNumber % 100;
            }
            if (CurrentNumber >= 20)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber, "");
                CurrentNumber = CurrentNumber % 10;
            }
            else if (CurrentNumber > 0)
            {
                sReturn = sReturn + " " + GetWord(CurrentNumber, "");
                CurrentNumber = 0;
            }
            return sReturn.Replace("  ", " ").Trim();
        }

        private string GetWord(long nNumber, string sPrefix)
        {
            long nCurrentNumber = nNumber;
            string sReturn = "";
            while (nCurrentNumber > 0)
            {
                if (nCurrentNumber >= 100)
                {
                    sReturn = sReturn + " " + GetWord(nCurrentNumber / 100, "Hundred");
                    nCurrentNumber = nCurrentNumber % 100;
                }
                else if (nCurrentNumber >= 20)
                {
                    sReturn = sReturn + " " + GetTwentyWord(nCurrentNumber / 10);
                    nCurrentNumber = nCurrentNumber % 10;
                }
                else
                {
                    sReturn = sReturn + " " + GetLessThanTwentyWord(nCurrentNumber);
                    nCurrentNumber = 0;
                }
            }
            sReturn = sReturn + " " + sPrefix;
            return sReturn;
        }

        private string GetTwentyWord(long nNumber)
        {
            string sReturn = "";
            switch (nNumber)
            {
                case 2:
                    sReturn = "Twenty";
                    break;
                case 3:
                    sReturn = "Thirty";
                    break;
                case 4:
                    sReturn = "Forty";
                    break;
                case 5:
                    sReturn = "Fifty";
                    break;
                case 6:
                    sReturn = "Sixty";
                    break;
                case 7:
                    sReturn = "Seventy";
                    break;
                case 8:
                    sReturn = "Eighty";
                    break;
                case 9:
                    sReturn = "Ninety";
                    break;
            }
            return sReturn;
        }

        private string GetLessThanTwentyWord(long nNumber)
        {
            string sReturn = "";
            switch (nNumber)
            {
                case 1:
                    sReturn = "One";
                    break;
                case 2:
                    sReturn = "Two";
                    break;
                case 3:
                    sReturn = "Three";
                    break;
                case 4:
                    sReturn = "Four";
                    break;
                case 5:
                    sReturn = "Five";
                    break;
                case 6:
                    sReturn = "Six";
                    break;
                case 7:
                    sReturn = "Seven";
                    break;
                case 8:
                    sReturn = "Eight";
                    break;
                case 9:
                    sReturn = "Nine";
                    break;
                case 10:
                    sReturn = "Ten";
                    break;
                case 11:
                    sReturn = "Eleven";
                    break;
                case 12:
                    sReturn = "Twelve";
                    break;
                case 13:
                    sReturn = "Thirteen";
                    break;
                case 14:
                    sReturn = "Forteen";
                    break;
                case 15:
                    sReturn = "Fifteen";
                    break;
                case 16:
                    sReturn = "Sixteen";
                    break;
                case 17:
                    sReturn = "Seventeen";
                    break;
                case 18:
                    sReturn = "Eighteen";
                    break;
                case 19:
                    sReturn = "Nineteen";
                    break;
            }
            return sReturn;
        }
        #endregion

        #region NumberToWordsNewMethod

      


        #endregion





        #region PARENT CHILD JOB COSTING
        public void GVParentChildJobCosting(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout, string treeNodeName, string parentID, int PageCount)
        {

            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                int[] Arraywidth = new int[dt.Columns.Count - 3];//not considering trxid col whose ordinal is 0                //Storing the column width based on FVL in an array
                //Storing the captions of cols having IsSummed and IsNumeric as 1 in the HashTable
                int cntr = 0;
                foreach (XmlNode node in nodeColumns)
                {
                    if (node.Attributes["Caption"] != null)
                    {
                        DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                        if (dc != null)
                        {
                            if (dc.ColumnName.Trim().ToString() == "JobID")
                            {
                                cntr++;
                                continue;
                            }
                            else if (dc.ColumnName.Trim().ToString() == "AccountID")
                            {
                                cntr++;
                                continue;
                            }
                            //Set the column width based on FVL
                            else if (node.Attributes["FullViewLength"] != null)
                            {
                                if (node.Attributes["FullViewLength"].Value != "0")
                                {
                                    Arraywidth[dc.Ordinal - cntr] = Convert.ToInt32(node.Attributes["FullViewLength"].Value);
                                }
                                else
                                {
                                    Arraywidth[dc.Ordinal - cntr] = 15;
                                }
                            }
                            //Getting the cols having Issummed=1 
                            if (node.Attributes["IsSummed"] != null)
                            {
                                if (node.Attributes["IsSummed"].Value == "1")
                                {
                                    if (!isSumExists)
                                        isSumExists = true;
                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                }
                            }
                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                            if (node.Attributes["ControlType"] != null)
                            {
                                if (node.Attributes["ControlType"].Value == "Amount")
                                {
                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                }
                            }
                        }
                    }
                }
                //Setting columns width for cols not present in node columns
                for (int colCnt = 0; colCnt < dt.Columns.Count - 3; colCnt++)
                {
                    if (Arraywidth[colCnt].ToString() == string.Empty)
                        Arraywidth[colCnt] = 15;
                }
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                //Setting the X and Y positons, width and height of the tables
                double posX = 20;
                double posY = 70;
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 70;

                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
                Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
                Font dateFont = new Font("Verdana", 8, FontStyle.Bold);
                //Getting header DT for this treenode
                DataTable HeaderDT = new DataTable();
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/Job/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/Job/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                //Getting header DT for this treenode
                HeaderDT = objclsrpt.GetHeaderJobCostingDT(title, subTitle, xDoc, parentID);
                //
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                //Import HeaderDT to PDF table
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                //myHeaderPdfTable.SetBackgroundColor(Color.White);
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 190, 300, 135, 35 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);
                //
                int subTitleLength = myHeaderPdfTable.Rows[1][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);
                //
                int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                if (dateLength < 75)
                {
                    myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);
                if (HeaderDT.Rows.Count > 2)
                {
                    if (HeaderDT.Rows[2][1].ToString() != string.Empty)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                }
                if (HeaderDT.Columns.Count > 1)
                {
                    if (HeaderDT.Rows.Count > 2)
                    {
                        if (HeaderDT.Rows[2][1].ToString() != string.Empty)
                        {
                            myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleLeft);
                            myHeaderPdfTable.Rows[1][2].SetContentAlignment(ContentAlignment.MiddleLeft);
                        }
                    }
                }
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 140));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                //Adding New page for the first time
                PdfPage newPdfPage = myPdfDocument.NewPage();
                //Adding header table in the first page
                newPdfPage.Add(myHeaderPdfTablePage);
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                foreach (DataRow dRow in dt.Rows)
                {
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    string JobID = string.Empty;
                    JobID = parentDT.Rows[0]["JobID"].ToString();
                    string AccountID = string.Empty;
                    AccountID = parentDT.Rows[0]["AccountID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Removing JobID column
                    if (parentDT.Columns.Contains("JobID"))
                    {
                        parentDT.Columns.Remove("JobID");
                    }
                    //Removing AccountID column
                    if (parentDT.Columns.Contains("AccountID"))
                    {
                        parentDT.Columns.Remove("AccountID");
                    }
                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = parentDT.Rows.Count;
                    int colsInTab = parentDT.Columns.Count;
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    parentDT = objclsrpt.WrapFullViewLength(parentDT, Arraywidth);
                    myPdfTable.ImportDataTable(parentDT);
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (m_htRightAlign.Count > 0)
                    {
                        //Right justifying Summed column content and IsNumeric column content
                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                        {
                            if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                            {
                                if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                {
                                    myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                            }
                        }
                    }
                    //HeaderTable placed on top
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                        }
                        else
                        {
                            if (posY != 130)
                                posY = currentYPos + 35;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                                }
                                else
                                {
                                    posY = currentYPos + 25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Branch DT
                    foreach (XmlNode nodes in xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout"))
                    {
                        if ((nodes.InnerText.Trim().ToString() == "TrxInfo"))
                        {
                            string branchNodeName = nodes.InnerText;
                            DataTable BranchDT = new DataTable();
                            BranchDT = objclsrpt.GetJobCostingBranchDataToPrint(strOutXml, parentTrxID, branchNodeName, "AccountID");
                            BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                            if (BranchDT.Rows.Count > 0)
                            {
                                Hashtable m_htBranchRightAlign = new Hashtable();
                                Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                                bool sumExists = false;
                                int rowsInBranchDT = BranchDT.Rows.Count;
                                int colsInBranchDT = BranchDT.Columns.Count;
                                //Getting the columns to be displayed in grid
                                XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                int branchColPos = 0;
                                int[] BranchArraywidth = new int[colsInBranchDT];
                                foreach (DataColumn dBranchCol in BranchDT.Columns)
                                {
                                    XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                    //Checking for isSummed value for that column
                                    if (nodeBranchCol != null)
                                    {
                                        //Getting the cols having Issummed=1 
                                        if (nodeBranchCol.Attributes["IsSummed"] != null)
                                        {
                                            if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                            {
                                                if (!sumExists)
                                                    sumExists = true;
                                                if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                    m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                            }
                                        }
                                        //Getting the cols having ControlType="Amount"//Isnumeric=1
                                        if (nodeBranchCol.Attributes["ControlType"] != null)
                                        {
                                            if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                            {
                                                if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                    m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                            }
                                        }
                                    }
                                    //Setting the column width of branch table
                                    int dcPos = dBranchCol.Ordinal;
                                    int colFVL = 0;
                                    if (nodeBranchCol != null)
                                    {
                                        if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                        {
                                            colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                        }
                                    }
                                    if (colFVL != 0)
                                    {
                                        BranchArraywidth[dcPos] = colFVL;
                                    }
                                    else
                                    {
                                        BranchArraywidth[dcPos] = 15;
                                    }
                                }
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                myPdfTable1.ImportDataTable(BranchDT);
                                myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                if (m_htBranchRightAlign.Count > 0)
                                {
                                    if (sumExists)
                                    {
                                        //Right justifying Summed row content
                                        myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                        myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                    }
                                    //Right justifying Summed column content and IsNumeric column content
                                    for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                    {
                                        if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                        {

                                            if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                            {
                                                myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                    }
                                }
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 10;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++PageCount))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                            if (tableLayout.ToUpper().Trim() == "NORMAL")
                            {
                                parentDT.Rows[0].Delete();
                                //Adding TrxID column
                                if (!parentDT.Columns.Contains("TrxID"))
                                {
                                    parentDT.Columns.Add("TrxID");
                                }
                                if (!parentDT.Columns.Contains("JobID"))
                                {
                                    parentDT.Columns.Add("JobID");
                                }
                                if (!parentDT.Columns.Contains("AccountID"))
                                {
                                    parentDT.Columns.Add("AccountID");
                                }
                            }
                        }

                    }
                }
                newPdfPage.SaveToDocument();
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
                //throw ex;
            }
        }
        #endregion

        #endregion

        #region NewReportStyles
        #region Report Style 1
        public void ReportStyle1(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, string fileName)
        {

            try
            {
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    int rows = dt.Rows.Count;
                    int cols = dt.Columns.Count;
                    myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                    //Set Parent DataTable
                    myPdfTable.ImportDataTable(dt);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    //Set TrxID Column color white
                    myPdfTable.Columns[0].SetBackgroundColor(Color.White);
                    myPdfTable.Columns[0].SetForegroundColor(Color.White);
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetColumnsWidth(colWidths);
                    //Set Parent Formats
                    for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                    {

                        string[] arrformats = (string[])htPFormatModes[i];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.Rows[i].Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //only last row sum

                                            myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                            //    myPdfTable.Rows[i].SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    //
                    PDFPaging();
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle2
        public void ReportStyle2(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, DataTable dtCGbranch, Hashtable htCGbFormats, bool CGbPLayout, int[] arrCGbranchWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 200;
                }
                if (dt.Rows.Count > 0)
                {
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                        PdfTable myPdfTableVal = null;
                        width = myPdfDocument.PageWidth - 50;
                        height = myPdfDocument.PageHeight - 50;
                        myHeaderPdfTablePage = null;
                        string imgpath = PDFImagePath();
                        PdfImage LogoImage = null;
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            LogoImage = myPdfDocument.NewImage(imgpath);
                        }

                        //Set Parent DataTable
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        Hashtable htGrandTotals = new Hashtable();
                        //Filter Parent DataTable by TrxID
                        foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            //parentTrxID = dt.Rows[dtCnt][0].ToString();
                            //dt.Rows[rowIndex].Delete();
                            parentTrxID = dt.Rows[dtCnt][0].ToString();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }

                        //Pivot Current Table dtNew
                        pDT = reportsBO.PivotTable(dtNew);
                        int rows = pDT.Rows.Count;
                        int cols = pDT.Columns.Count;
                        PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                        //Set Pivot Table
                        myPdfTable1.ImportDataTable(pDT);
                        myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable1.HeadersRow.SetFont(GridHeaderFont);
                        myPdfTable1.HeadersRow.SetForegroundColor(Color.White);
                        myPdfTable1.HeadersRow.SetBackgroundColor(Color.White);
                        //Set Column Widths
                        for (int wdts = 0; wdts < myPdfTable1.Columns.Length; wdts++)
                        {
                            if (wdts == 0)
                            {
                                myPdfTable1.Columns[wdts].SetWidth(20);
                            }
                            else
                            {
                                myPdfTable1.Columns[wdts].SetWidth(90);
                            }
                        }
                        //Set Font for each row
                        for (int rws = 0; rws < myPdfTable1.Rows.Length; rws++)
                        {
                            for (int cll = 0; cll < myPdfTable1.Rows[rws].Cells.Count; cll++)
                            {
                                if (cll == 0)
                                {
                                    myPdfTable1.Cell(rws, cll).SetFont(GridHeaderFont);
                                }
                            }
                        }
                        //PDF Paging
                        while (!myPdfTable1.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos + 25;
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                            newPdfPage.Add(newPdfTablePage1);
                            currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        }
                        //Set Branch DataTable
                        string childTrxID = string.Empty;
                        int childRowIndex = 0;
                        string strCustom = string.Empty;
                        string strTotalAmount = string.Empty;
                        double TotalAmount = 0;
                        DataTable dtFullChild = new DataTable();
                        if (dtChild != null)
                        {
                            DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    //
                                    dtFullChild.Rows.Add(dtChRow);
                                    //
                                    childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                                    dtChild.Rows[childRowIndex].Delete();
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                    //
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                }

                                //Add Grand Total at last row
                                IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                if (htGrandTotals.Keys.Count > 0)
                                {
                                    dtFullChild.Rows.Add(dtFullChild.NewRow());
                                }
                                while (enumTot.MoveNext())
                                {
                                    dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                }
                                //


                                int childRows = dtFullChild.Rows.Count;
                                int childCols = dtFullChild.Columns.Count;
                                //
                                myPdfTableVal = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                                //Set Child DataTable 
                                myPdfTableVal.ImportDataTable(dtFullChild);
                                myPdfTableVal.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetFont(GridHeaderFont);
                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.White);
                                //Set column TrxID color white  
                                myPdfTableVal.Columns[0].SetColors(Color.White, Color.White);
                                myPdfTableVal.Columns[1].SetColors(Color.White, Color.White);
                                //Set header TrxID color white
                                myPdfTableVal.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                                myPdfTableVal.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.Gainsboro);
                                //Set child widths
                                myPdfTableVal.SetColumnsWidth(bcolWidths);
                                //Set child formats
                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTableVal.Rows[Convert.ToInt32(childIndexes[i].ToString())].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(childIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "TrxID":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.HeadersRow.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == strformat)
                                                        {
                                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                                            pcll.SetForegroundColor(Color.Gainsboro);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.Columns[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTableVal.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                //PDF Paging
                                while (!myPdfTableVal.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }//branch
                        }
                        //Set Branch CGrid DataTable
                        string CGTrxID = string.Empty;
                        int CGRowIndex = 0;
                        strCustom = string.Empty;
                        strTotalAmount = string.Empty;
                        TotalAmount = 0;
                        htGrandTotals = new Hashtable();
                        DataRow[] drCGRow = null;
                        if (dtCGbranch != null)
                        {
                            drCGRow = dtCGbranch.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                        }
                        if (drCGRow != null)
                        {
                            DataTable dtFullCG = new DataTable();
                            int[] CGIndexes = new int[drCGRow.Length];

                            if (drCGRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drCGRow.Length; drFoundRws++)
                                {
                                    CGRowIndex = dtCGbranch.Rows.IndexOf(drCGRow[drFoundRws]);
                                    DataRow dtCGRow = dtFullCG.NewRow();
                                    if (dtFullCG.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtCGbranch.Columns.Count; x++)
                                        {
                                            dtFullCG.Columns.Add(dtCGbranch.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullCG.Columns.Count; i++)
                                    {
                                        dtCGRow[i] = drCGRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    string[] grandFormats = (string[])htCGbFormats[CGRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullCG.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtCGRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtCGRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtCGRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }

                                    //
                                    dtFullCG.Rows.Add(dtCGRow);
                                    //Set ChildGrid TrxID
                                    childTrxID = dtCGbranch.Rows[0]["TrxID"].ToString();
                                    dtCGbranch.Rows[CGRowIndex].Delete();
                                    if (CGIndexes[0] != 0)
                                    {
                                        CGIndexes[drFoundRws] = CGRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        CGIndexes[drFoundRws] = CGRowIndex;
                                    }
                                    //
                                    dtFullCG.AcceptChanges();
                                    dtFullCG.TableName = dtCGbranch.TableName;
                                }

                                //Set ChildGrid GrandTotal 
                                IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                if (htGrandTotals.Keys.Count > 0)
                                {
                                    dtFullCG.Rows.Add(dtFullCG.NewRow());
                                }
                                while (enumTot.MoveNext())
                                {
                                    dtFullCG.Rows[dtFullCG.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                }

                                int childRows = dtFullCG.Rows.Count;
                                int childCols = dtFullCG.Columns.Count;
                                //Set Child CG DataTable 
                                myPdfTableVal = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                                myPdfTableVal.ImportDataTable(dtFullCG);
                                myPdfTableVal.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetFont(GridHeaderFont);
                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.White);

                                myPdfTableVal.Columns[0].SetColors(Color.White, Color.White);
                                myPdfTableVal.Columns[1].SetColors(Color.White, Color.White);

                                myPdfTableVal.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                                myPdfTableVal.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.Gainsboro);
                                myPdfTableVal.SetColumnsWidth(arrCGbranchWidths);
                                //

                                for (int i = 0; i < CGIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htCGbFormats[CGIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(CGIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "TrxID":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.HeadersRow.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == strformat)
                                                        {
                                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                                            pcll.SetForegroundColor(Color.Gainsboro);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.Columns[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTableVal.Rows[dtFullCG.Rows.Count - 1].SetFont(SumRowFont);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                while (!myPdfTableVal.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }

                        }


                        //Page break
                        Hashtable htPgBrk = new Hashtable();
                        htPgBrk.Add(1, dtNew.Rows.Count + 2 + dtFullChild.Rows.Count + 2);
                        for (int pgbrk = 1; pgbrk < 2; pgbrk++)
                        {
                            posY = 70;
                            currentYPos = 70;
                            int dtStRow = 0;
                            int dtEndRow = 0;
                            if (pgbrk == 1)
                            {
                                dtStRow = 0;
                            }
                            else
                            {
                                dtStRow = Convert.ToInt32(htPgBrk[pgbrk].ToString()) + 1;
                            }
                            if (pgbrk == 2)
                            {
                                dtEndRow = dtFullChild.Rows.Count - 1;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(htPgBrk[pgbrk].ToString()))
                                {
                                    dtEndRow = Convert.ToInt32(htPgBrk[pgbrk].ToString());
                                }
                            }
                            int rowsInTab = dtEndRow - dtStRow + 1;
                            if (pgbrk != 0)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((pageCnt))));
                            }
                        }
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
                throw ex;
            }
        }
        #endregion

        #region ReportStyle3
        /// <summary>
        /// Exports the data to PDF
        /// </summary>
        /// <param name="dt">Data table to be printed</param>
        /// <param name="dt">Filename to be printed</param>
        public void ReportStyle3(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, DataTable dtCGbranch, Hashtable htCGbFormats, bool CGbPLayout, int[] arrCGbranchWidths, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 200;
                }

                int[] chldColWidths = null;

                if (bcolWidths != null)
                {
                    chldColWidths = new int[bcolWidths.Length - 2];
                    int colCount = 2;
                    for (int wdts = 0; wdts <= bcolWidths.Length - 3; wdts++)
                    {
                        chldColWidths[wdts] = bcolWidths[colCount];
                        colCount++;
                    }
                }
                PdfTable myPdfTableVal = null;
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }


                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        Hashtable htGrandTotals = new Hashtable();
                        string parentTrxID = string.Empty;
                        //
                        foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt][0].ToString();
                            //dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        pDT = reportsBO.PivotTable(dtNew);
                        int rows = pDT.Rows.Count;
                        int cols = pDT.Columns.Count;
                        //
                        myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                        myPdfTable.ImportDataTable(pDT);
                        myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable.HeadersRow.SetFont(GridHeaderFont);
                        myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                        myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                        //
                        for (int wdts = 0; wdts < myPdfTable.Columns.Length; wdts++)
                        {
                            if (wdts == 0)
                            {
                                myPdfTable.Columns[wdts].SetWidth(20);
                            }
                            else
                            {
                                myPdfTable.Columns[wdts].SetWidth(90);
                            }
                        }
                        for (int rws = 0; rws < myPdfTable.Rows.Length; rws++)
                        {
                            for (int cll = 0; cll < myPdfTable.Rows[rws].Cells.Count; cll++)
                            {
                                if (cll == 0)
                                {
                                    myPdfTable.Cell(rws, cll).SetFont(GridHeaderFont);
                                }
                            }
                        }
                        //PDFPaging();

                        while (!myPdfTable.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos + 10;
                            }
                            if (myPdfDocument.PageHeight - posY < 200)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height - posY));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }

                        //Child
                        string childTrxID = string.Empty;
                        int childRowIndex = 0;
                        string strCustom = string.Empty;
                        string strTotalAmount = string.Empty;
                        double TotalAmount = 0;



                        if (dtChild != null)
                        {
                            DataRow[] drChildRow = dtChild.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }

                                    //int widthdiff = 0;
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                        //if the column width more than fullview length put ..
                                        /*   string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                           int columnWidth = bcolWidths[i];
                                           //Skip column widths for trxid and parent trxid

                                           if (i >= 2)
                                           {
                                               if (Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5) > Convert.ToInt32(bcolWidths[i]))
                                               {
                                                   bcolWidths[i] = Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5);
                                                   chldColWidths[widthdiff] = Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5);
                                               }
                                               if (currentData.Length > columnWidth)
                                               {

                                                   dtChRow[i] = currentData.Remove(columnWidth - 3) + "...";
                                                   //dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                               }
                                               else
                                               {
                                                   dtChRow[i] = currentData;
                                               }
                                               widthdiff++;
                                           }
                                           else
                                           {
                                               dtChRow[i] = currentData;
                                           }*/
                                    }

                                    //

                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    dtChild.Rows[childRowIndex].Delete();
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                }
                            }
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }

                            if (dtFullChild.Columns.Contains("TrxID"))
                            {
                                dtFullChild.Columns.Remove("TrxID");
                            }
                            if (dtFullChild.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                            {
                                dtFullChild.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                            }

                            int childRows = dtFullChild.Rows.Count;
                            int childCols = dtFullChild.Columns.Count;
                            //
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                            myPdfTable1.ImportDataTable(dtFullChild);
                            myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(GridHeaderFont);
                            myPdfTable1.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfTable1.SetColumnsWidth(chldColWidths);

                            for (int i = 0; i < childIndexes.Length; i++)
                            {
                                string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                foreach (string val in arrformats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "pFont":
                                            {
                                                // myPdfTable.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(SumRowFont);
                                                myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                break;
                                            }
                                        case "pUnderLine":
                                            {
                                                myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                // myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(FontUnderline);
                                                break;
                                            }
                                        case "pBox":
                                            {
                                                for (int clCnt = 1; clCnt < myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].Cells.Count; clCnt++)
                                                {
                                                    PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(childIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                                break;
                                            }
                                        case "pLnSkip":
                                            {
                                                foreach (PdfCell pcll in myPdfTable1.Rows[i].Cells)
                                                {
                                                    if (pcll.Content.ToString() == "SKIP")
                                                    {
                                                        pcll.SetBackgroundColor(Color.White);
                                                        pcll.SetForegroundColor(Color.White);
                                                    }
                                                }
                                                break;
                                            }
                                        case "RAlign":
                                            {
                                                //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                if (strvalues.Length > 2)
                                                {
                                                    // myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                    myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont1);
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            //PDFPaging();

                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 10;
                                }
                                if (myPdfDocument.PageHeight - posY < 200)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }

                        //Child Grid

                        //Set Branch CGrid DataTable
                        string CGTrxID = string.Empty;
                        int CGRowIndex = 0;
                        strCustom = string.Empty;
                        strTotalAmount = string.Empty;
                        TotalAmount = 0;
                        htGrandTotals = new Hashtable();
                        DataRow[] drCGRow = null;
                        if (dtCGbranch != null)
                        {
                            drCGRow = dtCGbranch.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                        }
                        if (drCGRow != null)
                        {
                            DataTable dtFullCG = new DataTable();
                            int[] CGIndexes = new int[drCGRow.Length];

                            if (drCGRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drCGRow.Length; drFoundRws++)
                                {
                                    CGRowIndex = dtCGbranch.Rows.IndexOf(drCGRow[drFoundRws]);
                                    DataRow dtCGRow = dtFullCG.NewRow();
                                    if (dtFullCG.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtCGbranch.Columns.Count; x++)
                                        {
                                            dtFullCG.Columns.Add(dtCGbranch.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullCG.Columns.Count; i++)
                                    {
                                        dtCGRow[i] = drCGRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    string[] grandFormats = (string[])htCGbFormats[CGRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullCG.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtCGRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtCGRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtCGRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }

                                    //
                                    dtFullCG.Rows.Add(dtCGRow);
                                    //Set ChildGrid TrxID
                                    childTrxID = dtCGbranch.Rows[0]["TrxID"].ToString();
                                    dtCGbranch.Rows[CGRowIndex].Delete();
                                    if (CGIndexes[0] != 0)
                                    {
                                        CGIndexes[drFoundRws] = CGRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        CGIndexes[drFoundRws] = CGRowIndex;
                                    }
                                    //
                                    dtFullCG.AcceptChanges();
                                    dtFullCG.TableName = dtCGbranch.TableName;
                                }

                                //Set ChildGrid GrandTotal 
                                IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                if (htGrandTotals.Keys.Count > 0)
                                {
                                    dtFullCG.Rows.Add(dtFullCG.NewRow());
                                }
                                while (enumTot.MoveNext())
                                {
                                    dtFullCG.Rows[dtFullCG.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                }

                                int childRows = dtFullCG.Rows.Count;
                                int childCols = dtFullCG.Columns.Count;
                                //Set Child CG DataTable 
                                myPdfTableVal = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                                myPdfTableVal.ImportDataTable(dtFullCG);
                                myPdfTableVal.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTableVal.HeadersRow.SetFont(GridHeaderFont);
                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.White);

                                myPdfTableVal.Columns[0].SetColors(Color.White, Color.White);
                                myPdfTableVal.Columns[1].SetColors(Color.White, Color.White);

                                myPdfTableVal.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                                myPdfTableVal.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                                myPdfTableVal.HeadersRow.SetBackgroundColor(Color.Gainsboro);
                                myPdfTableVal.SetColumnsWidth(arrCGbranchWidths);
                                //

                                for (int i = 0; i < CGIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htCGbFormats[CGIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTableVal.Rows[Convert.ToInt32(CGIndexes[i].ToString())].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(CGIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "TrxID":
                                                {
                                                    foreach (PdfCell pcll in myPdfTableVal.HeadersRow.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == strformat)
                                                        {
                                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                                            pcll.SetForegroundColor(Color.Gainsboro);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTableVal.Columns[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTableVal.Rows[dtFullCG.Rows.Count - 1].SetFont(SumRowFont);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                while (!myPdfTableVal.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }

                        }

                        //
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle4
        public void ReportStyle4(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, DataTable dtCGbranch, Hashtable htCGbFormats, bool CGbPLayout, int[] arrCGbranchWidths, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                }
                //for branch removing trxid and trxtype widths
                int colCount = 2;
                int[] chldColWidths = null;
                if (bcolWidths != null)
                {
                    chldColWidths = new int[bcolWidths.Length - 2];

                    for (int wdts = 0; wdts <= bcolWidths.Length - 3; wdts++)
                    {
                        chldColWidths[wdts] = bcolWidths[colCount];
                        colCount++;
                    }
                }
                //for branch grid view removing trxid and trxtype widths
                int[] CGColWidths = null;
                if (arrCGbranchWidths != null)
                {
                    CGColWidths = new int[arrCGbranchWidths.Length - 2];
                    colCount = 2;
                    for (int wdts = 0; wdts <= arrCGbranchWidths.Length - 3; wdts++)
                    {
                        CGColWidths[wdts] = arrCGbranchWidths[colCount];
                        colCount++;
                    }
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }

                posX = 20;//50
                posY = 70;//90
                width = myPdfDocument.PageWidth - 50;// 690; 
                height = myPdfDocument.PageHeight - 50;// 250;
                currentYPos = 70;

                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        //
                        foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt][0].ToString();
                            //dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        else
                        {
                            //to add sum row
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        int rows = dtNew.Rows.Count;
                        int cols = dtNew.Columns.Count;
                        myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                        myPdfTable.ImportDataTable(dtNew);
                        myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable.Columns[0].SetBackgroundColor(Color.White);
                        myPdfTable.Columns[0].SetForegroundColor(Color.White);
                        myPdfTable.HeadersRow.SetFont(GridHeaderFont);
                        myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                        myPdfTable.HeadersRow[0].SetColors(Color.White, Color.White);
                        myPdfTable.SetColumnsWidth(colWidths);
                        //parent
                        for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                        {
                            string[] arrformats = (string[])htPFormatModes[i];
                            foreach (string val in arrformats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "pFont":
                                        {
                                            myPdfTable.Rows[i].SetFont(SumRowFont);
                                            break;
                                        }
                                    case "pUnderLine":
                                        {
                                            myPdfTable.Rows[i].SetFont(FontUnderline);
                                            break;
                                        }
                                    case "pBox":
                                        {
                                            for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                            {
                                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                pr.StrokeWidth = 1;
                                                newPdfPage.Add(pr);
                                            }
                                            break;
                                        }
                                    case "pLnSkip":
                                        {
                                            foreach (PdfCell pcll in myPdfTable.Cells)
                                            {
                                                if (pcll.Content.ToString() == "SKIP")
                                                {
                                                    pcll.SetBackgroundColor(Color.White);
                                                    pcll.SetForegroundColor(Color.White);
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case "TrxID":
                                        {
                                            foreach (PdfCell pcll in myPdfTable.HeadersRow.Cells)
                                            {
                                                if (pcll.Content.ToString() == strformat)
                                                {
                                                    pcll.SetBackgroundColor(Color.White);
                                                    pcll.SetForegroundColor(Color.White);
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case "RAlign":
                                        {
                                            //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.Columns[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                            //if (strvalues.Length > 2)
                                            //{
                                            //    myPdfTable.Rows[i].SetFont(SumRowFont);
                                            //}
                                            break;
                                        }
                                }
                            }
                        }
                        while (!myPdfTable.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos + 20;
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }
                        //Child
                        PdfTable myPdfTable1 = null;
                        string branchName = string.Empty;
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    int rowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                                    //dtChild.Rows[rowIndex].Delete();
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                }
                                IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                if (htGrandTotals.Keys.Count > 0)
                                {
                                    dtFullChild.Rows.Add(dtFullChild.NewRow());
                                }
                                while (enumTot.MoveNext())
                                {
                                    dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                }
                                if (dtFullChild.Columns.Contains("TrxID"))
                                {
                                    dtFullChild.Columns.Remove("TrxID");
                                }
                                if (dtFullChild.Columns.Contains(dtNew.TableName.ToString() + "_TrxID"))
                                {
                                    dtFullChild.Columns.Remove(dtNew.TableName.ToString() + "_TrxID");
                                }
                                int childRows = dtFullChild.Rows.Count;
                                int childCols = dtFullChild.Columns.Count;
                                myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                                myPdfTable1.ImportDataTable(dtFullChild);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(GridHeaderFont);
                                myPdfTable1.SetColumnsWidth(chldColWidths);
                                myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);

                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTable1.Rows[i].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTable.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont1);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 5;
                                    }
                                    if (((myPdfDocument.PageHeight - 50) - posY) < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage1);
                                    // DRAW LINE AT END OF EACH CHILD TABLE
                                    double xPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.X;
                                    double yPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.Y;
                                    if (height > yPos)
                                    {
                                        if (myPdfTable1.Rows.Length == (newPdfTablePage1.LastRow + 1))
                                        {
                                            Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 10));
                                            Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 10));
                                            pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                            newPdfPage.Add(pdfLineBrk);
                                        }
                                    }
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y + 10;
                                }
                            }
                        }
                        //Child Grid Branch
                        if (dtCGbranch != null)
                        {
                            int childRowIndex = 0;
                            string childTrxID = string.Empty;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtCGbranch.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    int rowIndex = dtCGbranch.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtCGbranch.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtCGbranch.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    string[] grandFormats = (string[])htCGbFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    childTrxID = dtCGbranch.Rows[0]["TrxID"].ToString();
                                    dtCGbranch.Rows[rowIndex].Delete();
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtCGbranch.TableName;

                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }

                                }
                            }

                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }


                            if (dtFullChild.Columns.Contains("TrxID"))
                            {
                                dtFullChild.Columns.Remove("TrxID");
                            }
                            if (dtFullChild.Columns.Contains(dtNew.TableName.ToString() + "_TrxID"))
                            {
                                dtFullChild.Columns.Remove(dtNew.TableName.ToString() + "_TrxID");
                            }

                            int childRows = dtFullChild.Rows.Count;
                            int childCols = dtFullChild.Columns.Count;
                            myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                            myPdfTable1.ImportDataTable(dtFullChild);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(GridHeaderFont);
                            myPdfTable1.SetColumnsWidth(CGColWidths);
                            myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);

                            for (int i = 0; i < childIndexes.Length; i++)
                            {
                                string[] arrformats = (string[])htCGbFormats[childIndexes[i]];
                                foreach (string val in arrformats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "pFont":
                                            {
                                                myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                break;
                                            }
                                        case "pUnderLine":
                                            {
                                                myPdfTable1.Rows[i].SetFont(FontUnderline);
                                                break;
                                            }
                                        case "pBox":
                                            {
                                                for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                                {
                                                    PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                                break;
                                            }
                                        case "pLnSkip":
                                            {
                                                foreach (PdfCell pcll in myPdfTable.Cells)
                                                {
                                                    if (pcll.Content.ToString() == "SKIP")
                                                    {
                                                        pcll.SetBackgroundColor(Color.White);
                                                        pcll.SetForegroundColor(Color.White);
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                        case "RAlign":
                                            {
                                                myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                if (strvalues.Length > 2)
                                                {
                                                    myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont);
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            //
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 10;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }

                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle5
        /// <summary>
        /// Parent - Child Report printing
        /// </summary>
        public void ReportStyle5(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                }
                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);

                    //Child column widths removeing TrxID and TrxType fullviewlenghs
                    int[] chldColWidths = null;
                    if (bcolWidths != null)
                    {
                        chldColWidths = new int[bcolWidths.Length - 2];
                        int colCount = 2;
                        for (int wdts = 0; wdts <= bcolWidths.Length - 3; wdts++)
                        {
                            chldColWidths[wdts] = bcolWidths[colCount];
                            colCount++;
                        }
                    }

                    string imgpath = PDFImagePath();
                    PdfImage LogoImage = null;
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }


                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        //
                        foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();

                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt][0].ToString();
                            //dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        //if (dtNew.Columns.Contains("TrxID"))
                        //{
                        //    dtNew.Columns.Remove("TrxID");
                        //}
                        int rows = dtNew.Rows.Count;
                        int cols = dtNew.Columns.Count;
                        myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                        myPdfTable.ImportDataTable(dtNew);
                        myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfTable.HeadersRow.SetFont(HeaderFont);
                        myPdfTable.SetColumnsWidth(colWidths);
                        myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                        myPdfTable.Columns[0].SetBackgroundColor(Color.White);
                        myPdfTable.Columns[0].SetForegroundColor(Color.White);
                        myPdfTable.HeadersRow[0].SetColors(Color.White, Color.White);


                        //Parent Formats
                        for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                        {
                            string[] arrformats = (string[])htPFormatModes[i];
                            foreach (string val in arrformats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "pFont":
                                        {
                                            myPdfTable.Rows[i].SetFont(SumRowFont);
                                            break;
                                        }
                                    case "pUnderLine":
                                        {
                                            myPdfTable.Rows[i].SetFont(FontUnderline);
                                            break;
                                        }
                                    case "pBox":
                                        {
                                            for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                            {
                                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                pr.StrokeWidth = 1;
                                                newPdfPage.Add(pr);
                                            }
                                            break;
                                        }
                                    case "pLnSkip":
                                        {
                                            foreach (PdfCell pcll in myPdfTable.Cells)
                                            {
                                                if (pcll.Content.ToString() == "SKIP")
                                                {
                                                    pcll.SetBackgroundColor(Color.White);
                                                    pcll.SetForegroundColor(Color.White);
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case "TrxID":
                                        {
                                            foreach (PdfCell pcll in myPdfTable.HeadersRow.Cells)
                                            {
                                                if (pcll.Content.ToString() == strformat)
                                                {
                                                    pcll.SetBackgroundColor(Color.White);
                                                    pcll.SetForegroundColor(Color.White);
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case "RAlign":
                                        {
                                            //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.Columns[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                            //if (strvalues.Length > 2)
                                            //{
                                            //    //myPdfTable.Rows[i].SetFont(SumRowFont);
                                            //}
                                            break;
                                        }
                                }
                            }
                        }


                        //Parent
                        //PDFPaging();
                        while (!myPdfTable.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                if (posY != 130)
                                {
                                    if (currentYPos == 70)
                                    {
                                        currentYPos = currentYPos - 35;
                                    }
                                    posY = currentYPos + 15;
                                }
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }
                        //Child
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    int rowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }
                                    //
                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    //
                                    dtFullChild.Rows.Add(dtChRow);
                                    //
                                    childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                    //
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                }
                                //
                                IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                if (htGrandTotals.Keys.Count > 0)
                                {
                                    dtFullChild.Rows.Add(dtFullChild.NewRow());
                                }
                                while (enumTot.MoveNext())
                                {
                                    dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                }
                                //
                                if (dtFullChild.Columns.Contains("TrxID"))
                                {
                                    dtFullChild.Columns.Remove("TrxID");
                                }
                                if (dtFullChild.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                                {
                                    dtFullChild.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                                }
                                int childRows = dtFullChild.Rows.Count;
                                int childCols = dtFullChild.Columns.Count;
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                                myPdfTable1.ImportDataTable(dtFullChild);
                                myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetColumnsWidth(chldColWidths);
                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTable1.Rows[i].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTable1.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "TrxID":
                                                {
                                                    foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                                    {
                                                        if (pcll.Content.ToString() == strformat)
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    //myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }

                                //
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 10;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                    newPdfPage.Add(newPdfTablePage1);
                                    // DRAW LINE AT END OF EACH CHILD TABLE
                                    double xPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.X;
                                    double yPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.Y;
                                    if (height > yPos)
                                    {
                                        Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 10));
                                        Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 10));
                                        pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                    }
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y + 10;
                                }
                            }
                        }
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }

        }
        #endregion

        #region ReportStyle 405
        public void ReportStyle405(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                ////Default portrait pLayout="0"
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                int[] Arraywidth = new int[dt.Columns.Count - 1];
                foreach (XmlNode node in nodeColumns)
                {
                    if (node.Attributes["Caption"] != null)
                    {
                        {
                            DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                            if (dc != null)
                            {
                                //Set the column width based on FVL
                                if (node.Attributes["FullViewLength"] != null)
                                {
                                    if (node.Attributes["FullViewLength"].Value != "0")
                                    {
                                        Arraywidth[dc.Ordinal] = Convert.ToInt32(node.Attributes["FullViewLength"].Value);
                                    }
                                    else
                                    {
                                        Arraywidth[dc.Ordinal] = 15;
                                    }
                                }
                                //Getting the cols having Issummed=1 
                                if (node.Attributes["IsSummed"] != null)
                                {
                                    if (node.Attributes["IsSummed"].Value == "1")
                                    {
                                        if (!isSumExists)
                                            isSumExists = true;
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                    }
                                }
                                //Getting the cols having ControlType="Amount"//Isnumeric=1
                                if (node.Attributes["ControlType"] != null)
                                {
                                    if (node.Attributes["ControlType"].Value == "Amount")
                                    {
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                    }
                                }
                            }
                        }
                    }
                }
                //Setting columns width for cols not present in node columns
                for (int colCnt = 0; colCnt < dt.Columns.Count - 1; colCnt++)
                {
                    if (Arraywidth[colCnt].ToString() == string.Empty)
                        Arraywidth[colCnt] = 15;
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                //Setting the different font styles
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderFont1 = new Font("Verdana", 7, FontStyle.Bold);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
                Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
                int pageCnt = 0;
                #region Header
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                //Import DT to PDF table
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                myHeaderPdfTable.VisibleHeaders = false;
                //myHeaderPdfTable.SetBackgroundColor(Color.White);
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 145, 55 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                if (myHeaderPdfTable.Rows.Length > 2)
                {
                    int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                    if (dateLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    int periodLength = myHeaderPdfTable.Rows[2][1].Content.ToString().Length;
                    if (periodLength < 75)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[2][1].SetFont(HeaderPageTitleFont3);//Page subTitle
                }
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                //Adding new page and adding Header table,logo image and pageNo 
                PdfPage newPdfPage = myPdfDocument.NewPage();
                //Adding Header table
                newPdfPage.Add(myHeaderPdfTablePage);
                //Adding logo
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                #endregion
                #region Fill Branch DataTables
                DataTable dtChild = null;
                DataTable dtCGbranch = null;
                //
                int[] colWidths = null;
                int[] arrWidths = null;
                bool PLayout = new bool();
                //
                Hashtable htPFormats = new Hashtable();
                Hashtable htColFormats = new Hashtable();
                Hashtable htColNameValues = new Hashtable();
                DataTable dtParentAll = new DataTable();
                //Set Branch DataTable
                string branchName = string.Empty;
                string CGbranchName = string.Empty;
                XmlNode nodeBranch = null;
                // Set branch Table
                int[] colBranchWidths = null;
                int[] arrBranchWidths = null;
                bool bPLayout = false;
                //
                Hashtable htBFormats = new Hashtable();
                Hashtable htBColFormats = new Hashtable();
                Hashtable htBColNameValues = new Hashtable();
                //
                //Set Branch CGrid DataTable
                int[] colCGbranchWidths = null;
                int[] arrCGbranchWidths = null;
                bool CGbPLayout = false;
                //
                Hashtable htCGbFormats = new Hashtable();
                Hashtable htCGbColFormats = new Hashtable();
                Hashtable htCGbColNameValues = new Hashtable();
                //
                if (xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches/Branch") != null)
                {
                    nodeBranch = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranch != null)
                    {
                        foreach (XmlNode nodeBranchName in nodeBranch.ChildNodes)
                        {
                            XmlAttribute attrCntrlType = nodeBranchName.Attributes["ControlType"];
                            if (attrCntrlType != null && attrCntrlType.Value.Trim() == "GView")
                            {
                                CGbranchName = nodeBranchName.SelectSingleNode("Node").InnerText;
                            }
                            else
                            {
                                branchName = nodeBranchName.SelectSingleNode("Node").InnerText;
                            }
                        }
                    }
                }
                if (branchName != string.Empty)
                {
                    XmlNode nodeBranchColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/GridHeading/Columns");
                    XmlNode nodeBranchRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/RowList");
                    if (nodeBranchRowList != null)
                    {
                        dtChild = clsReportsUICore.ConvertToArrayColumns(nodeBranchColumns, "Branch", branchName, treeNodeName, out htBColFormats, out htBColNameValues, out colBranchWidths);
                        dtChild = clsReportsUICore.ConvertToDataTable(dtChild, "Branch", nodeBranchRowList, htBColFormats, htBColNameValues, colBranchWidths, true, out arrBranchWidths, out htBFormats, out bPLayout);
                    }
                }
                if (CGbranchName != string.Empty)
                {
                    XmlNode nodeCGbranchColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + CGbranchName + "/GridHeading/Columns");
                    XmlNode nodeCGbranchRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + CGbranchName + "/RowList");
                    if (nodeCGbranchRowList != null)
                    {
                        dtCGbranch = clsReportsUICore.ConvertToArrayColumns(nodeCGbranchColumns, "GView", CGbranchName, treeNodeName, out htCGbColFormats, out htCGbColNameValues, out colCGbranchWidths);
                        dtCGbranch = clsReportsUICore.ConvertToDataTable(dtCGbranch, "GView", nodeCGbranchRowList, htCGbColFormats, htCGbColNameValues, colCGbranchWidths, true, out arrCGbranchWidths, out htCGbFormats, out CGbPLayout);
                    }
                }
                #endregion
                #region ParentDT
                if (dt.Rows.Count > 0)
                {
                    DataTable dtClone =new DataTable();
                    dtClone = dt.Copy();
                    if (dtClone.Columns.Contains("TrxID"))
                    {
                        dtClone.Columns.Remove("TrxID");
                    }
                    dtClone.Rows[dtClone.Rows.Count - 1].Delete();
                    PdfTable myPdfParentTable = myPdfDocument.NewTable(FontRegular, dtClone.Rows.Count, dtClone.Columns.Count, 1);
                    //Import DT to PDF table
                    dtClone = objclsrpt.WrapFullViewLength(dtClone, Arraywidth);
                    myPdfParentTable.ImportDataTable(dtClone);
                    //Setting the header row text color as white
                    myPdfParentTable.HeadersRow.SetFont(HeaderFont1);
                    myPdfParentTable.HeadersRow.SetColors(Color.Black, Color.LightBlue);
                    myPdfParentTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfParentTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfParentTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfParentTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (m_htRightAlign.Count > 0)
                    {
                        //Right justifying Summed column content and IsNumeric column content
                        for (int pdfcol = 0; pdfcol < dtClone.Columns.Count; pdfcol++)
                        {
                            if (myPdfParentTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                            {
                                if (m_htRightAlign.Contains(myPdfParentTable.HeadersRow[pdfcol].Content.ToString()))
                                {
                                    myPdfParentTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfParentTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                            }
                        }
                    }
                    while (!myPdfParentTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 15;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfParentTablePage = myPdfParentTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        newPdfPage.Add(newPdfParentTablePage);
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        currentYPos = 70;

                    }
                }
                foreach (DataRow dRow in dt.Rows)
                {
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    Hashtable htGrandTotals = new Hashtable();
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }

                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = parentDT.Rows.Count;
                    int colsInTab = parentDT.Columns.Count;
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    parentDT = objclsrpt.WrapFullViewLength(parentDT, Arraywidth);
                    myPdfTable.ImportDataTable(parentDT);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetFont(HeaderFont1);
                    myPdfTable.HeadersRow.SetColors(Color.Black, Color.LightBlue);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (m_htRightAlign.Count > 0)
                    {
                        //Right justifying Summed column content and IsNumeric column content
                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                        {
                            if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                            {
                                if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                {
                                    myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                            }
                        }
                    }
                    foreach (DataColumn dCol in parentDT.Columns)
                    {
                        switch (dCol.ColumnName.ToString())
                        {
                            case "Group":
                            case "Description":
                                {
                                    break;
                                }
                            default:
                                {
                                    myPdfTable.Columns[dCol.Ordinal].SetBackgroundColor(Color.White);
                                    myPdfTable.Columns[dCol.Ordinal].SetForegroundColor(Color.White);
                                    myPdfTable.HeadersRow[dCol.Ordinal].SetBackgroundColor(Color.White);
                                    myPdfTable.HeadersRow[dCol.Ordinal].SetForegroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 15;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont1);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Branch dt start
                    #region Branch DT
                    DataRow[] drFiltered = null;
                    DataTable BranchDT = new DataTable();
                    string branchNodeName = nodeBranch.SelectSingleNode("//Node").InnerText;
                    //drFiltered = dtCGbranch.Select(branchNodeName + "_TrxID=" + parentTrxID);
                    //Partha - Made changes to accomodate Branch without control type Gview
                    if (dtChild != null)
                    {
                        drFiltered = dtChild.Select(branchNodeName + "_TrxID='" + parentTrxID + "'");
                    }
                    else if (dtCGbranch != null)
                    {
                        drFiltered = dtCGbranch.Select(branchNodeName + "_TrxID='" + parentTrxID + "'");
                    }
                    if (drFiltered.Length > 0)
                    {
                        int[] childIndexes = new int[drFiltered.Length];
                        int childRowIndex = 0;
                        string strCustom = string.Empty;
                        string strTotalAmount = string.Empty;
                        double TotalAmount = 0;
                        for (int drFoundRws = 0; drFoundRws < drFiltered.Length; drFoundRws++)
                        {
                            DataRow dtChRow = BranchDT.NewRow();
                            int rowIndex = 0;
                            if (dtChild != null)
                            {
                                if (BranchDT.Columns.Count == 0)
                                {
                                    for (int x = 0; x < dtChild.Columns.Count; x++)
                                    {
                                        BranchDT.Columns.Add(dtChild.Columns[x].ColumnName);
                                    }
                                }
                                for (int i = 0; i < BranchDT.Columns.Count; i++)
                                {
                                    dtChRow[i] = drFiltered[drFoundRws].ItemArray[i].ToString();
                                }
                                BranchDT.Rows.Add(dtChRow);
                                //
                                rowIndex = dtChild.Rows.IndexOf(drFiltered[drFoundRws]);
                                string[] grandFormats = (string[])htBFormats[childRowIndex];
                                foreach (string val in grandFormats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "RAlign":
                                            {
                                                if (strvalues.Length > 2)
                                                {
                                                    strCustom = string.Empty;
                                                    decimal amount;
                                                    TotalAmount = 0;
                                                    string amt = string.Empty;
                                                    int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                    string colName = BranchDT.Columns[colNo].ColumnName.Trim().ToString();
                                                    if (!htGrandTotals.ContainsKey(colName))
                                                    {
                                                        Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals.Add(colName, amt);
                                                    }
                                                    else
                                                    {
                                                        TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                        if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                        {
                                                            TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                        }
                                                        strTotalAmount = Convert.ToString(TotalAmount);
                                                        Decimal.TryParse(strTotalAmount, out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals[colName] = amt;
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            else if (dtCGbranch != null)
                            {
                                if (BranchDT.Columns.Count == 0)
                                {
                                    for (int x = 0; x < dtCGbranch.Columns.Count; x++)
                                    {
                                        BranchDT.Columns.Add(dtCGbranch.Columns[x].ColumnName);
                                    }
                                }
                                for (int i = 0; i < BranchDT.Columns.Count; i++)
                                {
                                    dtChRow[i] = drFiltered[drFoundRws].ItemArray[i].ToString();
                                }
                                BranchDT.Rows.Add(dtChRow);
                                //
                                rowIndex = dtCGbranch.Rows.IndexOf(drFiltered[drFoundRws]);
                                string[] grandFormats = (string[])htCGbFormats[childRowIndex];
                                foreach (string val in grandFormats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "RAlign":
                                            {
                                                if (strvalues.Length > 2)
                                                {
                                                    strCustom = string.Empty;
                                                    decimal amount;
                                                    TotalAmount = 0;
                                                    string amt = string.Empty;
                                                    int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                    string colName = BranchDT.Columns[colNo].ColumnName.Trim().ToString();
                                                    if (!htGrandTotals.ContainsKey(colName))
                                                    {
                                                        Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals.Add(colName, amt);
                                                    }
                                                    else
                                                    {
                                                        TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                        if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                        {
                                                            TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                        }
                                                        strTotalAmount = Convert.ToString(TotalAmount);
                                                        Decimal.TryParse(strTotalAmount, out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals[colName] = amt;
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            if (dtChild != null)
                            {
                                dtChild.Rows[rowIndex].Delete();
                                BranchDT.AcceptChanges();
                                BranchDT.TableName = dtChild.TableName;
                            }
                            else
                            {
                                dtCGbranch.Rows[rowIndex].Delete();
                                BranchDT.AcceptChanges();
                                BranchDT.TableName = dtCGbranch.TableName;
                            }
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                        }
                        //}
                        if (BranchDT.Columns.Contains("TrxID"))
                        {
                            BranchDT.Columns.Remove("TrxID");
                        }
                        if (BranchDT.Columns.Contains(branchNodeName + "_TrxID"))
                        {
                            BranchDT.Columns.Remove(branchNodeName + "_TrxID");
                        }
                        IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                        if (htGrandTotals.Keys.Count > 0)
                        {
                            BranchDT.Rows.Add(BranchDT.NewRow());
                            BranchDT.Rows.Add(BranchDT.NewRow());
                        }
                        foreach (DataColumn dBCol in BranchDT.Columns)
                        {
                            BranchDT.Rows[BranchDT.Rows.Count - 2][dBCol.ColumnName.ToString()] = "SKIP";
                        }
                        while (enumTot.MoveNext())
                        {
                            BranchDT.Rows[BranchDT.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        }
                        BranchDT.Rows[BranchDT.Rows.Count - 1][0] = "Grand Totals";
                        if (BranchDT.Rows.Count > 0)
                        {
                            Hashtable m_htBranchRightAlign = new Hashtable();
                            Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                            bool sumExists = false;
                            int rowsInBranchDT = BranchDT.Rows.Count;
                            int colsInBranchDT = BranchDT.Columns.Count;
                            //Getting the columns to be displayed in grid
                            XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                            int branchColPos = 0;
                            int[] BranchArraywidth = new int[colsInBranchDT];
                            foreach (DataColumn dBranchCol in BranchDT.Columns)
                            {
                                string strcolumname = dBranchCol.ColumnName;
                                XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption =\"" + strcolumname + "\"]");
                                //Checking for isSummed value for that column
                                if (nodeBranchCol != null)
                                {
                                    //Getting the cols having Issummed=1 
                                    if (nodeBranchCol.Attributes["IsSummed"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                        {
                                            if (!sumExists)
                                                sumExists = true;
                                            if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                        }
                                    }
                                    //Getting the cols having ControlType="Amount"//Isnumeric=1
                                    if (nodeBranchCol.Attributes["ControlType"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                        {
                                            if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                        }
                                    }
                                }
                                //Setting the column width of branch table
                                int dcPos = dBranchCol.Ordinal;
                                int colFVL = 0;
                                if (nodeBranchCol != null)
                                {
                                    if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                    {
                                        colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                    }
                                }
                                if (colFVL != 0)
                                {
                                    BranchArraywidth[dcPos] = colFVL;
                                }
                                else
                                {
                                    BranchArraywidth[dcPos] = 15;
                                }
                            }
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                            Font myHeaderFont = new Font("Verdana", 10, FontStyle.Bold);
                            myPdfTable1.ImportDataTable(BranchDT);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont1);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.LightBlue);
                            myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                            myPdfTable1.SetColumnsWidth(BranchArraywidth);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            foreach (PdfCell pCell in myPdfTable1.Rows[myPdfTable1.Rows.Length - 2].Cells)
                            {
                                switch (pCell.Content.ToString())
                                {
                                    case "SKIP":
                                        {
                                            pCell.SetForegroundColor(Color.White);
                                            pCell.SetBackgroundColor(Color.White);
                                            break;
                                        }
                                }
                            }
                            for (int i = 0; i < childIndexes.Length; i++)
                            {
                                string[] arrformats = null;
                                if (dtChild != null)
                                {
                                    arrformats = (string[])htBFormats[childIndexes[i]];
                                }
                                else if (dtCGbranch != null)
                                {
                                    arrformats = (string[])htCGbFormats[childIndexes[i]];
                                }
                                foreach (string val in arrformats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "pFont":
                                            {
                                                myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                break;
                                            }
                                        case "pUnderLine":
                                            {
                                                myPdfTable1.Rows[i].SetFont(FontUnderline);
                                                break;
                                            }
                                        case "pBox":
                                            {
                                                for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                                {
                                                    PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                                break;
                                            }
                                        case "pLnSkip":
                                            {
                                                foreach (PdfCell pcll in myPdfTable.Cells)
                                                {
                                                    if (pcll.Content.ToString() == "SKIP")
                                                    {
                                                        pcll.SetBackgroundColor(Color.White);
                                                        pcll.SetForegroundColor(Color.White);
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                        case "RAlign":
                                            {
                                                myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                if (strvalues.Length > 2)
                                                {
                                                    myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont1);
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 5;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY));
                                newPdfPage.Add(newPdfTablePage1);
                                //
                                double xPos1 = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.X;
                                double yPos1 = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.Y;
                                if (height > yPos1)
                                {
                                    if (myPdfTable1.Rows.Length == (newPdfTablePage1.LastRow + 1))
                                    {
                                        Point pStart1 = new Point(Convert.ToInt32(xPos1), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) - 10);
                                        Point pEnd1 = new Point(Convert.ToInt32(xPos1 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) - 10);

                                        pdfLineBrk = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                    }
                                }
                                //
                                // DRAW LINE AT END OF EACH CHILD TABLE
                                double xPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.X;
                                double yPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.Y;
                                if (height > yPos)
                                {
                                    if (myPdfTable1.Rows.Length == (newPdfTablePage1.LastRow + 1))
                                    {
                                        //Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 15));
                                        //Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 15));
                                        Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) + 5);
                                        Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) + 5);

                                        pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                    }
                                }
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y + 15;
                            }
                        }
                    }
                    #endregion
                    //Branch dt end
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                #endregion
                //Parent dt end
                newPdfPage.SaveToDocument();
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region NewReport Style 10
        public void ReportStyle10(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                }

                int totalordinal = 0;
                if (dt.Rows.Count > 0)
                {
                    for (int rws = 0; rws < dt.Rows.Count; rws++)
                    {
                        foreach (DataColumn dcn in dt.Columns)
                        {
                            switch (dcn.ColumnName.Trim().ToString())
                            {
                                case "Total":
                                    {
                                        if (dt.Rows[rws][dcn.Ordinal].ToString() != string.Empty)
                                        {
                                            if (dt.Rows[rws][dcn.Ordinal].ToString() != "SKIP")
                                            {
                                                dt.Rows[rws][dcn.Ordinal - 1] = dt.Rows[rws][dcn.Ordinal].ToString();
                                                dt.Rows[rws][dcn.Ordinal] = "FREE";
                                            }
                                            totalordinal = dt.Columns["Total"].Ordinal;

                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    int rows = dt.Rows.Count;
                    int cols = dt.Columns.Count;
                    myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                    myPdfTable.ImportDataTable(dt);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.Columns[0].SetBackgroundColor(Color.White);
                    myPdfTable.Columns[0].SetForegroundColor(Color.White);
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    myPdfTable.SetColumnsWidth(colWidths);
                    foreach (DataColumn dc in dt.Columns)
                    {
                        int colpos = dc.Ordinal;
                        switch (dc.ColumnName.ToString())
                        {
                            case "Classification":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                    myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                    break;
                                }
                            case "Account Type":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                    int widthss = (colWidths[colpos]) / 2;
                                    myPdfTable.Columns[colpos].SetWidth(widthss + 5);
                                    myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                    break;
                                }
                            case "Description":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                    break;
                                }
                            case "Ending Balance":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.HeadersRow[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Columns[colpos].SetWidth(15);
                                    break;
                                }
                            case "Total":
                                {
                                    int widthss = (colWidths[colpos]) / 2;
                                    myPdfTable.Columns[colpos].SetWidth(widthss + 15);
                                    myPdfTable.Columns[colpos].SetTransparent();
                                    myPdfTable.Columns[colpos].SetForegroundColor(Color.White);
                                    myPdfTable.Columns[colpos].SetBackgroundColor(Color.White);
                                    myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                    break;
                                }
                            case "% Sales":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                            case "TrxID":
                                {
                                    myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                    myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                    break;
                                }
                        }
                    }

                    // PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));


                    ArrayList al = new ArrayList();
                    Hashtable htPbox = new Hashtable();

                    for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                    {
                        string[] arrformats = (string[])htPFormatModes[i];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        //PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX + 30, posY, width - 50, height - posY));
                                        //for (int index = 0; index < myPdfTable.Rows.Length; index++)
                                        //{
                                        //    int cellcnt = 0;
                                        //    for (; cellcnt < myPdfTable.Rows[index].Cells.Count; )
                                        //    {
                                        //        foreach (PdfCell pcell in myPdfTable.Rows[index].Cells)
                                        //        {
                                        //            if (pcell.Content.ToString() != string.Empty)
                                        //            {
                                        //                cellcnt = 0;
                                        //                foreach (PdfCell phcell in myPdfTable.HeadersRow.Cells)
                                        //                {
                                        //                    switch (phcell.Content.ToString().Trim())
                                        //                    {
                                        //                        case "Total":
                                        //                            {
                                        //                                //double xPos = newPdfTablePage.CellArea(index, cellcnt - 1).TopLeftVertex.X;
                                        //                                //double yPos = newPdfTablePage.CellArea(index, cellcnt - 1).TopLeftVertex.Y;
                                        //                                ////
                                        //                                //Point pStart = new Point(Convert.ToInt32(xPos + 20), Convert.ToInt32(yPos - 1));
                                        //                                //Point pEnd = new Point(Convert.ToInt32(xPos + 170), Convert.ToInt32(yPos - 1));
                                        //                                //PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        //                                //newPdfPage.Add(pdfLineBrk);
                                        //                                ////
                                        //                                //Point pStart1 = new Point(Convert.ToInt32(xPos + 20), Convert.ToInt32(yPos + 10));
                                        //                                //Point pEnd1 = new Point(Convert.ToInt32(xPos + 170), Convert.ToInt32(yPos + 10));
                                        //                                //PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                        //                                //newPdfPage.Add(pdfLineBrk1);
                                        //                                PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt - 1).ToRectangle(Color.Black, 1, Color.White);
                                        //                                pr.StrokeWidth = 1;
                                        //                                newPdfPage.Add(pr);
                                        //                                break;
                                        //                            }
                                        //                    }
                                        //                    cellcnt++;
                                        //                }
                                        //                break;
                                        //            }
                                        //        }
                                        //        break;
                                        //    }
                                        //}

                                        //al.Add(i);

                                        if (!htPbox.Contains(i))
                                        {
                                            htPbox.Add(i, totalordinal);
                                        }

                                        //for (int cellcnt = 0; cellcnt < myPdfTable.Rows[i].Cells.Count; cellcnt++)
                                        //{
                                        //    PdfRectangle pr = newPdfTablePage.CellArea(i, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                        //    pr.StrokeWidth = 1;
                                        //    newPdfPage.Add(pr);
                                        //}


                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        break;
                                    }
                            }
                        }
                    }

                    //PDFPaging();


                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos;// +25;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }

                        //Printing Row boxes

                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY - 40, width, height - posY));
                        //for (int i = 0; i < al.Count; i++)
                        //{
                        //    int j = Convert.ToInt32(al[i].ToString());

                        //    //for (int cellcnt = 0; cellcnt < myPdfTable.Rows[j].Cells.Count; cellcnt++)
                        //    //{
                        //    //    PdfRectangle pr = newPdfTablePage.CellArea(j, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                        //    //    pr.StrokeWidth = 1;
                        //    //    newPdfPage.Add(pr);
                        //    //}

                        //}

                        IDictionaryEnumerator enumerator = htPbox.GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            int rowbox = Convert.ToInt32(enumerator.Key.ToString());
                            int cellbox = Convert.ToInt32(enumerator.Value.ToString());

                            PdfRectangle pr = newPdfTablePage.CellArea(rowbox, cellbox).ToRectangle(Color.Black, 1, Color.White);
                            pr.StrokeWidth = 1;
                            newPdfPage.Add(pr);
                        }

                        //Adding Rows content
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle100
        public void ReportStyle100(DataTable dtParent, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                double posX = 20;
                double posY = 30;
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);

                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;

                newPdfPage = myPdfDocument.NewPage();
                posY = 30;
                currentYPos = 30;

                //Child
                if (dtChild != null)
                {

                    int childRows = dtChild.Rows.Count;
                    int childCols = dtChild.Columns.Count;
                    myPdfTable = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable.ImportDataTable(dtChild);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);


                    myPdfTable.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable.Columns[1].SetColors(Color.White, Color.White);

                    myPdfTable.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                    myPdfTable.HeadersRow.SetBackgroundColor(Color.Gainsboro);
                    myPdfTable.SetColumnsWidth(bcolWidths);

                }
                for (int i = 0; i < htbPFormats.Keys.Count; i++)
                {
                    string[] arrformats = (string[])htbPFormats[i];
                    foreach (string val in arrformats)
                    {
                        string[] strvalues = val.Split('~');
                        string strformat = string.Empty;
                        if (strvalues.Length > 1)
                        {
                            strformat = strvalues[0];
                        }
                        else
                        {
                            strformat = strvalues[0];
                        }
                        switch (strformat)
                        {
                            case "pFont":
                                {
                                    myPdfTable.Rows[i].SetFont(SumRowFont);
                                    break;
                                }
                            case "pUnderLine":
                                {
                                    myPdfTable.Rows[i].SetFont(FontUnderline);
                                    break;
                                }
                            case "pBox":
                                {
                                    for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                    {
                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                        pr.StrokeWidth = 1;
                                        newPdfPage.Add(pr);
                                    }
                                    break;
                                }
                            case "pLnSkip":
                                {
                                    foreach (PdfCell pcll in myPdfTable.Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "TrxID":
                                {
                                    foreach (PdfCell pcll in myPdfTable.HeadersRow.Cells)
                                    {
                                        if (pcll.Content.ToString() == strformat)
                                        {
                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                            pcll.SetForegroundColor(Color.Gainsboro);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "RAlign":
                                {
                                    myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                    if (dtChild.Rows.Count > 1)
                                    {
                                        myPdfTable.Cell(1, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable.Cell(1, Convert.ToInt32(strvalues[1].ToString())).SetFont(SumRowFont);
                                    }
                                    break;
                                }
                        }
                    }
                }

                while (!myPdfTable.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    else
                    {
                        if (posY != currentYPos)
                            posY = currentYPos + 25;
                    }
                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    PdfTablePage newPdfTablePage1 = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage1);
                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                    amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                }



                if (dtParent.Rows.Count > 0)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    else
                    {
                        if (posY != currentYPos)
                            posY = 350;// currentYPos + 150;
                    }
                    if (myPdfDocument.PageHeight - posY < 150)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    double posYPayTo = 0;
                    foreach (DataColumn dcol in dtParent.Columns)
                    {
                        switch (dcol.ColumnName.Trim())
                        {
                            case "Check Amount":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, amtColPosX + posX + 70, posY, 100, 50),
                                                                ContentAlignment.MiddleLeft, "Check Total : " + dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                    }
                                    break;
                                }
                            //case "(Pay To) Name":
                            //    {
                            //        if (dtParent.Rows[0][dcol] != null)
                            //        {
                            //            PdfTextArea pta = new PdfTextArea(FontRegular,
                            //                                    Color.Black, new PdfArea(myPdfDocument, posX, posY + 15, 100, 50),
                            //                                    ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                            //            newPdfPage.Add(pta);
                            //        }
                            //        break;
                            //    }
                            case "(Pay To) Name":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        string[] strarr = dtParent.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 15;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (strarr[arrLgh].ToString() != string.Empty)
                                            {
                                                strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 59.5, addPosY, 200, 50),
                                                                    ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                        posYPayTo = addPosY;
                                    }
                                    break;
                                }
                            case "Vendor":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, posX + 200, posY + 15, 100, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                    }
                                    break;
                                }
                            case "Check Date":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, 300, posY + 15, 100, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim() + " : " + dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, 350, posY + 45, 100, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                    }
                                    break;
                                }
                            case "Check Number":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        double chkNoWidth = (width - amountColWidth - 115) - (500);
                                        string star = " ";
                                        for (int strCnt = 0; strCnt < Convert.ToInt32(chkNoWidth / 4) - (dtParent.Rows[0][dcol].ToString().Length); strCnt++)
                                        {
                                            //star += "*";
                                        }
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, 500, posY + 45, 100, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                   Color.Black, new PdfArea(myPdfDocument, 500 + (dtParent.Rows[0][dcol].ToString().Length * 5), posY + 45, 100, 50),
                                                                   ContentAlignment.MiddleLeft, dtParent.Rows[0]["Check Number"].ToString());
                                        newPdfPage.Add(pta1);
                                    }
                                    break;
                                }
                            case "Written Amount":
                                {
                                    if (dtParent.Rows[0]["Check Amount"] != null)
                                    {
                                        //Converting the amount into decimal
                                        Decimal decimalNo = Convert.ToDecimal(dtParent.Rows[0]["Check Amount"]);
                                        long wholeNumber = Convert.ToInt64(decimalNo);//Getting the whole no portion of the number
                                        double decimalPortion = Convert.ToDouble(decimalNo - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                        string decimalPart = string.Empty;
                                        //Formatting the decimal portion
                                        //if (decimalPortion != 0)
                                        {
                                            decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                        }
                                        //Converting the number into words
                                        //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                        string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, 300, posY + 60, 500, 100),
                                                                ContentAlignment.MiddleLeft, noInWords);
                                        newPdfPage.Add(pta);
                                    }
                                    break;
                                }
                            case "Sent To:":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        //if (dtParent.Rows[0]["(Pay To) Name"] != null)
                                        //{
                                        //    PdfTextArea pta = new PdfTextArea(FontRegular,
                                        //                            Color.Black, new PdfArea(myPdfDocument, posX + 40, posY + 75, 150, 100),
                                        //                            ContentAlignment.MiddleLeft, dtParent.Rows[0]["(Pay To) Name"].ToString());
                                        //    newPdfPage.Add(pta);
                                        //}
                                        string[] strarr = dtParent.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posYPayTo;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (strarr[arrLgh].ToString() != string.Empty)
                                            {
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, posX + 40, addPosY, 250, 100),
                                                                    ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                            else
                                            {
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX + 40, addPosY, 250, 100),
                                                                   ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                    }
                    //Printing the Check total in words if column is not being sent
                    if (!dtParent.Columns.Contains("Written Amount"))
                    {
                        if (dtParent.Columns.Contains("Check Amount"))
                        {
                            if (dtParent.Rows[0]["Check Amount"] != null)
                            {
                                //Converting the amount into decimal
                                Decimal decimalNo = Convert.ToDecimal(dtParent.Rows[0]["Check Amount"]);
                                long wholeNumber = Convert.ToInt64(decimalNo);//Getting the whole no portion of the number
                                double decimalPortion = Convert.ToDouble(decimalNo - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                string decimalPart = string.Empty;
                                //Formatting the decimal portion
                                //if (decimalPortion != 0)
                                {
                                    decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                }
                                //Converting the number into words
                                //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                        Color.Black, new PdfArea(myPdfDocument, 300, posY + 60, 500, 100),
                                                        ContentAlignment.MiddleLeft, noInWords);
                                newPdfPage.Add(pta);
                            }
                        }
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle101
        public void ReportStyle101(DataTable dtParent, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                PdfTable myPdfTable1 = null;
                double posX = 20;
                double posY = 30;
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);

                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;

                newPdfPage = myPdfDocument.NewPage();
                posY = 20;
                currentYPos = 20;

                int childRows = 0;
                int childCols = 0;

                // Child 


                if (dtChild != null)
                {
                    //TRIM COLUMN VALUES

                    for (int i = 0; i < dtChild.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtChild.Columns.Count; j++)
                        {
                            //if the column width more than fullview length put ..
                            string currentData = dtChild.Rows[i][j].ToString();
                            int columnWidth = bcolWidths[j];
                            //Skip column widths for trxid and parent trxid
                            if (j >= 2)
                            {
                                if (currentData.Length >= columnWidth)
                                {

                                    dtChild.Rows[i][j] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                }
                            }

                        }
                        //dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                    }


                    //ADD Check Total to Child DataTable
                    if (dtChild.Rows.Count > 1 && dtChild.Columns.Count > 1)
                    {
                        dtChild.Rows[dtChild.Rows.Count - 1][dtChild.Columns.Count - 2] = "Check  Total";
                        dtChild.Rows[dtChild.Rows.Count - 1][dtChild.Columns.Count - 1] = "$" + dtChild.Rows[dtChild.Rows.Count - 1][dtChild.Columns.Count - 1].ToString().Replace(",", "");
                    }


                    //Child PDF Document
                    childRows = dtChild.Rows.Count;
                    childCols = dtChild.Columns.Count;
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);

                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);

                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                    myPdfTable1.SetColumnsWidth(bcolWidths);
                }
                for (int i = 0; i < htbPFormats.Keys.Count; i++)
                {
                    string[] arrformats = (string[])htbPFormats[i];
                    foreach (string val in arrformats)
                    {
                        string[] strvalues = val.Split('~');
                        string strformat = string.Empty;
                        if (strvalues.Length > 1)
                        {
                            strformat = strvalues[0];
                        }
                        else
                        {
                            strformat = strvalues[0];
                        }
                        switch (strformat)
                        {
                            case "pFont":
                                {
                                    myPdfTable1.Rows[i].SetFont(SumRowFont);
                                    break;
                                }
                            case "pUnderLine":
                                {
                                    myPdfTable1.Rows[i].SetFont(FontUnderline);
                                    break;
                                }
                            case "pBox":
                                {
                                    for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                    {
                                        PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                        pr.StrokeWidth = 1;
                                        newPdfPage.Add(pr);
                                    }
                                    break;
                                }
                            case "pLnSkip":
                                {
                                    foreach (PdfCell pcll in myPdfTable1.Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "TrxID":
                                {
                                    foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                    {
                                        if (pcll.Content.ToString() == strformat)
                                        {
                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                            pcll.SetForegroundColor(Color.Gainsboro);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "RAlign":
                                {
                                    myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                    if (dtChild.Rows.Count > 1)
                                    {
                                        //To Apply font for check total
                                        myPdfTable1.Cell(1, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.Cell(1, Convert.ToInt32(strvalues[1].ToString())).SetFont(SumRowFont);
                                        myPdfTable1.Cell(1, Convert.ToInt32(strvalues[1].ToString()) - 1).SetFont(SumRowFont);
                                    }
                                    break;
                                }
                        }
                    }
                }


                while (!myPdfTable1.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    else
                    {
                        if (posY != currentYPos)
                            posY = currentYPos + 25;
                    }
                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                    newPdfPage.Add(newPdfTablePage1);
                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                    amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                }

                PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);

                myPdfTable2.ImportDataTable(dtChild);
                myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                myPdfTable2.HeadersRow.SetFont(HeaderFont);
                myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);

                myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                myPdfTable2.Columns[1].SetColors(Color.White, Color.White);

                myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);

                myPdfTable2.SetColumnsWidth(bcolWidths);

                for (int i = 0; i < htbPFormats.Keys.Count; i++)
                {
                    string[] arrformats = (string[])htbPFormats[i];
                    foreach (string val in arrformats)
                    {
                        string[] strvalues = val.Split('~');
                        string strformat = string.Empty;
                        if (strvalues.Length > 1)
                        {
                            strformat = strvalues[0];
                        }
                        else
                        {
                            strformat = strvalues[0];
                        }
                        switch (strformat)
                        {
                            case "pFont":
                                {
                                    myPdfTable2.Rows[i].SetFont(SumRowFont);
                                    break;
                                }
                            case "pUnderLine":
                                {
                                    myPdfTable2.Rows[i].SetFont(FontUnderline);
                                    break;
                                }
                            case "pBox":
                                {
                                    for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                    {
                                        PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                        pr.StrokeWidth = 1;
                                        newPdfPage.Add(pr);
                                    }
                                    break;
                                }
                            case "pLnSkip":
                                {
                                    foreach (PdfCell pcll in myPdfTable2.Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "TrxID":
                                {
                                    foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                    {
                                        if (pcll.Content.ToString() == strformat)
                                        {
                                            pcll.SetBackgroundColor(Color.Gainsboro);
                                            pcll.SetForegroundColor(Color.Gainsboro);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "RAlign":
                                {
                                    myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                    if (dtChild.Rows.Count > 1)
                                    {
                                        //To Apply font for check total
                                        myPdfTable2.Cell(1, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.Cell(1, Convert.ToInt32(strvalues[1].ToString())).SetFont(SumRowFont);
                                        myPdfTable2.Cell(1, Convert.ToInt32(strvalues[1].ToString()) - 1).SetFont(SumRowFont);
                                    }


                                    break;
                                }
                        }
                    }
                }


                while (!myPdfTable2.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    else
                    {
                        if (posY != currentYPos)
                            posY = 535 + 25;
                    }
                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage2);
                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                }

                //Parent
                if (dtParent.Rows.Count > 0)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    else
                    {
                        if (posY != currentYPos)
                            posY = 300;// currentYPos + 150;
                    }
                    if (myPdfDocument.PageHeight - posY < 150)
                    {
                        posY = 30;
                        currentYPos = 30;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo
                        newPdfPage = myPdfDocument.NewPage();
                    }
                    posY = posY - 150;
                    double posyPayTo = 0;
                    foreach (DataColumn dcol in dtParent.Columns)
                    {
                        switch (dcol.ColumnName.Trim())
                        {
                            case "(Pay To) Name":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        string[] strarr = dtParent.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 240;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (strarr[arrLgh].ToString() != string.Empty)
                                            {
                                                PdfTextArea pta = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                        }
                                        posyPayTo = addPosY;
                                        PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 70, 200, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(ptaPayToDupe1);
                                        PdfTextArea ptaPayToDupe2 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 600, 200, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(ptaPayToDupe2);
                                    }
                                    break;
                                }
                            case "Sent To:":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        string[] strarr = dtParent.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posyPayTo;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (strarr[arrLgh].ToString() != string.Empty)
                                            {
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, addPosY, 200, 50),
                                                                    ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                    }
                                    break;
                                }
                            case "Check Number":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, width - 10, posY + 70, 100, 50),
                                                                   ContentAlignment.MiddleLeft, dtParent.Rows[0]["Check Number"].ToString());
                                        newPdfPage.Add(pta1);
                                        PdfTextArea ptaChkDupe2 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 10, posY + 600, 100, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0]["Check Number"].ToString());
                                        newPdfPage.Add(ptaChkDupe2);
                                    }
                                    break;
                                }
                            case "Check Date":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {

                                        PdfTextArea pta = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 104, posY + 175, 100, 50),
                                                                ContentAlignment.MiddleLeft, dtParent.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                    }
                                    break;
                                }
                            case "Check Amount":
                                {
                                    if (dtParent.Rows[0][dcol] != null)
                                    {
                                        double chkNoWidth = (width - amountColWidth) - (500);
                                        string star = " ";
                                        for (int strCnt = 0; strCnt < Convert.ToInt32(chkNoWidth / 4) - (dtParent.Rows[0][dcol].ToString().Length); strCnt++)
                                        {
                                            star += "*";
                                        }
                                        star += dtParent.Rows[0][dcol.ColumnName.ToString()].ToString();
                                        PdfTextArea pta = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 50 + (dtParent.Rows[0][dcol].ToString().Length * 5) + 12, posY + 175, 100, 50),
                                                                ContentAlignment.MiddleLeft, star);
                                        newPdfPage.Add(pta);
                                        //Converting the amount into decimal
                                        int deciNo = dtParent.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                        string numb = string.Empty;
                                        if (deciNo > 0)
                                        {
                                            numb = dtParent.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                        }
                                        numb = numb.Replace(",", "");
                                        long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                        double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtParent.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                        string decimalPart = string.Empty;
                                        //Formatting the decimal portion
                                        decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                        //Converting the number into words
                                        //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                        string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 170, 500, 100),
                                                                ContentAlignment.MiddleLeft, noInWords);
                                        newPdfPage.Add(pta1);
                                    }
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle102
        public void ReportStyle102(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                PdfTable myPdfTable1 = null;
                double posX = 20;
                double posY = 20;
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    PdfPage newPdfPage1 = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        //dt.Rows[rowIndex].Delete();
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    //Child
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;

                    //branch widths if any


                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put ..
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {

                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }
                                //dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                            }

                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Total";
                        bcolWidths[colNo - 1] = bcolWidths[colNo - 1] + 5;
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);

                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            posY = 20;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        newPdfPage1.Add(newPdfTablePage1);
                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 52;  //49.5; //36;
                            currentYPos = 52; //49.5; // 36;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 520;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 52; //49.5;//36;
                            currentYPos = 52; //49.5; //36;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        newPdfPage1.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 374;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        posY = 374;
                        double posPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            //PdfTextArea pta = new PdfTextArea(FontBold,
                                            //                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, 380, 200, 50),
                                            //                        ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            //newPdfPage.Add(pta);
                                            //newPdfPage1.Add(pta);
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 376;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 500, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                }
                                            }
                                            posPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 400, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                case "PayTo Info":
                                    {
                                        //To display (Pay To Info ) along with check number added on 271009
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX, 195, 500, 50),
                                                                        ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX, 740, 500, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                            newPdfPage1.Add(pta2);
                                        }
                                        break;
                                    }

                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 200, 200, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        newPdfPage1.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 740, 200, 50),
                                                               ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        newPdfPage1.Add(pta2);
                                        //Check number to display before amount in words[Tamper Proof Area] added on 28/10/09
                                        PdfTextArea pta3 = new PdfTextArea(FontBold,
                                                              Color.Black, new PdfArea(myPdfDocument, 276.5, 267.03, 200, 50),
                                                              ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta3);
                                        newPdfPage1.Add(pta3);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 400, 351, 100, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = "$" + star;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 534, 351, 100, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < 36; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, 303, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    newPdfPage1.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle103
        public void ReportStyle103(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                PdfTable myPdfTable1 = null;
                posX = 20;
                posY = 39;//Added 1/8th inch to ycoord by Danny on 23/09/09
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                posY = 20 + 12;
                currentYPos = 20;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    newPdfPage = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        //dt.Rows[rowIndex].Delete();
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    //Set Child DataTable
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;
                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put .. Added on 041109
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {

                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }

                                //dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                            }
                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Amount";
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);

                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                            {
                                currentYPos = 290;
                            }
                            posY = 305;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 555;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    //Parent
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        posY = 23;
                        double posyPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string m_PayOrder = string.Empty;
                                            m_PayOrder = dtNew.Rows[0][dcol].ToString();
                                            PdfTextArea ptaPayTo = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 505, posY + 39, 600, 50),
                                                                    ContentAlignment.MiddleLeft, m_PayOrder);
                                            newPdfPage.Add(ptaPayTo);
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 95;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {

                                                    PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 600, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta);
                                                }
                                            }
                                            posyPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        //To display (Pay To Info ) along with check number added on 271009
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 428, 500, 50),
                                                                ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe1);
                                            PdfTextArea ptaPayToDupe3 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 700, 500, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe3);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            //double addPosY = posY + 95;
                                            double addPosY = posyPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 600, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 30, 50),
                                                             ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 30, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 90, posY + 3, 30, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 236, 30, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 498, 30, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);

                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = star.Trim().ToString();
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 110, posY + 39, 20, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = string.Empty;
                                            decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < strLength; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, posY + 41, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle104
        public void ReportStyle104(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                PdfTable myPdfTable1 = null;
                posX = 20;
                posY = 39;//Added 1/8th inch to ycoord by Danny on 23/09/09
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                posY = 20 + 12;
                currentYPos = 20;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    newPdfPage = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        //dt.Rows[rowIndex].Delete();
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;
                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put .. Added on 041109
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {

                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }
                                //dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                            }
                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Amount";
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);

                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                            {
                                currentYPos = 290;
                            }
                            posY = 305;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 555;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    //Parent
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        posY = 23;
                        double posPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            //Updated on 031109,051109
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 115.65; //126;

                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                     Color.Black, new PdfArea(myPdfDocument, 90, addPosY, 200, 50),
                                                                     ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                            posPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 428, 500, 100),
                                                                        ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 700, 490, 100),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            //Updated on 031109,051109
                                            double addPosY = posPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, 90, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 500, 100),
                                                             ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 490, 100),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            //updated on 031109,051109 y=112.5 108 103.5
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 378, 92.15, 100, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = "$" + star.Trim().ToString();
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 504, 92.15, 30, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < strLength; i++)
                                            {
                                                str += "*";
                                            }
                                            string noInWords = decimalNo;
                                            //updated on 031109,051109 - old value posy 112.5,94.5
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 85.5, 92.15, 500, 50),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle105
        public void ReportStyle105(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(21.6, 27.9));
                PdfTable myPdfTable1 = null;
                double posX = 20;
                double posY = 20;
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    PdfPage newPdfPage1 = myPdfDocument.NewPage();
                    PdfPage newPdfPage2 = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    //Child
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;
                    //branch widths if any
                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put ..
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {
                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }
                            }
                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Total";
                        bcolWidths[colNo - 1] = bcolWidths[colNo - 1] + 5;
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);
                    //
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            newPdfPage1.Add(pr);
                                            newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            posY = 20;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        posY = 24;
                        posY = 9;
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        newPdfPage1.Add(newPdfTablePage1);
                        newPdfPage2.Add(newPdfTablePage1);
                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            newPdfPage1.Add(pr);
                                            newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 52;  //49.5; //36;
                            currentYPos = 52; //49.5; // 36;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 520;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 52; //49.5;//36;
                            currentYPos = 52; //49.5; //36;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        newPdfPage1.Add(newPdfTablePage2);
                        newPdfPage2.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 374;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        double posYPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 367;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, 59.5, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                    newPdfPage2.Add(pta1);
                                                }
                                            }
                                            posYPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posYPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, 59.5, addPosY, 400, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                    newPdfPage2.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX, 160, 500, 50),
                                                                        ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            newPdfPage2.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX, 720, 500, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                            newPdfPage1.Add(pta2);
                                            newPdfPage2.Add(pta2);
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 160, 200, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        newPdfPage1.Add(pta1);
                                        newPdfPage2.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 720, 200, 50),
                                                               ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        newPdfPage1.Add(pta2);
                                        newPdfPage2.Add(pta2);
                                        //Check number to display before amount in words[Tamper Proof Area] added on 28/10/09
                                        PdfTextArea pta3 = new PdfTextArea(FontBold,
                                                              Color.Black, new PdfArea(myPdfDocument, 408, 255, 200, 50),
                                                              ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta3);
                                        newPdfPage1.Add(pta3);
                                        newPdfPage2.Add(pta3);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 375, 290, 50, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            newPdfPage2.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = "$" + star;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 505, 290, 100, 100),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            newPdfPage2.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt64(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();

                                            string decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < 36; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 55, 322, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            newPdfPage2.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    newPdfPage1.SaveToDocument();
                    newPdfPage2.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle106
        public void ReportStyle106(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(21.6, 27.9));
                PdfTable myPdfTable1 = null;
                double posX = 20;
                double posY = 20;
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    //PdfPage newPdfPage1 = myPdfDocument.NewPage();
                    //PdfPage newPdfPage2 = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    //Child
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;
                    //branch widths if any
                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put ..
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {
                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }
                            }
                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Total";
                        bcolWidths[colNo - 1] = bcolWidths[colNo - 1] + 5;
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);
                    //
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            //newPdfPage1.Add(pr);
                                            //newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //newPdfPage1.SaveToDocument();
                            //newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                            //newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            posY = 20;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                            //newPdfPage2 = myPdfDocument.NewPage();
                        }
                        posY = 24;
                        posY = 15;
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        //newPdfPage1.Add(newPdfTablePage1);
                        //newPdfPage2.Add(newPdfTablePage1);
                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            //newPdfPage1.Add(pr);
                                            //newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 52;  //49.5; //36;
                            currentYPos = 52; //49.5; // 36;
                            newPdfPage.SaveToDocument();
                            //newPdfPage1.SaveToDocument();
                            //newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                            //newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 530;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 52; //49.5;//36;
                            currentYPos = 52; //49.5; //36;
                            newPdfPage.SaveToDocument();
                            //newPdfPage1.SaveToDocument();
                            //newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                            //newPdfPage2 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        //newPdfPage1.Add(newPdfTablePage2);
                        //newPdfPage2.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 374;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //newPdfPage1.SaveToDocument();
                            //newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            //newPdfPage1 = myPdfDocument.NewPage();
                            //newPdfPage2 = myPdfDocument.NewPage();
                        }
                        double posPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 372;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, 49, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                            posPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, 49, addPosY, 400, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX, 160, 500, 50),
                                                                        ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            //newPdfPage1.Add(pta1);
                                            //newPdfPage2.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX, 720, 500, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                            //newPdfPage1.Add(pta2);
                                            //newPdfPage2.Add(pta2);
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 160, 200, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        //newPdfPage1.Add(pta1);
                                        //newPdfPage2.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 720, 200, 50),
                                                               ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        //newPdfPage1.Add(pta2);
                                        //newPdfPage2.Add(pta2);
                                        //Check number to display before amount in words[Tamper Proof Area] added on 28/10/09
                                        PdfTextArea pta3 = new PdfTextArea(FontBold,
                                                              Color.Black, new PdfArea(myPdfDocument, 270, 255, 200, 50),
                                                              ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta3);
                                        //newPdfPage1.Add(pta3);
                                        //newPdfPage2.Add(pta3);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 402, 355, 50, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            //newPdfPage1.Add(pta);
                                            //newPdfPage2.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = "$" + star;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 530, 355, 100, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            //newPdfPage1.Add(pta);
                                            //newPdfPage2.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt64(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < 36; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, 305, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                            //newPdfPage1.Add(pta1);
                                            //newPdfPage2.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    //newPdfPage1.SaveToDocument();
                    //newPdfPage2.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region ReportStyle107
        /// <summary>
        /// This report is similar to 103 expect it is prints3 copies
        /// Adde on 19-02-2010 
        /// </summary>
        public void ReportStyle107(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            string parentTrxID = string.Empty;
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                PdfTable myPdfTable1 = null;
                posX = 20;
                posY = 39;//Added 1/8th inch to ycoord by Danny on 23/09/09
                width = myPdfDocument.PageWidth - 50;
                height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                posY = 20 + 12;
                currentYPos = 20;
                for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                {
                    newPdfPage = myPdfDocument.NewPage();
                    PdfPage newPdfPage1 = myPdfDocument.NewPage();
                    PdfPage newPdfPage2 = myPdfDocument.NewPage();

                    posY = 24;
                    currentYPos = 20;
                    //Creating Data table containing the column names
                    DataTable pDT = new DataTable();
                    DataTable dtNew = new DataTable();
                    DataRow[] foundRows = null;
                    Hashtable htGrandTotals = new Hashtable();
                    foundRows = dt.Select("TrxID ='" + dt.Rows[dtCnt][0].ToString() + "'");
                    if (foundRows.Length > 0)
                    {
                        int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                        DataRow dt2Row = dtNew.NewRow();
                        if (dtNew.Columns.Count == 0)
                        {
                            for (int x = 0; x < dt.Columns.Count; x++)
                            {
                                dtNew.Columns.Add(dt.Columns[x].ColumnName);
                            }
                        }
                        for (int i = 0; i < dtNew.Columns.Count; i++)
                        {
                            dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                        }
                        dtNew.Rows.Add(dt2Row);
                        //dt.Rows[rowIndex].Delete();
                        parentTrxID = dt.Rows[dtCnt][0].ToString();
                        dtNew.AcceptChanges();
                        dtNew.TableName = dt.TableName;
                    }
                    //Set Child DataTable
                    int childRows = 0;
                    int childCols = 0;
                    decimal amount;
                    string childTrxID = string.Empty;
                    int childRowIndex = 0;
                    string strCustom = string.Empty;
                    string strTotalAmount = string.Empty;
                    double TotalAmount = 0;
                    DataRow[] drChildRow = dtChild.Select(dtNew.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                    DataTable dtFullChild = new DataTable();
                    int[] childIndexes = new int[drChildRow.Length];
                    if (drChildRow.Length > 0)
                    {
                        for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                        {
                            childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                            DataRow dtChRow = dtFullChild.NewRow();
                            if (dtFullChild.Columns.Count == 0)
                            {
                                for (int x = 0; x < dtChild.Columns.Count; x++)
                                {
                                    dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                //if the column width more than fullview length put .. Added on 041109
                                string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                int columnWidth = bcolWidths[i];
                                //Skip column widths for trxid and parent trxid
                                if (i >= 2)
                                {
                                    if (currentData.Length >= columnWidth)
                                    {

                                        dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                    }
                                    else
                                    {
                                        dtChRow[i] = currentData;
                                    }
                                }
                                else
                                {
                                    dtChRow[i] = currentData;
                                }

                                //dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                            }
                            string[] grandFormats = (string[])htbPFormats[childRowIndex];
                            foreach (string val in grandFormats)
                            {
                                string[] strvalues = val.Split('~');
                                string strformat = string.Empty;
                                if (strvalues.Length > 1)
                                {
                                    strformat = strvalues[0];
                                }
                                else
                                {
                                    strformat = strvalues[0];
                                }
                                switch (strformat)
                                {
                                    case "RAlign":
                                        {
                                            if (strvalues.Length > 2)
                                            {
                                                strCustom = string.Empty;
                                                TotalAmount = 0;
                                                string amt = string.Empty;
                                                int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                if (!htGrandTotals.ContainsKey(colName))
                                                {
                                                    Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals.Add(colName, amt);
                                                }
                                                else
                                                {
                                                    TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                    if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                    {
                                                        TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                    }
                                                    strTotalAmount = Convert.ToString(TotalAmount);
                                                    Decimal.TryParse(strTotalAmount, out amount);
                                                    amt = string.Format("{0:N}", amount);
                                                    htGrandTotals[colName] = amt;
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                            //
                            dtFullChild.Rows.Add(dtChRow);
                            //
                            childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                            dtChild.Rows[childRowIndex].Delete();
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                            //
                            dtFullChild.AcceptChanges();
                            dtFullChild.TableName = dtChild.TableName;
                        }
                    }
                    //
                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                    if (htGrandTotals.Keys.Count > 0)
                    {
                        dtFullChild.Rows.Add(dtFullChild.NewRow());
                    }
                    while (enumTot.MoveNext())
                    {
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        int colNo = dtFullChild.Columns[enumTot.Key.ToString()].Ordinal;
                        dtFullChild.Rows[dtFullChild.Rows.Count - 1][colNo - 1] = "Check Amount";
                    }
                    //
                    childRows = dtFullChild.Rows.Count;
                    childCols = dtFullChild.Columns.Count;
                    //
                    myPdfTable1 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable1.ImportDataTable(dtFullChild);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable1.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable1.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable1.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable1.SetColumnsWidth(bcolWidths);

                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable1.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable1.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            newPdfPage1.Add(pr);
                                            newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable1.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable1.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable1.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                            {
                                currentYPos = 290;
                            }
                            posY = 305;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 290;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();

                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage1);
                        newPdfPage1.Add(newPdfTablePage1);
                        newPdfPage2.Add(newPdfTablePage1);

                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, childRows, childCols, 1);
                    myPdfTable2.ImportDataTable(dtFullChild);
                    myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable2.Columns[0].SetColors(Color.White, Color.White);
                    myPdfTable2.Columns[1].SetColors(Color.White, Color.White);
                    myPdfTable2.HeadersRow[0].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.HeadersRow[1].SetColors(Color.Gainsboro, Color.Gainsboro);
                    myPdfTable2.SetColumnsWidth(bcolWidths);
                    for (int i = 0; i < childIndexes.Length; i++)
                    {
                        string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable2.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable2.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable2.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                            newPdfPage1.Add(pr);
                                            newPdfPage2.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "TrxID":
                                    {
                                        foreach (PdfCell pcll in myPdfTable2.HeadersRow.Cells)
                                        {
                                            if (pcll.Content.ToString() == strformat)
                                            {
                                                pcll.SetBackgroundColor(Color.Gainsboro);
                                                pcll.SetForegroundColor(Color.Gainsboro);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable2.Cell(i, Convert.ToInt32(strvalues[1].ToString())).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable2.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //To Apply font for check total
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable2.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(dtFullChild.Columns.Count - 1)).SetFont(SumRowFont);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    while (!myPdfTable2.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 555;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        newPdfPage1.Add(newPdfTablePage2);
                        newPdfPage2.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                    }
                    //Parent
                    if (dtNew.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            newPdfPage2.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                            newPdfPage2 = myPdfDocument.NewPage();
                        }
                        posY = 23;
                        double posyPayTo = 0;
                        foreach (DataColumn dcol in dtNew.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string m_PayOrder = string.Empty;
                                            m_PayOrder = dtNew.Rows[0][dcol].ToString();
                                            PdfTextArea ptaPayTo = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 505, posY + 39, 600, 50),
                                                                    ContentAlignment.MiddleLeft, m_PayOrder);
                                            newPdfPage.Add(ptaPayTo);
                                            newPdfPage1.Add(ptaPayTo);
                                            newPdfPage2.Add(ptaPayTo);
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 95;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {

                                                    PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 600, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta);
                                                    newPdfPage1.Add(pta);
                                                    newPdfPage2.Add(pta);
                                                }
                                            }
                                            posyPayTo = addPosY;
                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        //To display (Pay To Info ) along with check number added on 271009
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 428, 500, 50),
                                                                ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe1);
                                            newPdfPage1.Add(ptaPayToDupe1);
                                            newPdfPage2.Add(ptaPayToDupe1);
                                            PdfTextArea ptaPayToDupe3 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 700, 500, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe3);
                                            newPdfPage1.Add(ptaPayToDupe3);
                                            newPdfPage2.Add(ptaPayToDupe3);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = dtNew.Rows[0][dcol].ToString().Split('~');
                                            //double addPosY = posY + 95;
                                            double addPosY = posyPayTo;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 600, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                    newPdfPage2.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 30, 50),
                                                             ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        newPdfPage1.Add(pta1);
                                        newPdfPage2.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 30, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        newPdfPage1.Add(pta2);
                                        newPdfPage2.Add(pta2);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 90, posY + 3, 30, 50),
                                                                    ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            newPdfPage2.Add(pta);
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 236, 30, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            newPdfPage2.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 498, 30, 50),
                                                                   ContentAlignment.MiddleLeft, dtNew.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                            newPdfPage1.Add(pta2);
                                            newPdfPage2.Add(pta2);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (dtNew.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (dtNew.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(dtNew.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            star = star.Trim().ToString();
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 110, posY + 39, 20, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            newPdfPage2.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = dtNew.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = dtNew.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            numb = numb.Replace(",", "");
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(dtNew.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            decimalPortion = decimalPortion * 100;
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = string.Empty;
                                            decimalNo = strWholeNo + decimalPart + "  DOLLARS";
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < strLength; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, posY + 41, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            newPdfPage2.Add(pta1);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    newPdfPage1.SaveToDocument();
                    newPdfPage2.SaveToDocument();
                }
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion



        #region ReportStyle 501
        public void ReportStyle501(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                string imgpath = PDFImagePath();
                int[] chldColWidths = new int[bcolWidths.Length - 2];
                for (int wdts = 0; wdts < bcolWidths.Length - 2; wdts++)
                {
                    chldColWidths[wdts] = bcolWidths[wdts + 2];
                }
                //
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                string parentTrxID = string.Empty;
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 200;
                }
                Font FontRegular = new Font("Verdana", 6, FontStyle.Regular);
                //Parent DataTable
                if (dt.Rows.Count > 0)
                {
                    DataTable pDT = new DataTable();
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    //
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable parentDT = new DataTable();
                        Hashtable htGrandTotals = new Hashtable();
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            DataColumn colNames = new DataColumn();
                            colNames.ColumnName = dt.Columns[col].ColumnName;
                            colNames.DataType = dt.Columns[col].DataType;
                            parentDT.Columns.Add(colNames);
                        }
                        DataRow dNewRow = parentDT.NewRow();
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            if (dt.Columns[col].ColumnName == "Payment Terms")
                            {
                                if (!parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                                {
                                    parentDT.Columns.Add(dt.Columns[col].ColumnName);
                                    parentDT.Columns[dt.Columns[col].ColumnName].SetOrdinal(col);
                                }
                            }
                            dNewRow[dt.Columns[col].ColumnName] = dt.Rows[dtCnt][dt.Columns[col].ColumnName];
                        }
                        parentDT.Rows.Add(dNewRow);
                        parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                        //Removing TrxID column
                        if (parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Remove("TrxID");
                        }
                        pDT = reportsBO.PivotTable(parentDT);
                        pDT = parentDT;
                        DataTable dtNew = new DataTable();
                        int colCnts = pDT.Columns.Count;
                        for (int cols = 0; cols < (colCnts * 2); cols++)
                        {
                            DataColumn dc = new DataColumn();
                            dtNew.Columns.Add("Column" + cols);
                        }
                        DataRow dnRow = dtNew.NewRow();
                        for (int kl = 0; kl < dtNew.Columns.Count; kl++)
                        {
                            if (kl == 0)
                            {
                                dnRow[kl] = pDT.Columns[0].ColumnName;
                            }
                            else
                            {
                                if (kl % 2 == 0)
                                {
                                    dnRow[kl] = pDT.Columns[kl / 2].ColumnName;
                                }
                                else
                                {
                                    if (kl > pDT.Columns.Count)
                                    {
                                        dnRow[kl] = pDT.Rows[0][kl / 2].ToString();
                                    }
                                    else
                                    {
                                        dnRow[kl] = pDT.Rows[0][0].ToString();
                                    }
                                }
                            }
                        }
                        dtNew.Rows.Add(dnRow);
                        int rowsInTab = dtNew.Rows.Count;
                        int colsInTab;
                        colsInTab = dtNew.Columns.Count;
                        int[] Arraywidth = new int[colsInTab];
                        //Setting columns width based on the No of columns
                        for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                        {
                            Arraywidth[colCnt] = 40;
                        }
                        PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                        myPdfTable.ImportDataTable(dtNew);
                        //myPdfTable.HeadersRow.SetFont(GridHeaderFont);
                        myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                        myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        for (int columns = 0; columns < myPdfTable.Cells.Count; columns++)
                        {
                            if (columns % 2 == 0)
                            {
                                myPdfTable.Columns[columns].SetFont(HeaderFont);
                                myPdfTable.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTable.SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            else
                            {
                                myPdfTable.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                            }
                        }
                        while (!myPdfTable.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos + 10;
                            }
                            if (myPdfDocument.PageHeight - posY < 200)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }
                        if (dtChild.Rows.Count > 0)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    int widthdiff = 0;
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                        //if the column width more than fullview length put ..
                                        /* string currentData = drChildRow[drFoundRws].ItemArray[i].ToString();
                                         int columnWidth = bcolWidths[i];
                                         //Skip column widths for trxid and parent trxid
                                         if (i >= 2)
                                         {
                                             if (Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5) > Convert.ToInt32(bcolWidths[i]))
                                             {
                                                 bcolWidths[i] = Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5);
                                                 chldColWidths[widthdiff] = Convert.ToInt32(dtFullChild.Columns[i].ToString().Length + 5);
                                             }
                                             if (currentData.Length > columnWidth)
                                             {
                                                  dtChRow[i] = currentData.Remove(columnWidth - 3) + "...";
                                                 //dtChRow[i] = currentData.Remove((columnWidth / 2) - 2) + "..";
                                             }
                                             else
                                             {
                                                 dtChRow[i] = currentData;
                                             }
                                             widthdiff++;
                                         }
                                         else
                                         {
                                             dtChRow[i] = currentData;
                                         }*/
                                    }
                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    childTrxID = dtChild.Rows[0]["TrxID"].ToString();
                                    dtChild.Rows[childRowIndex].Delete();
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                    //
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                }
                            }
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }
                            if (dtFullChild.Columns.Contains("TrxID"))
                            {
                                dtFullChild.Columns.Remove("TrxID");
                            }
                            if (dtFullChild.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                            {
                                dtFullChild.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                            }
                            int rowsIndtChild = dtFullChild.Rows.Count;
                            int colsIndtChild = dtFullChild.Columns.Count;
                            if (dtFullChild.Rows.Count > 0)
                            {
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsIndtChild, colsIndtChild, 1);
                                Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                myPdfTable1.ImportDataTable(dtFullChild);
                                myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.SetColumnsWidth(chldColWidths);
                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfTable.Rows[Convert.ToInt32(childIndexes[i].ToString())].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(childIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfTable1.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable1.Rows[dtFullChild.Rows.Count - 1].SetFont(SumRowFont1);
                                                    }
                                                    else
                                                    {
                                                        myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                }
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70; //60;
                                        currentYPos = 70; //60;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 10;
                                    }
                                    if (myPdfDocument.PageHeight - posY < 200)
                                    {
                                        posY = 70;// 60;
                                        currentYPos = 70;// 60;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                    }
                }
                dtChild.Rows[dtChild.Rows.Count - 1]["Description"] = "Grand Totals";
                if (dtChild.Columns.Contains("TrxID"))
                {
                    dtChild.Columns.Remove("TrxID");
                }
                if (dtChild.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                {
                    dtChild.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                }
                //
                PdfTable myPdfGrand = myPdfDocument.NewTable(FontRegular, dtChild.Rows.Count, dtChild.Columns.Count, 1);
                myPdfGrand.ImportDataTable(dtChild);
                myPdfGrand.HeadersRow.SetFont(HeaderPageTitleFont2);
                myPdfGrand.SetBorders(Color.Black, 1, BorderType.None);
                myPdfGrand.HeadersRow.SetBackgroundColor(Color.White);
                myPdfGrand.HeadersRow.SetForegroundColor(Color.White);
                myPdfGrand.SetColumnsWidth(chldColWidths);
                foreach (PdfCell pcell in myPdfGrand.Rows[0].Cells)
                {
                    if (!string.IsNullOrEmpty(pcell.Content.ToString()))
                    {
                        pcell.SetContentAlignment(ContentAlignment.MiddleRight);
                        pcell.SetFont(SumRowFont1);
                    }
                }
                while (!myPdfGrand.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    else
                    {
                        posY = currentYPos + 10;
                    }
                    if (myPdfDocument.PageHeight - posY < 200)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    PdfTablePage newPdfTablePage2 = myPdfGrand.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage2);
                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                }
                //
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
            }
        }
        #endregion

        #region ReportStyle 502
        public void ReportStyle502(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                string parentTrxID = string.Empty;
                //Set Branch column widths.. here skiping Parent and Child TrxIDs
                int[] chldColWidths = new int[bcolWidths.Length - 2];
                for (int wdts = 0; wdts < bcolWidths.Length - 2; wdts++)
                {
                    chldColWidths[wdts] = bcolWidths[wdts + 2];
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                //Set PDF Format
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 200;
                }
                int colsInTab = 0;
                //
                DataTable dtFullChild = new DataTable();
                //Parent Table 
                if (dt.Rows.Count > 0)
                {
                    DataTable pDT = new DataTable();
                    //Get Header PDF Table
                    newPdfPage = GetHeaderPDFTable(dtHeader, out myHeaderPdfTablePage);
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }
                    DataTable parentDT = new DataTable();

                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            DataColumn colNames = new DataColumn();
                            colNames.ColumnName = dt.Columns[col].ColumnName;
                            colNames.DataType = dt.Columns[col].DataType;
                            parentDT.Columns.Add(colNames);
                        }
                        if (dt.Rows.Count > 0)
                        {
                            parentTrxID = dt.Rows[0]["TrxID"].ToString();
                            DataTable dtParentHeader = new DataTable();
                            for (int cols = 0; cols < ((dt.Columns.Count) * 2); cols++)
                            {
                                DataColumn dc = new DataColumn();
                                dtParentHeader.Columns.Add("Column" + cols);
                            }
                            DataRow drPntHeaRw = dtParentHeader.NewRow();
                            for (int rw = 0; rw < dtParentHeader.Columns.Count; rw++)
                            {
                                if (rw == 0)
                                {
                                    drPntHeaRw[rw] = dt.Columns[0].ColumnName + ":";
                                }
                                else
                                {
                                    if (rw % 2 == 0)
                                    {
                                        drPntHeaRw[rw] = dt.Columns[rw / 2].ColumnName + ":";
                                    }
                                    else
                                    {
                                        if (rw > dt.Columns.Count)
                                        {
                                            drPntHeaRw[rw] = null;
                                        }
                                        else
                                        {
                                            drPntHeaRw[rw] = null;
                                        }
                                    }
                                }
                            }
                            dtParentHeader.Rows.Add(drPntHeaRw);
                            if (dtParentHeader.Rows[0][0].ToString() == "TrxID:")
                            {
                                dtParentHeader.Columns.Remove("Column0");
                                dtParentHeader.Columns.Remove("Column1");
                            }
                            int rowsInTab = dtParentHeader.Rows.Count;
                            colsInTab = dtParentHeader.Columns.Count;
                            int[] Arraywidth = new int[colsInTab];
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                Arraywidth[colCnt] = 30;
                            }

                            //Set Parent Header Table
                            PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                            myPdfTable.ImportDataTable(dtParentHeader);
                            myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                            myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                            for (int columns = 0; columns < myPdfTable.Cells.Count; columns++)
                            {
                                if (columns % 2 == 0)
                                {
                                    myPdfTable.Columns[columns].SetFont(GridHeaderFont);
                                    myPdfTable.Columns[columns].SetWidth(dtParentHeader.Rows[0][columns].ToString().Length + 2);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleCenter);
                                }
                                else
                                {
                                    myPdfTable.Columns[columns].SetWidth(dtParentHeader.Rows[0][columns].ToString().Length + 2);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                }
                            }
                            while (!myPdfTable.AllTablePagesCreated)
                            {
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos - 10;
                                }
                                if (myPdfDocument.PageHeight - posY < 200)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                                newPdfPage.Add(newPdfTablePage);
                                currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                            }

                            //Copy dtChild Table to dtFullChild Table

                            dtFullChild = dtChild.Copy();
                            dtFullChild.TableName = dtChild.TableName;
                            //
                            if (dtChild.Rows.Count > 0)
                            {
                                int colsInTab2 = dtChild.Columns.Count;
                                //Delete all the rows in dtChild Table
                                for (int rws = 0; rws <= dtChild.Rows.Count; rws++)
                                {
                                    if (dtChild.Rows.Count > 0)
                                    {
                                        dtChild.Rows[rws].Delete();
                                        rws--;
                                    }
                                }
                                // Add Empty rows in dtChild Table
                                DataRow drChildEmptyRow = dtChild.NewRow();
                                for (int colCnt = 0; colCnt < colsInTab2; colCnt++)
                                {
                                    drChildEmptyRow[colCnt] = "EMPTY";
                                }
                                dtChild.Rows.Add(drChildEmptyRow);

                                //Remove Parent and Child TrxIDS in dtChild
                                if (dtChild.Columns.Contains("TrxID"))
                                {
                                    dtChild.Columns.Remove("TrxID");
                                }
                                if (dtChild.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                                {
                                    dtChild.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                                }
                                int rowsInTab2 = dtChild.Rows.Count;

                                //Add dtChild table to pdfTable
                                PdfTable myPdfChildHeader = myPdfDocument.NewTable(FontRegular, rowsInTab2, dtChild.Columns.Count, 1);
                                myPdfChildHeader.ImportDataTable(dtChild);
                                myPdfChildHeader.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfChildHeader.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChildHeader.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChildHeader.SetColumnsWidth(chldColWidths);
                                foreach (PdfCell childPcell in myPdfChildHeader.Cells)
                                {
                                    if (childPcell.Content.ToString().Contains("EMPTY"))
                                    {
                                        childPcell.SetBackgroundColor(Color.White);
                                        childPcell.SetForegroundColor(Color.White);
                                    }
                                }
                                //Set Alignment of Headers 
                                for (int i = 0; i < dtFullChild.Rows.Count; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[i];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    myPdfChildHeader.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    break;
                                                }
                                        }
                                    }
                                }

                                while (!myPdfChildHeader.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 60;
                                        currentYPos = 60;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 5;
                                    }
                                    if (myPdfDocument.PageHeight - posY < 200)
                                    {
                                        posY = 60;
                                        currentYPos = 60;
                                        newPdfPage.SaveToDocument();
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage = myPdfChildHeader.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, myPdfDocument.PageWidth - 50, height));
                                    newPdfPage.Add(newPdfTablePage);
                                    currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                    //
                                    Point pStart = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 575), Convert.ToInt32(posY + 20));
                                    Point pEnd = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 20));
                                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                    newPdfPage.Add(pdfLineBrk);
                                }
                            }
                        }
                        break;
                    }

                    //Looping each Parent datatable
                    foreach (DataRow dRow in dt.Rows)
                    {
                        string m_VendorName = string.Empty;
                        //Adding each row at a time
                        DataRow dNewRow = parentDT.NewRow();
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            if (dt.Columns[col].ColumnName == "Payment Terms")
                            {
                                if (!parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                                {
                                    parentDT.Columns.Add(dt.Columns[col].ColumnName);
                                    parentDT.Columns[dt.Columns[col].ColumnName].SetOrdinal(col);
                                }
                            }
                            if (parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                            {
                                dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                            }
                        }
                        parentDT.Rows.Add(dNewRow);
                        parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                        if (parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Remove("TrxID");
                        }
                        pDT = parentDT;
                        DataTable dtNew = new DataTable();
                        int colCnts = pDT.Columns.Count;
                        for (int cols = 0; cols < (colCnts * 2); cols++)
                        {
                            DataColumn dc = new DataColumn();
                            dtNew.Columns.Add("Column" + cols);
                        }
                        DataRow dnRow = dtNew.NewRow();
                        for (int kl = 0; kl < dtNew.Columns.Count; kl++)
                        {
                            if (kl == 0)
                            {
                                dnRow[kl] = pDT.Rows[0][0].ToString();
                            }
                            else
                            {
                                if (kl % 2 == 0)
                                {
                                    dnRow[kl] = pDT.Rows[0][kl / 2].ToString();
                                }
                                else
                                {
                                    if (kl > pDT.Columns.Count)
                                    {
                                        dnRow[kl] = null;
                                    }
                                    else
                                    {
                                        dnRow[kl] = null;
                                    }
                                }
                            }
                        }
                        dtNew.Rows.Add(dnRow);
                        int rowsInTab1 = dtNew.Rows.Count;
                        int colsInTab1 = dtNew.Columns.Count;
                        int[] Arraywidth1 = new int[colsInTab1];
                        //Setting columns width based on the No of columns
                        for (int colCnt = 0; colCnt < colsInTab1; colCnt++)
                        {
                            Arraywidth1[colCnt] = 60;
                        }
                        m_VendorName = dtNew.Rows[0][0].ToString();
                        //Add Parent DataTable Row 
                        PdfTable myPdfTableVal = myPdfDocument.NewTable(FontRegular, rowsInTab1, colsInTab1, 1);
                        myPdfTableVal.ImportDataTable(dtNew);
                        myPdfTableVal.HeadersRow.SetFont(GridHeaderFont);
                        myPdfTableVal.HeadersRow.SetForegroundColor(Color.White);
                        myPdfTableVal.SetBorders(Color.Black, 1, BorderType.None);
                        for (int columns = 0; columns < myPdfTableVal.Cells.Count; columns++)
                        {
                            if (columns % 2 == 0)
                            {
                                myPdfTableVal.Columns[columns].SetFont(GridHeaderFont);
                                myPdfTableVal.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            else
                            {
                                myPdfTableVal.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleLeft);
                            }
                        }
                        while (!myPdfTableVal.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos;
                            }
                            if (myPdfDocument.PageHeight - posY < 200)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }
                        if (dtFullChild.Rows.Count > 0)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            //Filter child rows based on parent trxid
                            DataRow[] drChildRow = dtFullChild.Select(dt.TableName.Trim().ToString() + "_TrxID='" + parentTrxID + "'");
                            DataTable dtNewTable = new DataTable();
                            Hashtable htGrandTotals = new Hashtable();
                            //Delete Purpose
                            int[] childIndexes = new int[drChildRow.Length];
                            int childFormat = 0;

                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtFullChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtNewTable.NewRow();
                                    if (dtNewTable.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtFullChild.Columns.Count; x++)
                                        {
                                            dtNewTable.Columns.Add(dtFullChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtNewTable.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }
                                    //Calculating Total amount of each selected row
                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 2)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtNewTable.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                            default:
                                                {
                                                    break;
                                                }
                                        }
                                    }
                                    //
                                    dtNewTable.Rows.Add(dtChRow);
                                    childTrxID = dtFullChild.Rows[0]["TrxID"].ToString();
                                    //dtFullChild.Rows[childRowIndex].Delete();
                                    //if (childIndexes[0] != 0)
                                    //{
                                    //    childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    //}
                                    //else
                                    //{
                                    //    childIndexes[drFoundRws] = childRowIndex;
                                    //}


                                    childIndexes[drFoundRws] = childRowIndex;


                                    dtNewTable.AcceptChanges();
                                    dtNewTable.TableName = dtChild.TableName;
                                }
                            }

                            //Adding Total row for each child dataTables
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtNewTable.Rows.Add(dtNewTable.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtNewTable.Rows[dtNewTable.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }
                            //Remove child and parent TrxID
                            if (dtNewTable.Columns.Contains("TrxID"))
                            {
                                dtNewTable.Columns.Remove("TrxID");
                            }
                            if (dtNewTable.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                            {
                                dtNewTable.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                            }
                            int rowsInBranchDT = 0;
                            int colsInBranchDT = dtNewTable.Columns.Count;
                            int[] BranchArraywidth = new int[colsInBranchDT];

                            if (!string.IsNullOrEmpty(Convert.ToString(dtNewTable.Rows[dtNewTable.Rows.Count - 1][0])))
                            {
                                DataRow drBranch = dtNewTable.NewRow();
                                dtNewTable.Rows.Add(drBranch);
                            }
                            rowsInBranchDT = dtNewTable.Rows.Count;
                            dtNewTable.Rows[dtNewTable.Rows.Count - 1][0] = "Total";

                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                            myPdfTable1.ImportDataTable(dtNewTable);
                            myPdfTable1.HeadersRow.SetFont(FontRegular);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(chldColWidths);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetForegroundColor(Color.White);
                            myPdfTable1.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);

                            //Formaing the childDataTable values in PDF
                            for (int i = 0; i < childIndexes.Length; i++)
                            {
                                string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                foreach (string val in arrformats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "pFont":
                                            {
                                                myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(SumRowFont);
                                                break;
                                            }
                                        case "pUnderLine":
                                            {
                                                myPdfTable1.Rows[Convert.ToInt32(childIndexes[i].ToString())].SetFont(FontUnderline);
                                                break;
                                            }
                                        case "pBox":
                                            {
                                                for (int clCnt = 1; clCnt < myPdfTable.Rows[Convert.ToInt32(childIndexes[i].ToString())].Cells.Count; clCnt++)
                                                {
                                                    PdfTablePage newPdfTablePage = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    PdfRectangle pr = newPdfTablePage.CellArea(Convert.ToInt32(childIndexes[i].ToString()), clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                                break;
                                            }
                                        case "pLnSkip":
                                            {
                                                foreach (PdfCell pcll in myPdfTable1.Rows[i].Cells)
                                                {
                                                    if (pcll.Content.ToString() == "SKIP")
                                                    {
                                                        pcll.SetBackgroundColor(Color.White);
                                                        pcll.SetForegroundColor(Color.White);
                                                    }
                                                }
                                                break;
                                            }
                                        case "RAlign":
                                            {
                                                if (strvalues.Length > 2)
                                                {
                                                    myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Rows[dtNewTable.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Rows[dtNewTable.Rows.Count - 1].SetFont(SumRowFont1);
                                                }
                                                else
                                                {
                                                    myPdfTable1.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                                break;
                                            }
                                    }
                                }
                            }

                            foreach (PdfCell pcl in myPdfTable1.Rows[dtNewTable.Rows.Count - 1].Cells)
                            {
                                if (pcl.Content.ToString().Trim().ToUpper().Contains("TOTAL"))
                                {
                                    pcl.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pcl.SetFont(SumRowFont1);
                                    break;
                                }
                            }

                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);

                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos - 10;
                                }
                                if (myPdfDocument.PageHeight - posY < 200)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                        if (pDT.Columns.Count > 1)
                        {
                            pDT.Columns.RemoveAt(1);
                        }
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }

                //Final GrandTotals
                DataTable dtTotals = new DataTable();
                if (dtTotals.Columns.Count == 0)
                {
                    for (int x = 0; x < dtFullChild.Columns.Count; x++)
                    {
                        dtTotals.Columns.Add(dtFullChild.Columns[x].ColumnName);
                    }
                }
                // Import Final grand total values from dtFullChild Table

                DataRow dtRow = dtFullChild.Rows[dtFullChild.Rows.Count - 1];

                dtTotals.ImportRow(dtRow);

                dtTotals.AcceptChanges();

                dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[2].ColumnName.ToString()] = "Grand Totals";

                if (dtTotals.Columns.Contains("TrxID"))
                {
                    dtTotals.Columns.Remove("TrxID");
                }
                if (dtTotals.Columns.Contains(dt.TableName.Trim().ToString() + "_TrxID"))
                {
                    dtTotals.Columns.Remove(dt.TableName.Trim().ToString() + "_TrxID");
                }

                int[] chldGtWidths = new int[chldColWidths.Length];

                for (int j = 0; j < chldColWidths.Length; j++)
                {
                    chldGtWidths[j] = 60;
                }
                //Add dtTotals dataTable to PDF
                PdfTable myPdfGrand = myPdfDocument.NewTable(FontRegular, dtTotals.Rows.Count, dtTotals.Columns.Count, 1);
                myPdfGrand.ImportDataTable(dtTotals);
                myPdfGrand.HeadersRow.SetFont(HeaderPageTitleFont2);
                myPdfGrand.SetContentAlignment(ContentAlignment.MiddleLeft);
                myPdfGrand.SetBorders(Color.Black, 1, BorderType.None);
                myPdfGrand.HeadersRow.SetBackgroundColor(Color.White);
                myPdfGrand.HeadersRow.SetForegroundColor(Color.White);
                myPdfGrand.SetColumnsWidth(chldGtWidths);
                foreach (PdfCell pcell in myPdfGrand.Rows[0].Cells)
                {
                    if (!string.IsNullOrEmpty(pcell.Content.ToString()))
                    {
                        if (pcell.Content.ToString() != "Grand Totals")
                        {
                            pcell.SetContentAlignment(ContentAlignment.MiddleRight);
                            pcell.SetFont(SumRowFont1);
                        }
                    }
                }
                while (!myPdfGrand.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    else
                    {
                        posY = currentYPos + 10;
                    }
                    if (myPdfDocument.PageHeight - posY < 200)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    PdfTablePage newPdfTablePage2 = myPdfGrand.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage2);
                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    //
                    double xPos = newPdfTablePage2.CellArea(myPdfGrand.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = newPdfTablePage2.CellArea(myPdfGrand.HeadersRow.Index, 0).TopLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos - 1));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos - 1));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    Point pStart1 = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 10));
                    Point pEnd1 = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 10));
                    PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk1);
                    //
                    Point pStart2 = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 15));
                    Point pEnd2 = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 15));
                    PdfLine pdfLineBrk2 = new PdfLine(myPdfDocument, pStart2, pEnd2, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk2);
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
            }
        }
        #endregion


        #region ReportStyle 510
        public void ReportStyle510(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, string fileName)
        {
            try
            {
                double posY = 0;
                double totPosY = 410;
                //
                myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(21.6, 27.9));
                string parentTrxID = string.Empty;
                string parentTableName = string.Empty;
                Font HeaderFont = new Font("Verdana", 7, FontStyle.Regular);
                Font ColumnsFont = new Font("Verdana", 8, FontStyle.Regular);
                Font BoldFont = new Font("Verdana", 9, FontStyle.Bold);
                //
                if (dt != null)
                {
                    newPdfPage = myPdfDocument.NewPage();
                    for (int rw = 0; rw < dt.Rows.Count; rw++)
                    {
                        parentTrxID = dt.Rows[rw]["TrxID"].ToString();
                        parentTableName = dt.TableName.ToString();
                        //
                        if (dt.Rows.Count > 0)
                        {
                            if (dtChild != null)
                            {
                                //DataRow[] drFiltered = null;
                                //drFiltered = dtChild.Select(parentTableName + "_TrxID='" + parentTrxID + "'");
                                if (dtChild.Rows.Count > 0)
                                {
                                    for (int filRws = 0; filRws < dtChild.Rows.Count; filRws++)
                                    {
                                        if (filRws % 2 != 0)
                                        {
                                            posY = totPosY;
                                        }
                                        else
                                        {
                                            posY = 0;
                                        }
                                        int pos = filRws + 1;
                                        if (pos != 1)
                                        {
                                            if ((pos % 2) == 1)
                                            {
                                                newPdfPage.SaveToDocument();
                                                newPdfPage = myPdfDocument.NewPage();
                                            }
                                        }
                                        #region Parent
                                        foreach (DataColumn dcs in dt.Columns)
                                        {
                                            switch (dcs.ColumnName.ToString())
                                            {
                                                case "FederalTaxID":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 135, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Company":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(BoldFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 25, 230, 50),
                                                                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Address1":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 35, 230, 50),
                                                                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Address2":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 45, 230, 50),
                                                                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                //case "Address3":
                                                //    {
                                                //        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                //        {
                                                //            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                //                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 50, 230, 50),
                                                //                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                //            newPdfPage.Add(pTxtArea);
                                                //        }
                                                //        break;
                                                //    }
                                                //case "Address4":
                                                //    {
                                                //        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                //        {
                                                //            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                //                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 60, 230, 50),
                                                //                                ContentAlignment.MiddleLeft, dt.Rows[0][dcs.ColumnName].ToString());
                                                //            newPdfPage.Add(pTxtArea);
                                                //        }
                                                //        break;
                                                //    }
                                                case "City":
                                                    {
                                                        string totString = string.Empty;
                                                        bool chkCity = false;
                                                        bool chkRegion = false;
                                                        bool chkPostal = false;
                                                        //
                                                        if (dt.Rows[0][dcs.ColumnName] != null && dt.Rows[0][dcs.ColumnName].ToString() != "")
                                                        {
                                                            chkCity = true;
                                                        }
                                                        if (dt.Rows[0]["Region"] != null && dt.Rows[0]["Region"].ToString() != "")
                                                        {
                                                            chkRegion = true;
                                                        }
                                                        if (dt.Rows[0]["PostalCode"] != null && dt.Rows[0]["PostalCode"].ToString() != "")
                                                        {
                                                            chkPostal = true;
                                                        }
                                                        if ((bool)chkCity)
                                                        {
                                                            totString = totString + dt.Rows[0][dcs.ColumnName].ToString() + ", ";
                                                        }
                                                        if ((bool)chkRegion)
                                                        {
                                                            totString = totString + dt.Rows[0]["Region"].ToString() + "  ";
                                                        }
                                                        if ((bool)chkPostal)
                                                        {
                                                            totString = totString + dt.Rows[0]["PostalCode"].ToString() + " ";
                                                        }
                                                        if (totString.Contains(","))
                                                        {
                                                            totString = totString.Remove(totString.Length - 1);
                                                        }
                                                        PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 55, 230, 50),
                                                                                ContentAlignment.MiddleLeft, totString);
                                                        newPdfPage.Add(pTxtArea);
                                                        break;
                                                    }
                                                case "VoidCopy":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            if (dt.Rows[0][dcs.ColumnName].ToString() != "0")
                                                            {
                                                                PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                    Color.Black, new PdfArea(myPdfDocument, 170, posY - 13, 25, 50),
                                                                                    ContentAlignment.MiddleLeft, "X");
                                                                newPdfPage.Add(pTxtArea);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                case "CorrectedCopy":
                                                    {
                                                        if (!string.IsNullOrEmpty(dt.Rows[0][dcs.ColumnName].ToString()))
                                                        {
                                                            if (dt.Rows[0][dcs.ColumnName].ToString() != "0")
                                                            {
                                                                PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                    Color.Black, new PdfArea(myPdfDocument, 230, posY - 13, 25, 50),
                                                                                    ContentAlignment.MiddleLeft, "X");
                                                                newPdfPage.Add(pTxtArea);
                                                            }
                                                        }
                                                        break;
                                                    }
                                            }
                                        }
                                        #endregion
                                        #region Child
                                        foreach (DataColumn fildcs in dtChild.Columns)
                                        {
                                            switch (fildcs.ColumnName.ToString())
                                            {
                                                case "DBAName":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            string[] strarr = dtChild.Rows[filRws][fildcs.ColumnName].ToString().Split('~');
                                                            double addPosY = 160 + posY;
                                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                                            {
                                                                addPosY += 10;
                                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                                {
                                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\r", "");
                                                                    strarr[arrLgh] = strarr[arrLgh].ToString().Replace("\n", "");

                                                                    PdfTextArea pTxtArea = new PdfTextArea(BoldFont,
                                                                                 Color.Black, new PdfArea(myPdfDocument, 40, addPosY, 230, 50),
                                                                                 ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                    newPdfPage.Add(pTxtArea);
                                                                }
                                                            }
                                                        }
                                                        break;
                                                    }
                                                case "Address1":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(HeaderFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 217, 230, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Address2":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(HeaderFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 224, 230, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Address3":
                                                    {
                                                        bool chkAdd3 = false;
                                                        bool chkAdd4 = false;
                                                        string totString = string.Empty;
                                                        //
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            chkAdd3 = true;
                                                        }
                                                        if (dtChild.Rows[filRws]["Address4"] != null && dtChild.Rows[filRws]["Address4"].ToString() != "")
                                                        {
                                                            chkAdd4 = true;
                                                        }
                                                        if ((bool)chkAdd3)
                                                        {
                                                            totString = totString + dtChild.Rows[filRws][fildcs.ColumnName].ToString() + ", ";
                                                        }
                                                        if ((bool)chkAdd4)
                                                        {
                                                            totString = totString + dtChild.Rows[filRws]["Address4"].ToString() + " ";
                                                        }
                                                        if (totString.Contains(","))
                                                        {
                                                            totString = totString.Remove(totString.Length - 1);
                                                        }
                                                        PdfTextArea pTxtArea = new PdfTextArea(HeaderFont,
                                                                            Color.Black, new PdfArea(myPdfDocument, 40, posY + 231, 230, 50),
                                                                            ContentAlignment.MiddleLeft, totString);
                                                        newPdfPage.Add(pTxtArea);
                                                        break;
                                                    }
                                                case "City":
                                                    {
                                                        string totString = string.Empty;
                                                        bool chkCity = false;
                                                        bool chkRegion = false;
                                                        bool chkPostal = false;
                                                        //
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            chkCity = true;
                                                        }
                                                        if (dtChild.Rows[filRws]["Region"] != null && dtChild.Rows[filRws]["Region"].ToString() != "")
                                                        {
                                                            chkRegion = true;
                                                        }
                                                        if (dtChild.Rows[filRws]["PostalCode"] != null && dtChild.Rows[filRws]["PostalCode"].ToString() != "")
                                                        {
                                                            chkPostal = true;
                                                        }
                                                        if ((bool)chkCity)
                                                        {
                                                            totString = totString + dtChild.Rows[filRws][fildcs.ColumnName].ToString() + ", ";
                                                        }
                                                        if ((bool)chkRegion)
                                                        {
                                                            totString = totString + dtChild.Rows[filRws]["Region"].ToString() + ", ";
                                                        }
                                                        if ((bool)chkPostal)
                                                        {
                                                            totString = totString + dtChild.Rows[filRws]["PostalCode"].ToString() + " ";
                                                        }
                                                        if (totString.Contains(","))
                                                        {
                                                            totString = totString.Remove(totString.Length - 1);
                                                        }
                                                        PdfTextArea pTxtArea = new PdfTextArea(HeaderFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 254, 230, 50),
                                                                                ContentAlignment.MiddleLeft, totString);
                                                        newPdfPage.Add(pTxtArea);
                                                        break;
                                                    }
                                                case "SSNTaxID":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 162, posY + 135, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box1":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 23, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box2":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 58, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box3":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 93, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box4":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 93, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box5":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 138, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box6":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 138, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box7":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 185, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box8":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 183, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box9":
                                                    {
                                                        //if (!string.IsNullOrEmpty(dtChild.Rows[filRws][fildcs.ColumnName].ToString()))
                                                        //{
                                                        //    PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                        //                        Color.Black, new PdfArea(myPdfDocument, 40, posY + 190, 50, 50),
                                                        //                        ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                        //    newPdfPage.Add(pTxtArea);
                                                        //}
                                                        break;
                                                    }
                                                case "Box10":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 218, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box11":
                                                    {
                                                        if (!string.IsNullOrEmpty(dtChild.Rows[filRws][fildcs.ColumnName].ToString()))
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 253, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box12":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 253, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box13":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 288, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box14":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 288, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box15A":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 40, posY + 323, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box15B":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 168, posY + 323, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box16":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 301, posY + 323, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box17":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 400, posY + 323, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                                case "Box18":
                                                    {
                                                        if (dtChild.Rows[filRws][fildcs.ColumnName] != null && dtChild.Rows[filRws][fildcs.ColumnName].ToString() != "")
                                                        {
                                                            PdfTextArea pTxtArea = new PdfTextArea(ColumnsFont,
                                                                                Color.Black, new PdfArea(myPdfDocument, 499, posY + 323, 50, 50),
                                                                                ContentAlignment.MiddleLeft, dtChild.Rows[filRws][fildcs.ColumnName].ToString());
                                                            newPdfPage.Add(pTxtArea);
                                                        }
                                                        break;
                                                    }
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }

                        }
                    }
                    newPdfPage.SaveToDocument();
                    CreatePDFDocument(fileName);
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
            }
        }
        #endregion

        #region Report Style 601
        public void ReportStyle601(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, Hashtable htColNameValues, string fileName)
        {
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                //For header headings
                DataTable dtHeaderNew = new DataTable();
                //Remove TrxID width 
                int[] ColForWidths = new int[colWidths.Length - 1];
                int colCount = 1;
                for (int wdts = 0; wdts < colWidths.Length - 1; wdts++)
                {
                    ColForWidths[wdts] = colWidths[colCount];
                    colCount++;
                }
                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                    // Header table
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dtHeaderNew.Columns.Add(dt.Columns[col].ToString());
                    }
                    // ADD EMPTY SKIP LINE FOR HEADER
                    dtHeaderNew.Rows.Add(dtHeaderNew.NewRow());
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dtHeaderNew.Rows[dtHeaderNew.Rows.Count - 1][dtHeaderNew.Columns[col].ToString()] = "SKIP";
                    }
                    //Remove TrxID from dtHeaderNew
                    if (dtHeaderNew.Columns.Contains("TrxID"))
                    {
                        dtHeaderNew.Columns.Remove("TrxID");
                    }
                    int hederRows = dtHeaderNew.Rows.Count;
                    int headerCols = dtHeaderNew.Columns.Count;
                    //
                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, hederRows, headerCols, 1);
                    //Set Header DataTable
                    myPdfTable1.ImportDataTable(dtHeaderNew);
                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                    //Set TrxID Column color white
                    myPdfTable1.Columns[0].SetBackgroundColor(Color.White);
                    myPdfTable1.Columns[0].SetForegroundColor(Color.White);
                    //myPdfTable1.HeadersRow.SetFont(HeaderFont);
                    myPdfTable1.HeadersRow.SetFont(GridHeaderFont);
                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                    //myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                    myPdfTable1.SetColumnsWidth(ColForWidths);
                    //Rename header titles
                    for (int i = 0; i < myPdfTable1.HeadersRow.Cells.Count; i++)
                    {
                        switch (myPdfTable1.HeadersRow[i].Content.ToString())
                        {
                            case "Account":
                                {
                                    myPdfTable1.HeadersRow[i].SetContent("Account Listing");
                                    myPdfTable1.HeadersRow[i].ColSpan = 2;
                                    myPdfTable1.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleLeft);
                                    break;
                                }
                            case "TBDB":
                                {
                                    myPdfTable1.HeadersRow[i].SetContent("Trial Balance      ");
                                    myPdfTable1.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable1.HeadersRow[i].ColSpan = 2;
                                    break;
                                }
                            case "PLDB":
                                {
                                    myPdfTable1.HeadersRow[i].SetContent("Income Statement   ");
                                    myPdfTable1.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable1.HeadersRow[i].ColSpan = 2;
                                    break;
                                }
                            case "BSDB":
                                {
                                    myPdfTable1.HeadersRow[i].SetContent("Balance Sheet      ");
                                    myPdfTable1.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable1.HeadersRow[i].ColSpan = 2;
                                    break;
                                }
                            default:
                                {
                                    myPdfTable1.HeadersRow[i].SetColors(Color.White, Color.White);
                                    break;
                                }
                        }
                    }
                    //Remove Header SKIP Line
                    for (int i = 0; i < dtHeaderNew.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfTable1.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    //Paging Header
                    string imgpath = PDFImagePath();
                    PdfImage LogoImage = null;
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }

                    //
                    posY = currentYPos + 25;
                    currentYPos = posY;
                    //
                    PdfTablePage myPdfTable1Page = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfTable1Page);
                    //
                    double xPos = myPdfTable1Page.CellArea(myPdfTable1.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = myPdfTable1Page.CellArea(myPdfTable1.HeadersRow.Index, 0).TopLeftVertex.Y;

                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    //To Store Skip line row indexs
                    ArrayList alSkiplines = new ArrayList();
                    if (dt.Rows.Count > 0)
                    {
                        //ADD EMPTY SKIP START UP
                        DataRow drStart = dt.NewRow();
                        //ADD EMPTY  SKIP BEFORE TOTAL
                        DataRow drTotal = dt.NewRow();

                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            drStart[col] = "SKIP";
                            drTotal[col] = "SKIP";
                        }

                        dt.Rows.InsertAt(drStart, 0);
                        if (!alSkiplines.Contains(0))
                        {
                            alSkiplines.Add(0);
                        }
                        dt.Rows.InsertAt(drTotal, dt.Rows.Count - 2);
                        if (!alSkiplines.Contains(dt.Rows.Count - 2))
                        {
                            alSkiplines.Add(dt.Rows.Count - 2);
                        }
                        //ADDING TOTAL TEXT TO LAST ROW
                        if (dt.Rows[dt.Rows.Count - 1][1].ToString() == string.Empty)
                        {
                            dt.Rows[dt.Rows.Count - 1][1] = "Total";
                        }
                        //ADD EMPTY  SKIP BEFORE NET PROFIT LOSS
                        dt.Rows.Add(dt.NewRow());
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            //dNewRow[dt.Columns[col].ColumnName] = "SKIP";
                            dt.Rows[dt.Rows.Count - 1][dt.Columns[col].ToString()] = "SKIP";
                            if (!alSkiplines.Contains(dt.Rows.Count - 1))
                            {
                                alSkiplines.Add(dt.Rows.Count - 1);
                            }
                        }
                        //CALCULATION FOR  NET PROFIT OR LOSS
                        if (dt.Rows[dt.Rows.Count - 2][1].ToString() == "Total")
                        {
                            decimal prevamount = 0;
                            decimal finalamount = 0;
                            //ADD NEW ROW
                            dt.Rows.Add(dt.NewRow());
                            //ADD Profit/Loss
                            if (dt.Rows[dt.Rows.Count - 1][1].ToString() == string.Empty)
                            {
                                dt.Rows[dt.Rows.Count - 1][1] = "Net Profit/Loss";
                            }
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                if ((dt.Rows[dt.Rows.Count - 3][col].ToString() != string.Empty) && (dt.Rows[dt.Rows.Count - 3][col].ToString() != "Total"))
                                {
                                    decimal currentamount;

                                    Decimal.TryParse(dt.Rows[dt.Rows.Count - 3][col].ToString(), out currentamount);
                                    if (prevamount == 0)
                                    {
                                        prevamount = currentamount;
                                    }
                                    else
                                    {
                                        //Compare previous and current amount and insert the value in data table 
                                        if (prevamount > currentamount)
                                        {
                                            finalamount = prevamount - currentamount;
                                            string amt = string.Format("{0:N}", finalamount);
                                            prevamount = 0;
                                            dt.Rows[dt.Rows.Count - 1][col] = amt;
                                        }
                                        else if (currentamount > prevamount)
                                        {  //current amount is greater than previous 
                                            finalamount = currentamount - prevamount;
                                            string amt = string.Format("{0:N}", finalamount);
                                            prevamount = 0;
                                            dt.Rows[dt.Rows.Count - 1][col - 1] = amt;
                                        }
                                        else
                                        {
                                            //current amount and previous amount both are equal
                                            prevamount = 0;
                                        }
                                    }
                                }
                            }
                        }
                        //ADD EMPTY  SKIP BEFORE NET PROFIT LOSS
                        dt.Rows.Add(dt.NewRow());
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            //dNewRow[dt.Columns[col].ColumnName] = "SKIP";
                            dt.Rows[dt.Rows.Count - 1][dt.Columns[col].ToString()] = "SKIP";
                            if (!alSkiplines.Contains(dt.Rows.Count - 1))
                            {
                                alSkiplines.Add(dt.Rows.Count - 1);
                            }
                        }
                        //GRAND TOTALS (TOTAL + Profit/Loss)
                        if (dt.Rows[dt.Rows.Count - 2][1].ToString() == "Net Profit/Loss")
                        {
                            //ADD new row
                            dt.Rows.Add(dt.NewRow());
                            //ADD Grand Total
                            if (dt.Rows[dt.Rows.Count - 1][1].ToString() == string.Empty)
                            {
                                dt.Rows[dt.Rows.Count - 1][1] = "Grand Total";
                            }
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                if ((dt.Rows[dt.Rows.Count - 5][col].ToString() != string.Empty) && (dt.Rows[dt.Rows.Count - 5][col].ToString() != "Total"))
                                {
                                    decimal profitamount = 0;
                                    if (dt.Rows[dt.Rows.Count - 3][col].ToString() != string.Empty)
                                    {
                                        Decimal.TryParse(dt.Rows[dt.Rows.Count - 3][col].ToString(), out profitamount);
                                    }
                                    decimal totalamount = 0;
                                    if (dt.Rows[dt.Rows.Count - 5][col].ToString() != string.Empty)
                                    {
                                        Decimal.TryParse(dt.Rows[dt.Rows.Count - 5][col].ToString(), out totalamount);
                                    }
                                    decimal grandtotal = 0;
                                    //ADDING TOTAL + PROFIT/LOSS
                                    grandtotal = profitamount + totalamount;
                                    string amt = string.Format("{0:N}", grandtotal);
                                    if (grandtotal != 0)
                                    {
                                        dt.Rows[dt.Rows.Count - 1][col] = amt;
                                    }
                                }
                            }
                        }
                    }

                    //Remove TrxID from dtHeaderNew
                    if (dt.Columns.Contains("TrxID"))
                    {
                        dt.Columns.Remove("TrxID");
                    }

                    int rows = dt.Rows.Count;
                    int cols = dt.Columns.Count;
                    myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                    //Set Parent DataTable
                    myPdfTable.ImportDataTable(dt);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    //Set TrxID Column color white
                    myPdfTable.HeadersRow.SetFont(GridHeaderFont);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetColumnsWidth(ColForWidths);
                    //Hide headings 1 and 2
                    myPdfTable.HeadersRow[0].SetForegroundColor(Color.White);
                    myPdfTable.HeadersRow[1].SetForegroundColor(Color.White);
                    for (int i = 0; i < myPdfTable.HeadersRow.Cells.Count; i++)
                    {
                        string labelName = myPdfTable.HeadersRow[i].Content.ToString();
                        string captionName = htColNameValues[myPdfTable.HeadersRow[i].Content.ToString()].ToString();
                        switch (labelName)
                        {
                            case "TBDB":
                            case "TBCR":
                            case "PLDB":
                            case "PLCR":
                            case "BSDB":
                            case "BSCR":
                                {
                                    myPdfTable.HeadersRow[i].SetContent(captionName);
                                    myPdfTable.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                        }
                    }
                    //Set Parent Formats
                    for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                    {
                        string[] arrformats = (string[])htPFormatModes[i];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.Rows[i].Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        myPdfTable.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        if (strvalues.Length > 2)
                                        {
                                            //only last row sum Grand Total
                                            myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont1);
                                            myPdfTable.Cell(dt.Rows.Count - 1, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);


                                            //Net profit/Loss 
                                            if (dt.Rows[dt.Rows.Count - 3][0].ToString() == "Net Profit/Loss")
                                            {
                                                //myPdfTable.HeadersRow.MergeCells();
                                                myPdfTable.Rows[dt.Rows.Count - 3][0].ColSpan = 2;

                                                //SET SUM ROW FONT
                                                myPdfTable.Rows[dt.Rows.Count - 3].SetFont(SumRowFont1);
                                                myPdfTable.Rows[dt.Rows.Count - 3].SetBackgroundColor(Color.Gainsboro);
                                                myPdfTable.Cell(dt.Rows.Count - 3, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                            //Total
                                            if (dt.Rows[dt.Rows.Count - 5][0].ToString() == "Total")
                                            {
                                                myPdfTable.Rows[dt.Rows.Count - 5].SetFont(SumRowFont1);
                                                myPdfTable.Cell(dt.Rows.Count - 5, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        break;
                                    }
                                default:
                                    break;
                            }
                        }
                    }
                    //Removing SKIP LINES FROM TOTAL AND GRAND TOTALS
                    for (int l = 0; l < alSkiplines.Count; l++)
                    {
                        foreach (PdfCell pcll in myPdfTable.Rows[Convert.ToInt32(alSkiplines[l])].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    //Paging for parent datatable
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            //
                            posY = currentYPos + 25;
                            currentYPos = posY + 7 + ((myPdfTable1Page.Area.PosY - posY) / 2);
                            posY = currentYPos;
                            newPdfPage.Add(myPdfTable1Page);
                            newPdfPage.Add(pdfLineBrk);
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            if (posY >= currentYPos)
                            {
                                currentYPos = posY + 5 + (myPdfTable1Page.Area.PosY - posY) / 2;
                                posY = currentYPos;
                            }
                            else
                            {
                                posY = currentYPos;
                            }
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            //
                            posY = currentYPos + 25;
                            currentYPos = posY + 7 + ((myPdfTable1Page.Area.PosY - posY) / 2);
                            posY = currentYPos;
                            newPdfPage.Add(myPdfTable1Page);
                            newPdfPage.Add(pdfLineBrk);
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 602
        public void ReportStyle602(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, Hashtable htColNameValues, string fileName)
        {
            try
            {
                int[] formatWidths = new int[colWidths.Length - 1];
                int[] colForWidths = new int[formatWidths.Length - 1];
                int totalWidth = 0;
                for (int i = 0; i < formatWidths.Length; i++)
                {
                    formatWidths[i] = colWidths[i + 1];
                    totalWidth = totalWidth + colWidths[i + 1];
                }
                for (int Widths = 0; Widths < colForWidths.Length; Widths++)
                {
                    switch (Widths.ToString())
                    {
                        case "0":
                        case "1":
                        case "2":
                            {
                                colForWidths[Widths] = formatWidths[Widths];
                                break;
                            }
                        case "4":
                            {
                                colForWidths[4] = formatWidths[5];
                                break;
                            }
                        case "3":
                            {
                                colForWidths[3] = formatWidths[3] + formatWidths[3];
                                break;
                            }
                    }
                }
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                if (dt.Rows.Count > 0)
                {
                    newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                    DataTable dtHeaderFormatted = new DataTable();
                    dtHeaderFormatted.Columns.Add("Account Listing");
                    dtHeaderFormatted.Columns.Add("SKIP");
                    dtHeaderFormatted.Columns.Add("Beginning Balance");
                    dtHeaderFormatted.Columns.Add("Activity");
                    dtHeaderFormatted.Columns.Add("Ending Balance");
                    //
                    totalWidth = totalWidth / 5;
                    dtHeaderFormatted.Rows.Add(dtHeaderFormatted.NewRow());
                    for (int col = 0; col < dtHeaderFormatted.Columns.Count; col++)
                    {
                        dtHeaderFormatted.Rows[dtHeaderFormatted.Rows.Count - 1][dtHeaderFormatted.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(FontRegular, dtHeaderFormatted.Rows.Count, dtHeaderFormatted.Columns.Count, 1);
                    myPdfTableHeaderFormat.ImportDataTable(dtHeaderFormatted);
                    myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTableHeaderFormat.SetColumnsWidth(colForWidths);
                    myPdfTableHeaderFormat.HeadersRow.SetFont(HeaderFont);
                    for (int i = 0; i < dtHeaderFormatted.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfTableHeaderFormat.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    for (int i = 0; i < myPdfTableHeaderFormat.HeadersRow.Cells.Count; i++)
                    {
                        switch (myPdfTableHeaderFormat.HeadersRow[i].Content.ToString())
                        {
                            case "Beginning Balance":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                            case "Activity":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleCenter);
                                    break;
                                }
                            case "Ending Balance":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                            case "SKIP":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetForegroundColor(Color.White);
                                    myPdfTableHeaderFormat.HeadersRow[i].SetBackgroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY;
                    //
                    PdfTablePage myPdfTableHeaderFormatPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfTableHeaderFormatPage);
                    //
                    double xPos = myPdfTableHeaderFormatPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = myPdfTableHeaderFormatPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    if (dt.Rows.Count > 0)
                    {
                        dt.Columns.Remove("TrxID");
                        //ADDING TOTAL TEXT TO LAST ROW
                        DataRow dr = dt.NewRow();
                        DataRow drStart = dt.NewRow();
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            dr[col] = "SKIP";
                            drStart[col] = "SKIP";
                        }
                        dt.Rows.InsertAt(dr, dt.Rows.Count - 2);
                        dt.Rows.InsertAt(drStart, 0);
                        if (dt.Rows[dt.Rows.Count - 1][0].ToString() == string.Empty)
                        {
                            dt.Rows[dt.Rows.Count - 1][0] = "Total";
                        }
                        //CALCULATION FOR  NET PROFIT OR LOSS
                        if (dt.Rows[dt.Rows.Count - 1][0].ToString() == "Total")
                        {
                            decimal prevamount = 0;
                            decimal finalamount = 0;
                            //ADD NEW ROW
                            DataRow dr1 = dt.NewRow();
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                dr1[col] = "SKIP";
                            }
                            dt.Rows.InsertAt(dr1, dt.Rows.Count);
                            dt.Rows.Add(dt.NewRow());
                            //ADD Profit/Loss
                            if (dt.Rows[dt.Rows.Count - 1][0].ToString() == string.Empty || dt.Rows[dt.Rows.Count - 1][0] == "SKIP")
                            {
                                dt.Rows[dt.Rows.Count - 1][0] = "Net Profit/Loss";
                            }
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                if ((dt.Rows[dt.Rows.Count - 3][col].ToString() != string.Empty) && (dt.Rows[dt.Rows.Count - 3][col].ToString() != "Total"))
                                {
                                    decimal currentamount;
                                    Decimal.TryParse(dt.Rows[dt.Rows.Count - 3][col].ToString(), out currentamount);
                                    if (prevamount == 0)
                                    {
                                        prevamount = currentamount;
                                    }
                                    else
                                    {
                                        //Compare previous and current amount and insert the value in data table 
                                        if (prevamount > currentamount)
                                        {
                                            finalamount = prevamount - currentamount;
                                            string amt = string.Format("{0:N}", finalamount);
                                            prevamount = 0;
                                            dt.Rows[dt.Rows.Count - 1][col] = amt;
                                        }
                                        else if (currentamount > prevamount)
                                        {  //current amount is greater than previous 
                                            finalamount = currentamount - prevamount;
                                            string amt = string.Format("{0:N}", finalamount);
                                            prevamount = 0;
                                            dt.Rows[dt.Rows.Count - 1][col - 1] = amt;
                                        }
                                        else
                                        {
                                            //current amount and previous amount both are equal
                                            prevamount = 0;
                                        }
                                    }
                                }
                            }
                        }
                        //GRAND TOTALS (TOTAL + Profit/Loss)
                        if (dt.Rows[dt.Rows.Count - 1][1].ToString() == "Net Profit/Loss")
                        {
                            //ADD new row
                            dt.Rows.Add(dt.NewRow());
                            //ADD Grand Total
                            if (dt.Rows[dt.Rows.Count - 1][0].ToString() == string.Empty)
                            {
                                dt.Rows[dt.Rows.Count - 1][0] = "Grand Total";
                            }
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                if ((dt.Rows[dt.Rows.Count - 3][col].ToString() != string.Empty) && (dt.Rows[dt.Rows.Count - 2][col].ToString() != "Total"))
                                {
                                    decimal profitamount = 0;
                                    if (dt.Rows[dt.Rows.Count - 2][col].ToString() != string.Empty)
                                    {
                                        Decimal.TryParse(dt.Rows[dt.Rows.Count - 2][col].ToString(), out profitamount);
                                    }
                                    decimal totalamount = 0;
                                    if (dt.Rows[dt.Rows.Count - 3][col].ToString() != string.Empty)
                                    {
                                        Decimal.TryParse(dt.Rows[dt.Rows.Count - 3][col].ToString(), out totalamount);
                                    }
                                    decimal grandtotal = 0;
                                    //ADDING TOTAL + PROFIT/LOSS
                                    grandtotal = profitamount + totalamount;
                                    if (grandtotal != 0)
                                    {
                                        dt.Rows[dt.Rows.Count - 1][col] = grandtotal;
                                    }
                                }
                            }
                        }
                    }
                    int rows = dt.Rows.Count;
                    int cols = dt.Columns.Count;
                    myPdfTable = myPdfDocument.NewTable(FontRegular, rows, cols, 1);
                    //Set Parent DataTable
                    myPdfTable.ImportDataTable(dt);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    for (int i = 0; i < myPdfTable.HeadersRow.Cells.Count; i++)
                    {
                        string labelName = myPdfTable.HeadersRow[i].Content.ToString();
                        switch (labelName)
                        {
                            case "debits":
                            case "credits":
                                {
                                    myPdfTable.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.HeadersRow[i].SetContent(htColNameValues[labelName].ToString());
                                    break;
                                }
                            default:
                                {
                                    myPdfTable.HeadersRow[i].SetForegroundColor(Color.White);
                                    myPdfTable.HeadersRow[i].SetBackgroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    for (int rwCnt = 0; rwCnt < dt.Rows.Count; rwCnt++)
                    {
                        switch (myPdfTable.Cell(rwCnt, 0).Content.ToString())
                        {
                            case "Total":
                                {
                                    myPdfTable.Rows[rwCnt].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Rows[rwCnt].SetFont(SumRowFont);
                                    myPdfTable.Cell(rwCnt, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    break;
                                }
                            case "Net Profit/Loss":
                                {
                                    myPdfTable.Rows[rwCnt].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Rows[rwCnt].SetFont(SumRowFont);
                                    myPdfTable.Rows[rwCnt].SetBackgroundColor(Color.Gainsboro);
                                    myPdfTable.Cell(rwCnt, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    break;
                                }
                            case "SKIP":
                                {
                                    myPdfTable.Rows[rwCnt].SetForegroundColor(Color.White);
                                    myPdfTable.Rows[rwCnt].SetBackgroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    myPdfTable.SetColumnsWidth(formatWidths);
                    //Set Parent Formats
                    for (int i = 0; i < htPFormatModes.Keys.Count; i++)
                    {
                        string[] arrformats = (string[])htPFormatModes[i];
                        foreach (string val in arrformats)
                        {
                            string[] strvalues = val.Split('~');
                            string strformat = string.Empty;
                            if (strvalues.Length > 1)
                            {
                                strformat = strvalues[0];
                            }
                            else
                            {
                                strformat = strvalues[0];
                            }
                            switch (strformat)
                            {
                                case "pFont":
                                    {
                                        myPdfTable.Rows[i].SetFont(SumRowFont);
                                        break;
                                    }
                                case "pUnderLine":
                                    {
                                        myPdfTable.Rows[i].SetFont(FontUnderline);
                                        break;
                                    }
                                case "pBox":
                                    {
                                        for (int clCnt = 1; clCnt < myPdfTable.Rows[i].Cells.Count; clCnt++)
                                        {
                                            PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                            pr.StrokeWidth = 1;
                                            newPdfPage.Add(pr);
                                        }
                                        break;
                                    }
                                case "pLnSkip":
                                    {
                                        foreach (PdfCell pcll in myPdfTable.Rows[i].Cells)
                                        {
                                            if (pcll.Content.ToString() == "SKIP")
                                            {
                                                pcll.SetBackgroundColor(Color.White);
                                                pcll.SetForegroundColor(Color.White);
                                            }
                                        }
                                        break;
                                    }
                                case "RAlign":
                                    {
                                        if (Convert.ToInt32(strvalues[1].ToString()) <= myPdfTable.Columns.Length - 1)
                                        {
                                            myPdfTable.Cell(i, (Convert.ToInt32(strvalues[1].ToString()) - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString())].SetContentAlignment(ContentAlignment.MiddleRight);
                                            if (strvalues.Length > 2)
                                            {
                                                //only last row sum
                                                myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                            }
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(strvalues[1].ToString()) >= myPdfTable.Columns.Length)
                                            {
                                                myPdfTable.Cell(i, (Convert.ToInt32(strvalues[1].ToString()) - 1)).CellContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                if (strvalues.Length > 2)
                                                {
                                                    //only last row sum
                                                    myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                                }
                                            }
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    //
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            //
                            posY = currentYPos + 25;
                            currentYPos = posY + 10 + ((myPdfTableHeaderFormatPage.Area.PosY - posY) / 2);
                            posY = currentYPos;
                            newPdfPage.Add(myPdfTableHeaderFormatPage);
                            newPdfPage.Add(pdfLineBrk);
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            if (posY >= currentYPos)
                            {
                                currentYPos = posY + 10 + (myPdfTableHeaderFormatPage.Area.PosY - posY) / 2;
                                posY = currentYPos;
                            }
                            else
                            {
                                posY = currentYPos;
                            }
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            //
                            posY = currentYPos + 25;
                            currentYPos = posY + 10 + ((myPdfTableHeaderFormatPage.Area.PosY - posY) / 2);
                            posY = currentYPos;
                            newPdfPage.Add(myPdfTableHeaderFormatPage);
                            newPdfPage.Add(pdfLineBrk);
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage2 = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    }
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 603
        public void ReportStyle603(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, Hashtable htParentColNameValues, Hashtable htChildColNameValues, string fileName)
        {
            try
            {
                #region COLUMN WIDTHS
                int[] pdfWidths = new int[bcolWidths.Length - 2];
                for (int wdts = 0; wdts < pdfWidths.Length; wdts++)
                {
                    switch (wdts.ToString())
                    {
                        case "0":
                            {
                                pdfWidths[0] = bcolWidths[1];
                                break;
                            }
                        case "1":
                            {
                                pdfWidths[1] = bcolWidths[2];
                                break;
                            }
                        case "2":
                            {
                                pdfWidths[2] = bcolWidths[3];
                                break;
                            }
                        case "3":
                            {
                                pdfWidths[3] = bcolWidths[4];
                                break;
                            }
                        case "4":
                            {
                                pdfWidths[4] = bcolWidths[5];
                                break;
                            }
                    }
                }
                #endregion
                #region PDF LAYOUT
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                #endregion
                string imgpath = PDFImagePath();
                string totConcatName = string.Empty;
                PdfImage LogoImage = null;
                PdfTablePage myPdfChildHeaderFormattedPage = null;
                Font fontMedium = new Font("Verdana", 8, FontStyle.Bold);
                Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                //
                if (dt.Rows.Count > 0)
                {
                    #region DT HEADER FORMATTED
                    DataTable dtHeaderFormatted = new DataTable();
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtHeaderFormatted.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }
                    dtHeaderFormatted.Rows.Add(dtHeaderFormatted.NewRow());
                    for (int col = 0; col < dtHeaderFormatted.Columns.Count; col++)
                    {
                        dtHeaderFormatted.Rows[dtHeaderFormatted.Rows.Count - 1][dtHeaderFormatted.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(FontRegular, dtHeaderFormatted.Rows.Count, dtHeaderFormatted.Columns.Count, 1);
                    myPdfTableHeaderFormat.ImportDataTable(dtHeaderFormatted);
                    myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                    myPdfTableHeaderFormat.SetColumnsWidth(pdfWidths);
                    myPdfTableHeaderFormat.HeadersRow.SetFont(fontMedium);
                    for (int i = 0; i < dtHeaderFormatted.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfTableHeaderFormat.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    for (int i = 0; i < myPdfTableHeaderFormat.HeadersRow.Cells.Count; i++)
                    {
                        string labelParentNames = myPdfTableHeaderFormat.HeadersRow[i].Content.ToString();
                        switch (labelParentNames)
                        {
                            case "Description":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContent("Account Listing");
                                    myPdfTableHeaderFormat.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleLeft);
                                    break;
                                }
                            case "debits":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContent("Activity");
                                    myPdfTableHeaderFormat.HeadersRow[i].ColSpan = 2;
                                    break;
                                }
                            case "begbal":
                            case "EndBal":
                                {
                                    myPdfTableHeaderFormat.HeadersRow[i].SetContent(htChildColNameValues[labelParentNames].ToString());
                                    myPdfTableHeaderFormat.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                        }
                    }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY;
                    //
                    PdfTablePage myPdfHeaderFormattedPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfHeaderFormattedPage);
                    //
                    double xPos = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.Y;

                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    #endregion
                    #region DTCHILD HEADER
                    if (dtChild != null)
                    {
                        DataTable dtChildHeader = new DataTable();
                        foreach (DataColumn dcl in dtChild.Columns)
                        {
                            switch (dcl.ColumnName)
                            {
                                case "TrxID":
                                case "Link1":
                                    {
                                        break;
                                    }
                                default:
                                    {
                                        dtChildHeader.Columns.Add(dcl.ColumnName);
                                        break;
                                    }
                            }
                        }
                        dtChildHeader.Rows.Add(dtChildHeader.NewRow());
                        for (int col = 0; col < dtChildHeader.Columns.Count; col++)
                        {
                            dtChildHeader.Rows[dtChildHeader.Rows.Count - 1][dtChildHeader.Columns[col].ToString()] = "SKIP";
                        }
                        PdfTable myPdfChildHeaderFormat = myPdfDocument.NewTable(FontRegular, dtChildHeader.Rows.Count, dtChildHeader.Columns.Count, 1);
                        myPdfChildHeaderFormat.ImportDataTable(dtChildHeader);
                        myPdfChildHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfChildHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfChildHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfChildHeaderFormat.SetColumnsWidth(pdfWidths);
                        myPdfChildHeaderFormat.HeadersRow.SetFont(fontMedium);
                        for (int i = 0; i < dtChildHeader.Rows.Count; i++)
                        {
                            foreach (PdfCell pcll in myPdfChildHeaderFormat.Rows[i].Cells)
                            {
                                if (pcll.Content.ToString() == "SKIP")
                                {
                                    pcll.SetBackgroundColor(Color.White);
                                    pcll.SetForegroundColor(Color.White);
                                }
                            }
                        }
                        for (int i = 0; i < myPdfChildHeaderFormat.HeadersRow.Cells.Count; i++)
                        {
                            string labelName = myPdfChildHeaderFormat.HeadersRow[i].Content.ToString();
                            switch (labelName)
                            {
                                case "Description":
                                    {
                                        myPdfChildHeaderFormat.HeadersRow[i].SetForegroundColor(Color.White);
                                        myPdfChildHeaderFormat.HeadersRow[i].SetBackgroundColor(Color.White);
                                        break;
                                    }
                                case "begbal":
                                case "EndBal":
                                    {
                                        myPdfChildHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfChildHeaderFormat.HeadersRow[i].SetForegroundColor(Color.White);
                                        myPdfChildHeaderFormat.HeadersRow[i].SetBackgroundColor(Color.White);
                                        break;
                                    }
                                case "debits":
                                case "credits":
                                    {
                                        myPdfChildHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                        myPdfChildHeaderFormat.HeadersRow[i].SetContent(htChildColNameValues[labelName].ToString());
                                        break;
                                    }
                            }
                        }
                        //
                        currentYPos = posY + 7 + (myPdfHeaderFormattedPage.Area.PosY - posY) / 2; ;
                        posY = currentYPos;
                        //
                        myPdfChildHeaderFormattedPage = myPdfChildHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                        newPdfPage.Add(myPdfChildHeaderFormattedPage);
                        //
                    }
                    #endregion
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        #region DTPARENT
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        //
                        foundRows = dt.Select("Link1 ='" + dt.Rows[dtCnt]["Link1"].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt]["Link1"].ToString();
                            dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        else
                        {
                            //to add sum row
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            dtNew.Columns.Remove("TrxID");
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            dtNew.Columns.Remove("Link1");
                        }
                        if ((!string.IsNullOrEmpty(dtNew.Rows[0]["Account"].ToString()) && (!string.IsNullOrEmpty(dtNew.Rows[0]["Description"].ToString()))))
                        {
                            totConcatName = "Total" + " " + dtNew.Rows[0]["Account"] + " " + "of" + " " + dtNew.Rows[0]["Description"].ToString();
                        }
                        int cols = 0;
                        if (dtNew.Columns.Count < dtHeaderFormatted.Columns.Count)
                        {
                            cols = dtHeaderFormatted.Columns.Count - dtNew.Columns.Count;
                            for (int cls = 0; cls < cols; cls++)
                            {
                                dtNew.Columns.Add("Column" + cls);
                            }
                        }
                        for (int rws = 0; rws < dtNew.Rows.Count; rws++)
                        {
                            if (dtNew.Rows[rws]["Description"] != null)
                            {
                                if (dtNew.Rows[rws]["Account"] != null)
                                {
                                    string appValue = dtNew.Rows[rws]["Account"].ToString();
                                    appValue = appValue + "   " + dtNew.Rows[rws]["Description"].ToString();
                                    dtNew.Rows[rws]["Account"] = appValue;
                                    dtNew.Rows[rws]["Description"] = string.Empty;
                                }
                            }
                        }
                        PdfTable myPdfParent = myPdfDocument.NewTable(FontRegular, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                        myPdfParent.ImportDataTable(dtNew);
                        myPdfParent.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfParent.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfParent.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfParent.SetColumnsWidth(pdfWidths);
                        myPdfParent.HeadersRow.SetFont(fontMedium);
                        myPdfParent.HeadersRow.SetBackgroundColor(Color.White);
                        myPdfParent.HeadersRow.SetForegroundColor(Color.White);
                        while (!myPdfParent.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                //
                                posY = currentYPos + 25;
                                currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfHeaderFormattedPage);
                                newPdfPage.Add(pdfLineBrk);
                                currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                if (posY >= currentYPos)
                                {
                                    currentYPos = posY + 5 + (myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2;
                                    posY = currentYPos;
                                }
                                else
                                {
                                    posY = currentYPos;
                                }
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                //
                                posY = currentYPos + 25;
                                currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfHeaderFormattedPage);
                                newPdfPage.Add(pdfLineBrk);
                                currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage2 = myPdfParent.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                            newPdfPage.Add(newPdfTablePage2);
                            currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        }
                        //
                        #endregion
                        #region DT CHILD
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select("Link1='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    int rowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    string[] grandFormats = (string[])htPFormatModes[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    if (dtChild.Rows[0]["Link1"].ToString() != null)
                                    {
                                        childTrxID = dtChild.Rows[0]["Link1"].ToString();
                                    }
                                    dtChild.Rows[rowIndex].Delete();
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                }
                            }
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }
                            dtFullChild.Rows.Add(dtFullChild.NewRow());
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                double totValue = 0;
                                string strTotValue = string.Empty;
                                string amt = string.Empty;
                                decimal currAmt;
                                string labelChildName = dtFullChild.Columns[i].ColumnName.ToString();
                                switch (labelChildName)
                                {
                                    case "begbal":
                                    case "debits":
                                    case "credits":
                                    case "EndBal":
                                        {
                                            for (int row = 0; row < dtFullChild.Rows.Count; row++)
                                            {
                                                if (!string.IsNullOrEmpty(dtFullChild.Rows[row][i].ToString()))
                                                {
                                                    totValue = totValue + Convert.ToDouble(dtFullChild.Rows[row][i].ToString());
                                                    strTotValue = Convert.ToString(totValue);
                                                    Decimal.TryParse(strTotValue, out currAmt);
                                                    amt = string.Format("{0:N}", currAmt);
                                                }
                                            }
                                            dtFullChild.Rows[dtFullChild.Rows.Count - 1][i] = amt;
                                            break;
                                        }
                                }
                            }
                            if (dtFullChild.Rows.Count > 0)
                            {
                                if (dtFullChild.Columns.Contains("Description"))
                                {
                                    dtFullChild.Rows[dtFullChild.Rows.Count - 1]["Description"] = totConcatName;
                                }
                            }
                            if (dtFullChild.Columns.Contains("TrxID"))
                            {
                                dtFullChild.Columns.Remove("TrxID");
                            }
                            if (dtFullChild.Columns.Contains("Link1"))
                            {
                                dtFullChild.Columns.Remove("Link1");
                            }
                            if (dtFullChild.Rows.Count > 0 && dtFullChild.Columns.Count > 0)
                            {
                                PdfTable myPdfChild = myPdfDocument.NewTable(FontRegular, dtFullChild.Rows.Count, dtFullChild.Columns.Count, 1);
                                myPdfChild.ImportDataTable(dtFullChild);
                                myPdfChild.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfChild.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.SetColumnsWidth(pdfWidths);
                                myPdfChild.HeadersRow.SetFont(fontMedium);
                                myPdfChild.HeadersRow.SetBackgroundColor(Color.White);
                                myPdfChild.HeadersRow.SetForegroundColor(Color.White);
                                for (int pcll = 0; pcll < myPdfChild.HeadersRow.Cells.Count; pcll++)
                                {
                                    switch (myPdfChild.HeadersRow[pcll].Content.ToString())
                                    {
                                        case "begbal":
                                        case "debits":
                                        case "credits":
                                        case "EndBal":
                                            {
                                                for (int pdfrw = 0; pdfrw < myPdfChild.Rows.Length; pdfrw++)
                                                {
                                                    myPdfChild.Rows[pdfrw][pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                                myPdfChild.Rows[myPdfChild.Rows.Length - 1][pcll].SetBackgroundColor(Color.Gainsboro);
                                                myPdfChild.HeadersRow[pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                break;
                                            }
                                    }
                                }
                                while (!myPdfChild.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfHeaderFormattedPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfHeaderFormattedPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                        #endregion
                    }
                    #region GRAND TOTALS
                    if (dtChild.Rows.Count > 0)
                    {
                        dtChild.Columns.Remove("TrxID");
                        dtChild.Columns.Remove("Link1");
                        if (dtChild.Rows.Count > 4)
                        {
                            for (int k = 0; k <= dtChild.Rows.Count; )
                            {
                                if (dtChild.Rows.Count >= 2)
                                {
                                    if (k == dtChild.Rows.Count)
                                    {
                                        k--;
                                        dtChild.Rows.RemoveAt(k - 1);
                                    }
                                    else
                                    {
                                        k++;
                                        dtChild.Rows.RemoveAt(k - 1);
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                        //ADDING TOTAL TEXT TO LAST ROW
                        DataRow dr = dtChild.NewRow();
                        DataRow drStart = dtChild.NewRow();
                        for (int col = 0; col < dtChild.Columns.Count; col++)
                        {
                            dr[col] = "SKIP";
                            drStart[col] = "SKIP";
                        }
                        dtChild.Rows.InsertAt(drStart, 0);
                        dtChild.Rows.InsertAt(dr, 0);
                        if (dtChild.Rows.Count > 2)
                        {
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty)
                            {
                                dtChild.Rows[dtChild.Rows.Count - 1][0] = "Total";
                            }
                            //CALCULATION FOR  NET PROFIT OR LOSS
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == "Total")
                            {
                                decimal prevamount = 0;
                                decimal finalamount = 0;
                                //ADD NEW ROW
                                DataRow dr1 = dtChild.NewRow();
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    dr1[col] = "SKIP";
                                }
                                dtChild.Rows.InsertAt(dr1, dtChild.Rows.Count);
                                dtChild.Rows.Add(dtChild.NewRow());
                                //ADD Profit/Loss
                                if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty || dtChild.Rows[dtChild.Rows.Count - 1][0] == "SKIP")
                                {
                                    dtChild.Rows[dtChild.Rows.Count - 1][0] = "Net Profit/Loss";
                                }
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    switch (dtChild.Columns[col].ColumnName.ToString())
                                    {
                                        case "debits":
                                            {
                                                decimal currentamount;
                                                Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 3][col].ToString(), out currentamount);
                                                if (prevamount == 0)
                                                {
                                                    prevamount = currentamount;
                                                }
                                                else
                                                {
                                                    //Compare previous and current amount and insert the value in data table 
                                                    if (prevamount > currentamount)
                                                    {
                                                        finalamount = prevamount - currentamount;
                                                        string amt = string.Format("{0:N}", finalamount);
                                                        prevamount = 0;
                                                        dtChild.Rows[dtChild.Rows.Count - 1][col] = amt;
                                                    }
                                                    else if (currentamount > prevamount)
                                                    {  //current amount is greater than previous 
                                                        finalamount = currentamount - prevamount;
                                                        string amt = string.Format("{0:N}", finalamount);
                                                        prevamount = 0;
                                                        dtChild.Rows[dtChild.Rows.Count - 1][col - 1] = amt;
                                                    }
                                                    else
                                                    {
                                                        //current amount and previous amount both are equal
                                                        prevamount = 0;
                                                    }
                                                }
                                                break;
                                            }
                                        case "credits":
                                            {
                                                decimal currentamount;
                                                Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 3][col].ToString(), out currentamount);
                                                if (prevamount == 0)
                                                {
                                                    prevamount = currentamount;
                                                }
                                                else
                                                {
                                                    //Compare previous and current amount and insert the value in data table 
                                                    if (prevamount > currentamount)
                                                    {
                                                        finalamount = prevamount - currentamount;
                                                        string amt = string.Format("{0:N}", finalamount);
                                                        prevamount = 0;
                                                        dtChild.Rows[dtChild.Rows.Count - 1][col] = amt;
                                                    }
                                                    else if (currentamount > prevamount)
                                                    {  //current amount is greater than previous 
                                                        finalamount = currentamount - prevamount;
                                                        string amt = string.Format("{0:N}", finalamount);
                                                        prevamount = 0;
                                                        dtChild.Rows[dtChild.Rows.Count - 1][col - 1] = amt;
                                                    }
                                                    else
                                                    {
                                                        //current amount and previous amount both are equal
                                                        prevamount = 0;
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            //GRAND TOTALS (TOTAL + Profit/Loss)
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == "Net Profit/Loss")
                            {
                                //ADD new row
                                DataRow drEnd = dtChild.NewRow();
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    drEnd[col] = "SKIP";
                                }
                                dtChild.Rows.InsertAt(drEnd, dtChild.Rows.Count);
                                dtChild.Rows.Add(dtChild.NewRow());
                                //ADD Grand Total
                                if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty)
                                {
                                    dtChild.Rows[dtChild.Rows.Count - 1][0] = "Grand Total";
                                }
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    if ((dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != string.Empty) && (dtChild.Rows[dtChild.Rows.Count - 2][col].ToString() != "Total"))
                                    {
                                        decimal profitamount = 0;
                                        if (dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != string.Empty)
                                        {
                                            Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 3][col].ToString(), out profitamount);
                                        }
                                        decimal totalamount = 0;
                                        if (dtChild.Rows[dtChild.Rows.Count - 5][col].ToString() != string.Empty)
                                        {
                                            Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 5][col].ToString(), out totalamount);
                                        }
                                        decimal grandtotal = 0;
                                        //ADDING TOTAL + PROFIT/LOSS
                                        grandtotal = profitamount + totalamount;
                                        string strgrandtotal;
                                        if (grandtotal != 0)
                                        {
                                            strgrandtotal = clsReportsUICore.ConvertToCurrencyFormat(grandtotal.ToString());
                                            dtChild.Rows[dtChild.Rows.Count - 1][col] = strgrandtotal;
                                        }
                                    }
                                }
                            }
                        }
                        PdfTable myPdfChildGrandTotals = myPdfDocument.NewTable(FontRegular, dtChild.Rows.Count, dtChild.Columns.Count, 1);
                        myPdfChildGrandTotals.ImportDataTable(dtChild);
                        myPdfChildGrandTotals.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfChildGrandTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfChildGrandTotals.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfChildGrandTotals.SetColumnsWidth(pdfWidths);
                        myPdfChildGrandTotals.HeadersRow.SetFont(fontMedium);
                        myPdfChildGrandTotals.HeadersRow.SetBackgroundColor(Color.White);
                        myPdfChildGrandTotals.HeadersRow.SetForegroundColor(Color.White);
                        for (int pcll = 0; pcll < myPdfChildGrandTotals.HeadersRow.Cells.Count; pcll++)
                        {
                            switch (myPdfChildGrandTotals.HeadersRow[pcll].Content.ToString())
                            {
                                case "begbal":
                                case "debits":
                                case "credits":
                                case "EndBal":
                                    {
                                        for (int pdfrw = 0; pdfrw < myPdfChildGrandTotals.Rows.Length; pdfrw++)
                                        {
                                            myPdfChildGrandTotals.Rows[pdfrw][pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 1][pcll].SetBackgroundColor(Color.Gainsboro);
                                        myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 3][pcll].SetBackgroundColor(Color.Gainsboro);
                                        myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 5][pcll].SetBackgroundColor(Color.Gainsboro);
                                        myPdfChildGrandTotals.HeadersRow[pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                        break;
                                    }
                            }
                        }
                        foreach (PdfCell pclls in myPdfChildGrandTotals.Cells)
                        {
                            switch (pclls.Content.ToString())
                            {
                                case "SKIP":
                                    {
                                        pclls.SetForegroundColor(Color.White);
                                        pclls.SetBackgroundColor(Color.White);
                                        break;
                                    }
                                default:
                                    {
                                        pclls.SetFont(fontSumTotals);
                                        break;
                                    }
                            }
                        }
                        while (!myPdfChildGrandTotals.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos + 5;
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage3 = myPdfChildGrandTotals.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                            newPdfPage.Add(newPdfTablePage3);
                            currentYPos = newPdfTablePage3.Area.BottomLeftVertex.Y;
                        }
                    }
                    #endregion
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 604
        public void ReportStyle604(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, Hashtable htParentColNameValues, Hashtable htChildColNameValues, string fileName)
        {
            try
            {
                int[] colChdHeaderWidths = new int[bcolWidths.Length - 2];
                int forCtr = 2;
                for (int ctr = 0; ctr < colChdHeaderWidths.Length; ctr++)
                {
                    colChdHeaderWidths[ctr] = bcolWidths[forCtr];
                    forCtr++;
                }
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                PdfTablePage myPdfChildHeaderFormattedPage = null;
                Font fontMedium = new Font("Verdana", 8, FontStyle.Bold);
                Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                //
                #region DT HEADER FORMATTED
                DataTable dtHeaderFormatted = new DataTable();
                foreach (DataColumn dcl in dtChild.Columns)
                {
                    switch (dcl.ColumnName)
                    {
                        case "TrxID":
                        case "Link1":
                            {
                                break;
                            }
                        default:
                            {
                                dtHeaderFormatted.Columns.Add(dcl.ColumnName);
                                break;
                            }
                    }
                }
                dtHeaderFormatted.Rows.Add(dtHeaderFormatted.NewRow());
                for (int col = 0; col < dtHeaderFormatted.Columns.Count; col++)
                {
                    dtHeaderFormatted.Rows[dtHeaderFormatted.Rows.Count - 1][dtHeaderFormatted.Columns[col].ToString()] = "SKIP";
                }
                PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(FontRegular, dtHeaderFormatted.Rows.Count, dtHeaderFormatted.Columns.Count, 1);
                myPdfTableHeaderFormat.ImportDataTable(dtHeaderFormatted);
                myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                myPdfTableHeaderFormat.SetColumnsWidth(colChdHeaderWidths);
                myPdfTableHeaderFormat.HeadersRow.SetFont(fontMedium);
                for (int i = 0; i < dtHeaderFormatted.Rows.Count; i++)
                {
                    foreach (PdfCell pcll in myPdfTableHeaderFormat.Rows[i].Cells)
                    {
                        if (pcll.Content.ToString() == "SKIP")
                        {
                            pcll.SetBackgroundColor(Color.White);
                            pcll.SetForegroundColor(Color.White);
                        }
                    }
                }
                for (int i = 0; i < myPdfTableHeaderFormat.HeadersRow.Cells.Count; i++)
                {
                    string labelName = myPdfTableHeaderFormat.HeadersRow[i].Content.ToString();
                    switch (labelName)
                    {
                        case "Description":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("Project");
                                myPdfTableHeaderFormat.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleLeft);
                                break;
                            }
                        case "TBDB":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("             Opening");
                                myPdfTableHeaderFormat.HeadersRow[i].ColSpan = 2;
                                break;
                            }
                        case "TBCR":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("             Opening");
                                break;
                            }

                        case "BSDB":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("               Activity");
                                myPdfTableHeaderFormat.HeadersRow[i].ColSpan = 2;
                                break;
                            }
                        case "BSCR":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("               Activity");
                                break;
                            }
                        case "PLDB":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("               Ending");
                                myPdfTableHeaderFormat.HeadersRow[i].ColSpan = 2;
                                break;
                            }
                        case "PLCR":
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetContent("               Ending");
                                break;
                            }
                        default:
                            {
                                myPdfTableHeaderFormat.HeadersRow[i].SetColors(Color.White, Color.White);
                                break;
                            }
                    }
                }
                posY = currentYPos + 25;
                currentYPos = posY;
                //
                PdfTablePage myPdfHeaderFormattedPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                newPdfPage.Add(myPdfHeaderFormattedPage);
                //
                double xPos = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.X;
                double yPos = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.Y;

                Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                newPdfPage.Add(pdfLineBrk);
                #endregion
                #region DTCHILD HEADER
                if (dtChild != null)
                {
                    DataTable dtChildHeader = new DataTable();
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtChildHeader.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }
                    dtChildHeader.Rows.Add(dtChildHeader.NewRow());
                    for (int col = 0; col < dtChildHeader.Columns.Count; col++)
                    {
                        dtChildHeader.Rows[dtChildHeader.Rows.Count - 1][dtChildHeader.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfChildHeaderFormat = myPdfDocument.NewTable(FontRegular, dtChildHeader.Rows.Count, dtChildHeader.Columns.Count, 1);
                    myPdfChildHeaderFormat.ImportDataTable(dtChildHeader);
                    myPdfChildHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfChildHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.SetColumnsWidth(colChdHeaderWidths);
                    myPdfChildHeaderFormat.HeadersRow.SetFont(fontMedium);
                    for (int i = 0; i < dtChildHeader.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfChildHeaderFormat.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    for (int i = 0; i < myPdfChildHeaderFormat.HeadersRow.Cells.Count; i++)
                    {
                        string labelName = myPdfChildHeaderFormat.HeadersRow[i].Content.ToString();
                        switch (labelName)
                        {
                            case "TBDB":
                            case "TBCR":
                            case "PLDB":
                            case "PLCR":
                            case "BSDB":
                            case "BSCR":
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfChildHeaderFormat.HeadersRow[i].SetContent(htChildColNameValues[labelName].ToString());
                                    break;
                                }
                            default:
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].SetForegroundColor(Color.White);
                                    myPdfChildHeaderFormat.HeadersRow[i].SetBackgroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    currentYPos = posY + 7 + (myPdfHeaderFormattedPage.Area.PosY + 5 - posY) / 2; ;
                    posY = currentYPos;
                    //
                    myPdfChildHeaderFormattedPage = myPdfChildHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfChildHeaderFormattedPage);
                }
                //
                #endregion
                if (dt.Rows.Count > 0)
                {
                    string totConcatName = string.Empty;
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        //
                        foundRows = dt.Select("Link1 ='" + dt.Rows[dtCnt]["Link1"].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt]["Link1"].ToString();
                            dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        else
                        {
                            //to add sum row
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            dtNew.Columns.Remove("TrxID");
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            dtNew.Columns.Remove("Link1");
                        }
                        totConcatName = "Total" + "  " + dtNew.Rows[0]["Account"].ToString() + "  " + "of  " + " " + dtNew.Rows[0]["Description"].ToString();
                        int cols = 0;
                        if (dtNew.Columns.Count < dtHeaderFormatted.Columns.Count)
                        {
                            cols = dtHeaderFormatted.Columns.Count - dtNew.Columns.Count;
                            for (int cls = 0; cls < cols; cls++)
                            {
                                dtNew.Columns.Add("Column" + cls);
                            }
                        }
                        for (int rws = 0; rws < dtNew.Rows.Count; rws++)
                        {
                            if (dtNew.Rows[rws]["Description"] != null)
                            {
                                if (dtNew.Rows[rws]["Account"] != null)
                                {
                                    string appValue = dtNew.Rows[rws]["Account"].ToString();
                                    appValue = appValue + "   " + dtNew.Rows[rws]["Description"].ToString();
                                    dtNew.Rows[rws]["Account"] = appValue;
                                    dtNew.Rows[rws]["Description"] = string.Empty;
                                }
                            }
                        }
                        PdfTable myPdfParent = myPdfDocument.NewTable(FontRegular, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                        myPdfParent.ImportDataTable(dtNew);
                        myPdfParent.SetBorders(Color.Black, 1, BorderType.None);
                        myPdfParent.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfParent.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                        myPdfParent.SetColumnsWidth(colChdHeaderWidths);
                        myPdfParent.HeadersRow.SetFont(fontMedium);
                        myPdfParent.HeadersRow.SetBackgroundColor(Color.White);
                        myPdfParent.HeadersRow.SetForegroundColor(Color.White);

                        while (!myPdfParent.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                //
                                posY = currentYPos + 25;
                                currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfHeaderFormattedPage);
                                newPdfPage.Add(pdfLineBrk);
                                currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                if (posY >= currentYPos)
                                {
                                    currentYPos = posY + 5 + (myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2;
                                    posY = currentYPos;
                                }
                                else
                                {
                                    posY = currentYPos;
                                }
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                //
                                posY = currentYPos + 25;
                                currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfHeaderFormattedPage);
                                newPdfPage.Add(pdfLineBrk);
                                currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                posY = currentYPos;
                                newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage2 = myPdfParent.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                            newPdfPage.Add(newPdfTablePage2);
                            currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                        }
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select("Link1='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    int rowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);
                                    DataRow dtChRow = dtFullChild.NewRow();
                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    string[] grandFormats = (string[])htPFormatModes[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    if (dtChild.Rows[0]["Link1"].ToString() != null)
                                    {
                                        childTrxID = dtChild.Rows[0]["Link1"].ToString();
                                    }
                                    dtChild.Rows[rowIndex].Delete();
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                }
                            }
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                            }
                            dtFullChild.Rows.Add(dtFullChild.NewRow());
                            for (int i = 0; i < dtFullChild.Columns.Count; i++)
                            {
                                double totValue = 0;
                                string strTotValue = string.Empty;
                                string amt = string.Empty;
                                decimal currAmt;
                                switch (dtFullChild.Columns[i].ColumnName.ToString())
                                {
                                    case "TBDB":
                                    case "PLDB":
                                    case "BSDB":
                                    case "TBCR":
                                    case "PLCR":
                                    case "BSCR":
                                        {
                                            for (int row = 0; row < dtFullChild.Rows.Count; row++)
                                            {
                                                if (!string.IsNullOrEmpty(dtFullChild.Rows[row][i].ToString()))
                                                {
                                                    totValue = totValue + Convert.ToDouble(dtFullChild.Rows[row][i].ToString());
                                                    strTotValue = Convert.ToString(totValue);
                                                    Decimal.TryParse(strTotValue, out currAmt);
                                                    amt = string.Format("{0:N}", currAmt);
                                                }
                                            }
                                            dtFullChild.Rows[dtFullChild.Rows.Count - 1][i] = amt;
                                            break;
                                        }
                                }
                            }
                            if (dtFullChild.Rows.Count > 0)
                            {
                                if (dtFullChild.Columns.Contains("Description"))
                                {
                                    dtFullChild.Rows[dtFullChild.Rows.Count - 1]["Description"] = totConcatName;
                                }
                            }
                            if (dtFullChild.Columns.Contains("TrxID"))
                            {
                                dtFullChild.Columns.Remove("TrxID");
                            }
                            if (dtFullChild.Columns.Contains("Link1"))
                            {
                                dtFullChild.Columns.Remove("Link1");
                            }
                            if (dtFullChild.Rows.Count > 0 && dtFullChild.Columns.Count > 0)
                            {
                                PdfTable myPdfChild = myPdfDocument.NewTable(FontRegular, dtFullChild.Rows.Count, dtFullChild.Columns.Count, 1);
                                myPdfChild.ImportDataTable(dtFullChild);
                                myPdfChild.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfChild.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.SetColumnsWidth(colChdHeaderWidths);
                                myPdfChild.HeadersRow.SetFont(fontMedium);
                                myPdfChild.HeadersRow.SetBackgroundColor(Color.White);
                                myPdfChild.HeadersRow.SetForegroundColor(Color.White);
                                for (int pcll = 0; pcll < myPdfChild.HeadersRow.Cells.Count; pcll++)
                                {
                                    switch (myPdfChild.HeadersRow[pcll].Content.ToString())
                                    {
                                        case "Account Listing":
                                        case "TBDB":
                                        case "PLDB":
                                        case "BSDB":
                                        case "TBCR":
                                        case "PLCR":
                                        case "BSCR":
                                            {
                                                for (int pdfrw = 0; pdfrw < myPdfChild.Rows.Length; pdfrw++)
                                                {
                                                    myPdfChild.Rows[pdfrw][pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                                myPdfChild.Rows[myPdfChild.Rows.Length - 1][pcll].SetBackgroundColor(Color.Gainsboro);
                                                myPdfChild.HeadersRow[pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                break;
                                            }
                                    }
                                }
                                while (!myPdfChild.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfHeaderFormattedPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 7 + ((myPdfHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfHeaderFormattedPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        currentYPos = posY + 7 + ((myPdfChildHeaderFormattedPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormattedPage);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                    }
                    #region GRAND TOTALS
                    if (dtChild.Rows.Count > 0)
                    {
                        dtChild.Columns.Remove("TrxID");
                        dtChild.Columns.Remove("Link1");
                        if (dtChild.Rows.Count > 4)
                        {
                            for (int k = 0; k <= dtChild.Rows.Count; )
                            {
                                if (dtChild.Rows.Count >= 2)
                                {
                                    if (k == dtChild.Rows.Count)
                                    {
                                        k--;
                                        dtChild.Rows.RemoveAt(k - 1);
                                    }
                                    else
                                    {
                                        k++;
                                        dtChild.Rows.RemoveAt(k - 1);
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                        //ADDING TOTAL TEXT TO LAST ROW
                        DataRow dr = dtChild.NewRow();
                        DataRow drStart = dtChild.NewRow();
                        for (int col = 0; col < dtChild.Columns.Count; col++)
                        {
                            dr[col] = "SKIP";
                            drStart[col] = "SKIP";
                        }
                        dtChild.Rows.InsertAt(drStart, 0);
                        dtChild.Rows.InsertAt(dr, 0);
                        if (dtChild.Rows.Count > 2)
                        {
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty)
                            {
                                dtChild.Rows[dtChild.Rows.Count - 1][0] = "Total";
                            }
                            //CALCULATION FOR  NET PROFIT OR LOSS
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == "Total")
                            {
                                decimal prevamount = 0;
                                decimal finalamount = 0;
                                //ADD NEW ROW
                                DataRow dr1 = dtChild.NewRow();
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    dr1[col] = "SKIP";
                                }
                                dtChild.Rows.InsertAt(dr1, dtChild.Rows.Count);
                                dtChild.Rows.Add(dtChild.NewRow());
                                //ADD Profit/Loss
                                if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty || dtChild.Rows[dt.Rows.Count - 1][0] == "SKIP")
                                {
                                    dtChild.Rows[dtChild.Rows.Count - 1][0] = "Net Profit/Loss";
                                }
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    if ((dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != string.Empty) && (dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != "Total"))
                                    {
                                        decimal currentamount;
                                        Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 3][col].ToString(), out currentamount);
                                        if (prevamount == 0)
                                        {
                                            prevamount = currentamount;
                                        }
                                        else
                                        {
                                            //Compare previous and current amount and insert the value in data table 
                                            if (prevamount > currentamount)
                                            {
                                                finalamount = prevamount - currentamount;
                                                string amt = string.Format("{0:N}", finalamount);
                                                prevamount = 0;
                                                dtChild.Rows[dtChild.Rows.Count - 1][col] = amt;
                                            }
                                            else if (currentamount > prevamount)
                                            {  //current amount is greater than previous 
                                                finalamount = currentamount - prevamount;
                                                string amt = string.Format("{0:N}", finalamount);
                                                prevamount = 0;
                                                dtChild.Rows[dtChild.Rows.Count - 1][col - 1] = amt;
                                            }
                                            else
                                            {
                                                //current amount and previous amount both are equal
                                                prevamount = 0;
                                            }
                                        }
                                    }
                                }
                            }
                            //GRAND TOTALS (TOTAL + Profit/Loss)
                            if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == "Net Profit/Loss")
                            {
                                //ADD new row
                                DataRow drEnd = dtChild.NewRow();
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    drEnd[col] = "SKIP";
                                }
                                dtChild.Rows.InsertAt(drEnd, dtChild.Rows.Count);
                                dtChild.Rows.Add(dtChild.NewRow());
                                //ADD Grand Total
                                if (dtChild.Rows[dtChild.Rows.Count - 1][0].ToString() == string.Empty)
                                {
                                    dtChild.Rows[dtChild.Rows.Count - 1][0] = "Grand Total";
                                }
                                for (int col = 0; col < dtChild.Columns.Count; col++)
                                {
                                    if ((dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != string.Empty) && (dtChild.Rows[dtChild.Rows.Count - 2][col].ToString() != "Total"))
                                    {
                                        decimal profitamount = 0;
                                        if (dtChild.Rows[dtChild.Rows.Count - 3][col].ToString() != string.Empty)
                                        {
                                            Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 3][col].ToString(), out profitamount);
                                        }
                                        decimal totalamount = 0;
                                        if (dtChild.Rows[dtChild.Rows.Count - 5][col].ToString() != string.Empty)
                                        {
                                            Decimal.TryParse(dtChild.Rows[dtChild.Rows.Count - 5][col].ToString(), out totalamount);
                                        }
                                        decimal grandtotal = 0;
                                        //ADDING TOTAL + PROFIT/LOSS
                                        string strgrandtotal;
                                        grandtotal = profitamount + totalamount;
                                        if (grandtotal != 0)
                                        {
                                            strgrandtotal = clsReportsUICore.ConvertToCurrencyFormat(grandtotal.ToString());
                                            dtChild.Rows[dtChild.Rows.Count - 1][col] = strgrandtotal;
                                        }
                                    }
                                }
                            }
                        }
                        //PdfTable myPdfChildGrandTotals = myPdfDocument.NewTable(FontRegular, dtChild.Rows.Count, dtChild.Columns.Count, 1);
                        //myPdfChildGrandTotals.ImportDataTable(dtChild);
                        //myPdfChildGrandTotals.SetBorders(Color.Black, 1, BorderType.None);
                        //myPdfChildGrandTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                        //myPdfChildGrandTotals.SetColumnsWidth(colChdHeaderWidths);
                        //myPdfChildGrandTotals.HeadersRow.SetFont(fontMedium);
                        //myPdfChildGrandTotals.HeadersRow.SetBackgroundColor(Color.White);
                        //myPdfChildGrandTotals.HeadersRow.SetForegroundColor(Color.White);
                        //for (int pcll = 0; pcll < myPdfChildGrandTotals.HeadersRow.Cells.Count; pcll++)
                        //{
                        //    switch (myPdfChildGrandTotals.HeadersRow[pcll].Content.ToString())
                        //    {
                        //        case "TBDB":
                        //        case "PLDB":
                        //        case "BSDB":
                        //        case "TBCR":
                        //        case "PLCR":
                        //        case "BSCR":
                        //            {
                        //                for (int pdfrw = 0; pdfrw < myPdfChildGrandTotals.Rows.Length; pdfrw++)
                        //                {
                        //                    myPdfChildGrandTotals.Rows[pdfrw][pcll].SetContentAlignment(ContentAlignment.MiddleRight);
                        //                }
                        //                myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 1][pcll].SetBackgroundColor(Color.Gainsboro);
                        //                myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 3][pcll].SetBackgroundColor(Color.Gainsboro);
                        //                myPdfChildGrandTotals.Rows[myPdfChildGrandTotals.Rows.Length - 5][pcll].SetBackgroundColor(Color.Gainsboro);
                        //                break;
                        //            }
                        //    }
                        //}
                        //foreach (PdfCell pclls in myPdfChildGrandTotals.Cells)
                        //{
                        //    switch (pclls.Content.ToString())
                        //    {
                        //        case "SKIP":
                        //            {
                        //                pclls.SetForegroundColor(Color.White);
                        //                pclls.SetBackgroundColor(Color.White);
                        //                break;
                        //            }
                        //        default:
                        //            {
                        //                pclls.SetFont(fontSumTotals);
                        //                break;
                        //            }
                        //    }
                        //}
                        //while (!myPdfChildGrandTotals.AllTablePagesCreated)
                        //{
                        //    //Setting the Y position and if required creating new page
                        //    if (currentYPos > myPdfDocument.PageHeight - 50)
                        //    {
                        //        posY = 70;
                        //        currentYPos = 70;
                        //        newPdfPage.SaveToDocument();
                        //        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                        //        newPdfPage = myPdfDocument.NewPage();
                        //        newPdfPage.Add(myHeaderPdfTablePage);
                        //        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        //        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - pgHeight, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        //    }
                        //    else
                        //    {
                        //        posY = currentYPos + 5;
                        //    }
                        //    if (myPdfDocument.PageHeight - 50 - posY < 50)
                        //    {
                        //        posY = 70;
                        //        currentYPos = 70;
                        //        newPdfPage.SaveToDocument();
                        //        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                        //        newPdfPage = myPdfDocument.NewPage();
                        //        newPdfPage.Add(myHeaderPdfTablePage);
                        //        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        //        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageHeight - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        //        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, height - 200, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        //    }
                        //    PdfTablePage newPdfTablePage3 = myPdfChildGrandTotals.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        //    newPdfPage.Add(newPdfTablePage3);
                        //    currentYPos = newPdfTablePage3.Area.BottomLeftVertex.Y;
                        //}
                    }
                    #endregion
                }
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 621
        public void ReportStyle621(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, Hashtable htParentColNameValues, Hashtable htChildColNameValues, string fileName)
        {
            try
            {
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                Font fontMedium = new Font("Verdana", 8, FontStyle.Bold);
                Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                Font fontGrid = new Font("Verdana", 8, FontStyle.Regular);
                PdfTablePage myPdfChildHeaderFormatPage = null;
                PdfLine pdfLineBrk = null;

                #region DTCHILD HEADER
                Hashtable htGrandTotalSum = new Hashtable();
                DataTable dtHeaderFormatted = new DataTable();
                ArrayList alRemovedColumns = new ArrayList();
                int[] colChdHeaderWidths = null;
                if (dtChild != null)
                {
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                                {
                                    alRemovedColumns.Add(dcl.Ordinal);
                                    break;
                                }
                            default:
                                {
                                    dtHeaderFormatted.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }

                    //Remove columns TrxID and Link1 from table
                    int colstart = 0;
                    colChdHeaderWidths = new int[bcolWidths.Length - 2];
                    for (int ctr = 0; ctr < bcolWidths.Length; ctr++)
                    {
                        if (!alRemovedColumns.Contains(ctr))
                        {
                            colChdHeaderWidths[colstart] = bcolWidths[ctr];
                            colstart++;
                        }
                    }

                    DataTable dtChildHeader = new DataTable();
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtChildHeader.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }
                    dtChildHeader.Rows.Add(dtChildHeader.NewRow());
                    for (int col = 0; col < dtChildHeader.Columns.Count; col++)
                    {
                        dtChildHeader.Rows[dtChildHeader.Rows.Count - 1][dtChildHeader.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfChildHeaderFormat = myPdfDocument.NewTable(FontRegular, dtChildHeader.Rows.Count, dtChildHeader.Columns.Count, 1);
                    myPdfChildHeaderFormat.ImportDataTable(dtChildHeader);
                    myPdfChildHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfChildHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.SetColumnsWidth(colChdHeaderWidths);
                    myPdfChildHeaderFormat.HeadersRow.SetFont(GridHeaderFont);
                    for (int i = 0; i < myPdfChildHeaderFormat.HeadersRow.Cells.Count; i++)
                    {
                        string labelName = myPdfChildHeaderFormat.HeadersRow[i].Content.ToString();
                        switch (labelName)
                        {
                            case "Amount":
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                            default:
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].SetContent(htChildColNameValues[labelName].ToString());
                                    break;
                                }
                        }
                    }
                    for (int i = 0; i < dtChildHeader.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfChildHeaderFormat.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY;
                    //
                    myPdfChildHeaderFormatPage = myPdfChildHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfChildHeaderFormatPage);
                    //
                    double xPos = myPdfChildHeaderFormatPage.CellArea(myPdfChildHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = myPdfChildHeaderFormatPage.CellArea(myPdfChildHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                    pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                } //dtchid null if close
                #endregion
                if (dt.Rows.Count > 0)
                {
                    string totConcatName = string.Empty;
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        //
                        foundRows = dt.Select("Link1 ='" + dt.Rows[dtCnt]["Link1"].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt]["Link1"].ToString();
                            //dt.Rows[rowIndex].Delete();
                            dtNew.AcceptChanges();
                            dtNew.TableName = dt.TableName;
                        }
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            dtNew.Columns.Remove("TrxID");
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            dtNew.Columns.Remove("Link1");
                        }
                        int cols = 0;
                        if (dtNew.Columns.Count < dtHeaderFormatted.Columns.Count)
                        {
                            cols = dtHeaderFormatted.Columns.Count - dtNew.Columns.Count;
                            for (int cls = 0; cls < cols; cls++)
                            {
                                dtNew.Columns.Add("Column" + cls);
                            }
                        }
                        //Rearrange Parent Columns
                        if (dtNew.Columns.Count > 0)
                        {
                            if (dtNew.Columns[dtNew.Columns.Count - 1].ToString() != "OpenBal")
                            {
                                //set opening amount
                                if (dtNew.Columns.Contains("OpenBal"))
                                {
                                    dtNew.Columns["OpenBal"].SetOrdinal(dtNew.Columns.Count - 1);
                                }
                                //set description before opening amount  
                                if (dtNew.Columns.Contains("Description"))
                                {
                                    dtNew.Columns["Description"].SetOrdinal(dtNew.Columns.Count - 3);
                                }
                                //set account first item
                                if (dtNew.Columns.Contains("Account"))
                                {
                                    dtNew.Columns["Account"].SetOrdinal(0);
                                }
                            }
                        }
                        //ADD PARENT TABLE ROW
                        if (dtNew.Rows.Count > 0)
                        {
                            PdfTable myPdfParent = myPdfDocument.NewTable(FontRegular, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                            myPdfParent.ImportDataTable(dtNew);
                            myPdfParent.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfParent.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfParent.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            if (colChdHeaderWidths != null)
                            {
                                myPdfParent.SetColumnsWidth(colChdHeaderWidths);
                            }
                            myPdfParent.HeadersRow.SetFont(fontMedium);
                            myPdfParent.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfParent.HeadersRow.SetForegroundColor(Color.White);
                            //Description 1st row colspan
                            for (int i = 0; i < dtNew.Rows.Count; i++)
                            {
                                //Description colspan
                                myPdfParent.Rows[i][dtNew.Columns.Count - 3].ColSpan = 2;
                                //Amount Right alignment
                                myPdfParent.Rows[i][dtNew.Columns.Count - 1].CellContentAlignment(ContentAlignment.MiddleRight);
                            }
                            while (!myPdfParent.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //
                                    posY = currentYPos + 25;
                                    if (myPdfChildHeaderFormatPage != null)
                                    {
                                        currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                    }
                                    newPdfPage.Add(myPdfChildHeaderFormatPage);
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    if (posY >= currentYPos)
                                    {
                                        if (myPdfChildHeaderFormatPage != null)
                                        {
                                            currentYPos = posY + 9 + (myPdfChildHeaderFormatPage.Area.PosY - posY) / 2;
                                        }
                                        posY = currentYPos;
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //
                                    posY = currentYPos + 25;
                                    currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                    posY = currentYPos;
                                    newPdfPage.Add(myPdfChildHeaderFormatPage);
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage2 = myPdfParent.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                newPdfPage.Add(newPdfTablePage2);
                                currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                            }
                        }
                        //Child DataTable
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            DataRow[] drChildRow = dtChild.Select("Link1='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];

                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);

                                    DataRow dtChRow = dtFullChild.NewRow();

                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }

                                    dtFullChild.Rows.Add(dtChRow);

                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    if (dtChild.Rows[0]["Link1"].ToString() != null)
                                    {
                                        childTrxID = dtChild.Rows[0]["Link1"].ToString();
                                    }
                                    dtChild.Rows[childRowIndex].Delete();
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                }
                            }
                            double totDateRange = 0;
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns.Count - 3] = "SKIP";
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                                //ADDING TOTAL VALUE
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 4].ColumnName] = "Date Range Total:";
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                totDateRange = Convert.ToDouble(enumTot.Value.ToString());
                            }
                            if (dtFullChild.Rows.Count > 0)
                            {
                                //Adding Ending Balance
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 4].ColumnName] = "Ending Balance:";

                                double balfwd = 0;
                                double totEndingBalance = 0;
                                balfwd = 0;

                                if (dtNew.Rows[0]["OpenBal"].ToString() != string.Empty)
                                {
                                    balfwd = Convert.ToDouble(dtNew.Rows[0]["OpenBal"].ToString());
                                }
                                totEndingBalance = balfwd + totDateRange;
                                string finalamt = string.Format("{0:N}", totEndingBalance);
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 2].ColumnName] = finalamt;
                                //Grand Sum of all BalanceForward, DateRange, EndingBalance
                                string[] strSumCols ={ "BalanceForward", "DateRange", "EndingBalance" };
                                bool keyEntry = false;
                                for (int i = 0; i < strSumCols.Length; i++)
                                {
                                    if (htGrandTotalSum.Contains(strSumCols[i]))
                                    {
                                        keyEntry = false;
                                    }
                                    else
                                    {
                                        keyEntry = true;
                                    }
                                    switch (strSumCols[i])
                                    {
                                        case "BalanceForward":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], balfwd);
                                                }
                                                else
                                                {
                                                    balfwd = balfwd + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = balfwd;
                                                }
                                                break;

                                            }
                                        case "DateRange":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], totDateRange);
                                                }
                                                else
                                                {
                                                    totDateRange = totDateRange + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = totDateRange;
                                                }
                                                break;
                                            }

                                        case "EndingBalance":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], totEndingBalance);
                                                }
                                                else
                                                {
                                                    totEndingBalance = totEndingBalance + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = totEndingBalance;
                                                }
                                                break;
                                            }
                                    }
                                }
                                if (dtFullChild.Columns.Contains("TrxID"))
                                {
                                    dtFullChild.Columns.Remove("TrxID");
                                }
                                if (dtFullChild.Columns.Contains("Link1"))
                                {
                                    dtFullChild.Columns.Remove("Link1");
                                }
                                PdfTable myPdfChild = myPdfDocument.NewTable(FontRegular, dtFullChild.Rows.Count, dtFullChild.Columns.Count, 1);
                                myPdfChild.ImportDataTable(dtFullChild);
                                myPdfChild.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfChild.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                if (colChdHeaderWidths != null)
                                {
                                    myPdfChild.SetColumnsWidth(colChdHeaderWidths);
                                }
                                myPdfChild.HeadersRow.SetFont(fontMedium);
                                myPdfChild.HeadersRow.SetBackgroundColor(Color.White);
                                myPdfChild.HeadersRow.SetForegroundColor(Color.White);
                                for (int i = 0; i < dtFullChild.Rows.Count; i++)
                                {
                                    foreach (PdfCell pcll in myPdfChild.Rows[i].Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                        }
                                    }
                                }
                                //Set Child  Formats
                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfChild.Rows[i].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfChild.Rows[i].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfChild.Rows[i].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfChild.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    myPdfChild.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfChild.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        //Date Range Total:
                                                        if (dtFullChild.Rows[dtFullChild.Rows.Count - 2][dtFullChild.Columns.Count - 3].ToString() == "Date Range Total:")
                                                        {
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2][dtFullChild.Columns.Count - 3].ColSpan = 2;
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2].SetFont(GridHeaderFont);
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2].SetBackgroundColor(Color.Gainsboro);
                                                            myPdfChild.Cell(dtFullChild.Rows.Count - 2, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                        }
                                                        //Ending Balance: 
                                                        if (dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns.Count - 3].ToString() == "Ending Balance:")
                                                        {
                                                            //myPdfTable.HeadersRow.MergeCells();
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns.Count - 3].ColSpan = 2;
                                                            //SET SUM ROW FONT
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 1].SetFont(GridHeaderFont);
                                                            myPdfChild.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                        }
                                                    }
                                                    break;
                                                }
                                            default:
                                                break;
                                        }
                                    }
                                }
                                while (!myPdfChild.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 8 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormatPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormatPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }
                        } //dtchild close
                    }
                }
                // Grand Totals for BalanceForward,DateRange,EndingBalance
                #region GrandTotals
                DataTable dtTotals = new DataTable();
                if (dtChild != null)
                {
                    for (int col = 0; col < dtChild.Columns.Count; col++)
                    {
                        switch (dtChild.Columns[col].ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtTotals.Columns.Add(dtChild.Columns[col].ColumnName);
                                    break;
                                }
                        }
                    }

                    //Geting calculated grand totals from hashtable
                    string strgrandtotal;
                    string[] strGrandSumCols ={ "BalanceForward", "DateRange", "EndingBalance" };
                    if (htGrandTotalSum.Count > 0)
                    {
                        for (int i = 0; i < strGrandSumCols.Length; i++)
                        {
                            //Convert to Decimal format
                            strgrandtotal = clsReportsUICore.ConvertToCurrencyFormat(htGrandTotalSum[strGrandSumCols[i].ToString()].ToString());

                            switch (strGrandSumCols[i].ToString())
                            {
                                case "BalanceForward":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Balance Forward";
                                        break;

                                    }
                                case "DateRange":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Date Range";
                                        break;
                                    }

                                case "EndingBalance":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Ending Balance";
                                        break;
                                    }
                            }

                        }
                    }


                    /*IDictionaryEnumerator enumGrandTotals = htGrandTotalSum.GetEnumerator();
                    while (enumGrandTotals.MoveNext())
                    {

                        switch (enumGrandTotals.Key.ToString())
                        {
                            case "BalanceForward":
                                {
                                    dtTotals.Rows.Add(dtTotals.NewRow());
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = enumGrandTotals.Value.ToString();
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Balance Forward";
                                    break;

                                }
                            case "DateRange":
                                {
                                    dtTotals.Rows.Add(dtTotals.NewRow());
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = enumGrandTotals.Value.ToString();
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Date Range";
                                    break;
                                }

                            case "EndingBalance":
                                {
                                    dtTotals.Rows.Add(dtTotals.NewRow());
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = enumGrandTotals.Value.ToString();
                                    dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Ending Balance";
                                    break;
                                }
                        }
                    }*/


                    PdfTable myPdfGrand = myPdfDocument.NewTable(FontRegular, dtTotals.Rows.Count, dtTotals.Columns.Count, 1);
                    myPdfGrand.ImportDataTable(dtTotals);
                    myPdfGrand.HeadersRow.SetFont(fontSumTotals);
                    myPdfGrand.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfGrand.HeadersRow.SetBackgroundColor(Color.White);
                    myPdfGrand.HeadersRow.SetForegroundColor(Color.White);
                    myPdfGrand.SetColumnsWidth(colChdHeaderWidths);
                    foreach (PdfCell pcell in myPdfGrand.Rows[0].Cells)
                    {
                        if (!string.IsNullOrEmpty(pcell.Content.ToString()))
                        {
                            pcell.SetContentAlignment(ContentAlignment.MiddleRight);
                            pcell.SetFont(SumRowFont1);
                        }
                    }
                    //Description 1st row colspan
                    for (int i = 0; i < dtTotals.Rows.Count; i++)
                    {
                        //BalanceForward DateRange  EndingBalance
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].ColSpan = 3;
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].CellContentAlignment(ContentAlignment.MiddleRight);
                        //set Font
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].SetFont(SumRowFont);
                        //Amount colspan
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].ColSpan = 2;
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].SetFont(SumRowFont);
                        //Amount Right alignment
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].CellContentAlignment(ContentAlignment.MiddleRight);
                    }
                    while (!myPdfGrand.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 10;
                        }
                        if (myPdfDocument.PageHeight - posY < 200)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage2 = myPdfGrand.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    }
                }
                #endregion
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 622
        public void ReportStyle622(DataTable dt, DataTable dtHeader, Hashtable htPFormatModes, bool PLayout, int[] colWidths, DataTable dtChild, Hashtable htbPFormats, bool bPLayout, int[] bcolWidths, Hashtable htParentColNameValues, Hashtable htChildColNameValues, string fileName)
        {
            try
            {
                if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                    pgHeight = 820;
                    pgWidth = 250;
                }
                else
                {
                    if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                        pgHeight = 820;
                        pgWidth = 470;
                    }
                    else
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                        pgHeight = 820;
                        pgWidth = 300;
                    }
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                //totalWidth = totalWidth / 5;

                #region DTCHILD HEADER
                Hashtable htGrandTotalSum = new Hashtable();
                DataTable dtHeaderFormatted = new DataTable();
                ArrayList alRemovedColumns = new ArrayList();
                Font fontMedium = new Font("Verdana", 8, FontStyle.Bold);
                Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                Font fontGrid = new Font("Verdana", 8, FontStyle.Regular);
                PdfTablePage myPdfChildHeaderFormatPage = null;
                PdfLine pdfLineBrk = null;
                int[] colChdHeaderWidths = null;
                //
                if (dtChild != null)
                {
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                            case "SubTotal1":
                            case "SubTotal1Description":
                                {
                                    alRemovedColumns.Add(dcl.Ordinal);
                                    break;
                                }
                            default:
                                {
                                    dtHeaderFormatted.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }
                    //Remove columns TrxID and Link1 from table
                    int colstart = 0;
                    colChdHeaderWidths = new int[bcolWidths.Length - 4];
                    for (int ctr = 0; ctr < bcolWidths.Length; ctr++)
                    {
                        if (!alRemovedColumns.Contains(ctr))
                        {
                            colChdHeaderWidths[colstart] = bcolWidths[ctr];
                            colstart++;
                        }
                    }

                    DataTable dtChildHeader = new DataTable();
                    foreach (DataColumn dcl in dtChild.Columns)
                    {
                        switch (dcl.ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                            case "SubTotal1":
                            case "SubTotal1Description":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtChildHeader.Columns.Add(dcl.ColumnName);
                                    break;
                                }
                        }
                    }
                    dtChildHeader.Rows.Add(dtChildHeader.NewRow());
                    for (int col = 0; col < dtChildHeader.Columns.Count; col++)
                    {
                        dtChildHeader.Rows[dtChildHeader.Rows.Count - 1][dtChildHeader.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfChildHeaderFormat = myPdfDocument.NewTable(FontRegular, dtChildHeader.Rows.Count, dtChildHeader.Columns.Count, 1);
                    myPdfChildHeaderFormat.ImportDataTable(dtChildHeader);
                    myPdfChildHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfChildHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfChildHeaderFormat.SetColumnsWidth(colChdHeaderWidths);
                    myPdfChildHeaderFormat.HeadersRow.SetFont(GridHeaderFont);
                    //Set Header Amount column right alignment
                    for (int i = 0; i < myPdfChildHeaderFormat.HeadersRow.Cells.Count; i++)
                    {
                        string labelName = myPdfChildHeaderFormat.HeadersRow[i].Content.ToString();
                        switch (labelName)
                        {
                            case "Amount":
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].CellContentAlignment(ContentAlignment.MiddleRight);
                                    break;
                                }
                            default:
                                {
                                    myPdfChildHeaderFormat.HeadersRow[i].SetContent(htChildColNameValues[labelName].ToString());
                                    break;
                                }
                        }
                    }
                    for (int i = 0; i < dtChildHeader.Rows.Count; i++)
                    {
                        foreach (PdfCell pcll in myPdfChildHeaderFormat.Rows[i].Cells)
                        {
                            if (pcll.Content.ToString() == "SKIP")
                            {
                                pcll.SetBackgroundColor(Color.White);
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY;
                    //
                    myPdfChildHeaderFormatPage = myPdfChildHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfChildHeaderFormatPage);
                    //
                    double xPos = myPdfChildHeaderFormatPage.CellArea(myPdfChildHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.X;
                    double yPos = myPdfChildHeaderFormatPage.CellArea(myPdfChildHeaderFormat.HeadersRow.Index, 0).TopLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                    pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                }//dtchild null closed
                #endregion
                if (dt.Rows.Count > 0)
                {
                    for (int dtCnt = 0; dtCnt < dt.Rows.Count; dtCnt++)
                    {
                        DataTable pDT = new DataTable();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundRows = null;
                        string parentTrxID = string.Empty;
                        Hashtable htGrandTotals = new Hashtable();
                        foundRows = dt.Select("Link1 ='" + dt.Rows[dtCnt]["Link1"].ToString() + "'");
                        if (foundRows.Length > 0)
                        {
                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                            DataRow dt2Row = dtNew.NewRow();
                            if (dtNew.Columns.Count == 0)
                            {
                                for (int x = 0; x < dt.Columns.Count; x++)
                                {
                                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                                }
                            }
                            for (int i = 0; i < dtNew.Columns.Count; i++)
                            {
                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                            }
                            dtNew.Rows.Add(dt2Row);
                            parentTrxID = dt.Rows[dtCnt]["Link1"].ToString();
                        }
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            dtNew.Columns.Remove("TrxID");
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            dtNew.Columns.Remove("Link1");
                        }
                        int cols = 0;
                        if (dtNew.Columns.Count < dtHeaderFormatted.Columns.Count)
                        {
                            cols = dtHeaderFormatted.Columns.Count - dtNew.Columns.Count;
                            for (int cls = 0; cls < cols; cls++)
                            {
                                dtNew.Columns.Add("Column" + cls);
                            }
                        }
                        //Rearrange Parent Columns
                        if (dtNew.Columns.Count > 0)
                        {
                            if (dtNew.Columns.Contains("OpenBal"))
                            {
                                //set opening amount
                                dtNew.Columns["OpenBal"].SetOrdinal(dtNew.Columns.Count - 1);
                            }
                            if (dtNew.Columns.Contains("Description"))
                            {
                                //set description before opening amount  
                                dtNew.Columns["Description"].SetOrdinal(dtNew.Columns.Count - 3);
                            }
                            if (dtNew.Columns.Contains("Account"))
                            {
                                //set account first item
                                dtNew.Columns["Account"].SetOrdinal(0);
                            }
                        }
                        //ADD PARENT TABLE ROW
                        if (dtNew.Rows.Count > 0)
                        {
                            PdfTable myPdfParent = myPdfDocument.NewTable(FontRegular, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                            myPdfParent.ImportDataTable(dtNew);
                            myPdfParent.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfParent.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfParent.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            if (colChdHeaderWidths != null)
                            {
                                myPdfParent.SetColumnsWidth(colChdHeaderWidths);
                            }
                            myPdfParent.HeadersRow.SetFont(fontMedium);
                            myPdfParent.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfParent.HeadersRow.SetForegroundColor(Color.White);
                            //Description 1st row colspan
                            for (int i = 0; i < dtNew.Rows.Count; i++)
                            {
                                //Description colspan
                                myPdfParent.Rows[i][dtNew.Columns.Count - 3].ColSpan = 2;
                                //Amount Right alignment
                                myPdfParent.Rows[i][dtNew.Columns.Count - 1].CellContentAlignment(ContentAlignment.MiddleRight);
                            }
                            while (!myPdfParent.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //
                                    posY = currentYPos + 25;
                                    if (myPdfChildHeaderFormatPage != null)
                                    {
                                        currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                    }
                                    newPdfPage.Add(myPdfChildHeaderFormatPage);
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    if (posY >= currentYPos)
                                    {
                                        if (myPdfChildHeaderFormatPage != null)
                                        {
                                            currentYPos = posY + 9 + (myPdfChildHeaderFormatPage.Area.PosY - posY) / 2;
                                        }
                                        posY = currentYPos;
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //
                                    posY = currentYPos + 25;
                                    if (myPdfChildHeaderFormatPage != null)
                                    {
                                        currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormatPage);
                                    }
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage2 = myPdfParent.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                newPdfPage.Add(newPdfTablePage2);
                                currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                            }
                        }
                        //Child DataTable
                        if (dtChild != null)
                        {
                            string childTrxID = string.Empty;
                            int childRowIndex = 0;
                            string strCustom = string.Empty;
                            string strTotalAmount = string.Empty;
                            double TotalAmount = 0;
                            double monthSubTotal = 0;
                            DataRow[] drChildRow = dtChild.Select("Link1='" + parentTrxID + "'");
                            DataTable dtFullChild = new DataTable();
                            int[] childIndexes = new int[drChildRow.Length];
                            //To store distinct subtotalids
                            Hashtable htSubTotalIds = new Hashtable();
                            ArrayList alSubTotalIds = new ArrayList();
                            string strSumColumn = string.Empty;

                            if (drChildRow.Length > 0)
                            {
                                for (int drFoundRws = 0; drFoundRws < drChildRow.Length; drFoundRws++)
                                {
                                    childRowIndex = dtChild.Rows.IndexOf(drChildRow[drFoundRws]);

                                    DataRow dtChRow = dtFullChild.NewRow();

                                    if (dtFullChild.Columns.Count == 0)
                                    {
                                        for (int x = 0; x < dtChild.Columns.Count; x++)
                                        {
                                            dtFullChild.Columns.Add(dtChild.Columns[x].ColumnName);
                                        }
                                    }
                                    for (int i = 0; i < dtFullChild.Columns.Count; i++)
                                    {
                                        dtChRow[i] = drChildRow[drFoundRws].ItemArray[i].ToString();
                                    }
                                    dtFullChild.Rows.Add(dtChRow);
                                    string[] grandFormats = (string[])htbPFormats[childRowIndex];
                                    foreach (string val in grandFormats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "RAlign":
                                                {
                                                    if (strvalues.Length > 1)
                                                    {
                                                        strCustom = string.Empty;
                                                        decimal amount;
                                                        TotalAmount = 0;
                                                        string amt = string.Empty;
                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                        string colName = dtFullChild.Columns[colNo].ColumnName.Trim().ToString();
                                                        strSumColumn = colName;
                                                        if (!htGrandTotals.ContainsKey(colName))
                                                        {
                                                            Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals.Add(colName, amt);
                                                        }
                                                        else
                                                        {
                                                            TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                            if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                            {
                                                                TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                            }
                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                            amt = string.Format("{0:N}", amount);
                                                            htGrandTotals[colName] = amt;
                                                        }
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    //Insert subTotalIds RowIndexs and sums
                                    if (dtFullChild.Columns.Contains("SubTotal1"))
                                    {
                                        string strIndexSum = string.Empty;
                                        string strSubTotal1 = string.Empty;
                                        string stramount = string.Empty;
                                        decimal amount;

                                        strSubTotal1 = dtFullChild.Rows[dtFullChild.Rows.Count - 1]["SubTotal1"].ToString();

                                        if (strSubTotal1 != string.Empty)
                                        {
                                            if (!htSubTotalIds.Contains(strSubTotal1))
                                            {
                                                if (!string.IsNullOrEmpty(dtFullChild.Rows[dtFullChild.Rows.Count - 1][strSumColumn].ToString()))
                                                {
                                                    monthSubTotal = Convert.ToDouble(dtFullChild.Rows[dtFullChild.Rows.Count - 1][strSumColumn].ToString());
                                                }
                                                stramount = clsReportsUICore.ConvertToCurrencyFormat(Convert.ToString(monthSubTotal));
                                                strIndexSum = drFoundRws + "~" + stramount;
                                                htSubTotalIds.Add(strSubTotal1, strIndexSum);
                                                alSubTotalIds.Add(strSubTotal1);
                                            }
                                            else
                                            {
                                                if (!string.IsNullOrEmpty(dtFullChild.Rows[dtFullChild.Rows.Count - 1][strSumColumn].ToString()))
                                                {
                                                    monthSubTotal = monthSubTotal + Convert.ToDouble(dtFullChild.Rows[dtFullChild.Rows.Count - 1][strSumColumn].ToString());
                                                }
                                                stramount = clsReportsUICore.ConvertToCurrencyFormat(Convert.ToString(monthSubTotal));
                                                strIndexSum = drFoundRws + "~" + stramount;
                                                htSubTotalIds[strSubTotal1] = strIndexSum;
                                            }
                                        }
                                    }
                                    if (dtChild.Rows[0]["Link1"].ToString() != null)
                                    {
                                        childTrxID = dtChild.Rows[0]["Link1"].ToString();
                                    }
                                    dtChild.Rows[childRowIndex].Delete();
                                    if (childIndexes[0] != 0)
                                    {
                                        childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                                    }
                                    else
                                    {
                                        childIndexes[drFoundRws] = childRowIndex;
                                    }
                                    dtFullChild.AcceptChanges();
                                    dtFullChild.TableName = dtChild.TableName;
                                }
                            }
                            //Adding Totals
                            double totDateRange = 0;
                            IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                            if (htGrandTotals.Keys.Count > 0)
                            {
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                                //ADDING TOTAL VALUE
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 6].ColumnName] = "Date Range Total:";
                            }
                            while (enumTot.MoveNext())
                            {
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                totDateRange = Convert.ToDouble(enumTot.Value.ToString());
                            }
                            if (dtFullChild.Rows.Count > 0)
                            {
                                //Adding Ending Balance
                                dtFullChild.Rows.Add(dtFullChild.NewRow());
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 6].ColumnName] = "Ending Balance:";
                                double balfwd = 0;
                                double totEndingBalance = 0;
                                balfwd = 0;
                                if (dtNew.Rows[0]["OpenBal"].ToString() != string.Empty)
                                {
                                    balfwd = Convert.ToDouble(dtNew.Rows[0]["OpenBal"].ToString());
                                }
                                totEndingBalance = balfwd + totDateRange;
                                string finalamt = string.Format("{0:N}", totEndingBalance);
                                dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns[dtFullChild.Columns.Count - 4].ColumnName] = finalamt;
                                //Grand Sum of all BalanceForward, DateRange, EndingBalance
                                string[] strSumCols ={ "BalanceForward", "DateRange", "EndingBalance" };
                                bool keyEntry = false;
                                for (int i = 0; i < strSumCols.Length; i++)
                                {
                                    if (htGrandTotalSum.Contains(strSumCols[i]))
                                    {
                                        keyEntry = false;
                                    }
                                    else
                                    {
                                        keyEntry = true;
                                    }
                                    switch (strSumCols[i])
                                    {
                                        case "BalanceForward":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], balfwd);
                                                }
                                                else
                                                {
                                                    balfwd = balfwd + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = balfwd;
                                                }
                                                break;
                                            }
                                        case "DateRange":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], totDateRange);
                                                }
                                                else
                                                {
                                                    totDateRange = totDateRange + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = totDateRange;
                                                }
                                                break;
                                            }
                                        case "EndingBalance":
                                            {
                                                if (keyEntry)
                                                {
                                                    htGrandTotalSum.Add(strSumCols[i], totEndingBalance);
                                                }
                                                else
                                                {
                                                    totEndingBalance = totEndingBalance + Convert.ToDouble(htGrandTotalSum[strSumCols[i]]);
                                                    htGrandTotalSum[strSumCols[i]] = totEndingBalance;
                                                }
                                                break;
                                            }
                                    }
                                }
                                //Adding Monthwise SubTotals
                                int pos = 1;
                                int curpos = 0;
                                for (int i = 0; i < alSubTotalIds.Count; i++)
                                {
                                    string[] strIdSum = htSubTotalIds[alSubTotalIds[i].ToString()].ToString().Split('~');
                                    //Add new DataRow
                                    DataRow drSubTotal = dtFullChild.NewRow();
                                    for (int col = 0; col < dtFullChild.Columns.Count; col++)
                                    {
                                        if (col == dtFullChild.Columns.Count - 6)
                                        {
                                            if (pos == 1)
                                            {
                                                drSubTotal[dtFullChild.Columns[col].ColumnName] = dtFullChild.Rows[int.Parse(strIdSum[0])]["SubTotal1Description"].ToString();
                                            }
                                            else
                                            {
                                                drSubTotal[dtFullChild.Columns[col].ColumnName] = dtFullChild.Rows[int.Parse(strIdSum[0]) + (pos - 1)]["SubTotal1Description"].ToString();
                                            }
                                        }
                                        else if (col == dtFullChild.Columns.Count - 4)
                                        {
                                            drSubTotal[dtFullChild.Columns[col].ColumnName] = strIdSum[1];
                                        }
                                        else
                                        {
                                            drSubTotal[dtFullChild.Columns[col].ColumnName] = "SKIP";
                                        }
                                    }
                                    curpos = int.Parse(strIdSum[0]) + pos;
                                    dtFullChild.Rows.InsertAt(drSubTotal, curpos);
                                    pos++;
                                }
                                //Removing the columns
                                if (dtFullChild.Columns.Contains("TrxID"))
                                {
                                    dtFullChild.Columns.Remove("TrxID");
                                }
                                if (dtFullChild.Columns.Contains("Link1"))
                                {
                                    dtFullChild.Columns.Remove("Link1");
                                }
                                if (dtFullChild.Columns.Contains("SubTotal1"))
                                {
                                    dtFullChild.Columns.Remove("SubTotal1");
                                }
                                if (dtFullChild.Columns.Contains("SubTotal1Description"))
                                {
                                    dtFullChild.Columns.Remove("SubTotal1Description");
                                }
                                PdfTable myPdfChild = myPdfDocument.NewTable(FontRegular, dtFullChild.Rows.Count, dtFullChild.Columns.Count, 1);
                                myPdfChild.ImportDataTable(dtFullChild);
                                myPdfChild.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfChild.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfChild.SetColumnsWidth(colChdHeaderWidths);
                                myPdfChild.HeadersRow.SetFont(fontMedium);
                                myPdfChild.HeadersRow.SetBackgroundColor(Color.White);
                                myPdfChild.HeadersRow.SetForegroundColor(Color.White);
                                for (int i = 0; i < dtNew.Rows.Count; i++)
                                {
                                    foreach (PdfCell pcll in myPdfChild.Rows[i].Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                        }
                                    }
                                }
                                for (int i = 0; i < dtFullChild.Rows.Count; i++)
                                {
                                    foreach (PdfCell pcll in myPdfChild.Rows[i].Cells)
                                    {
                                        if (pcll.Content.ToString() == "SKIP")
                                        {
                                            pcll.SetBackgroundColor(Color.White);
                                            pcll.SetForegroundColor(Color.White);
                                        }
                                    }
                                }
                                //format child datatable
                                //Set Child  Formats
                                for (int i = 0; i < childIndexes.Length; i++)
                                {
                                    string[] arrformats = (string[])htbPFormats[childIndexes[i]];
                                    foreach (string val in arrformats)
                                    {
                                        string[] strvalues = val.Split('~');
                                        string strformat = string.Empty;
                                        if (strvalues.Length > 1)
                                        {
                                            strformat = strvalues[0];
                                        }
                                        else
                                        {
                                            strformat = strvalues[0];
                                        }
                                        switch (strformat)
                                        {
                                            case "pFont":
                                                {
                                                    myPdfChild.Rows[i].SetFont(SumRowFont);
                                                    break;
                                                }
                                            case "pUnderLine":
                                                {
                                                    myPdfChild.Rows[i].SetFont(FontUnderline);
                                                    break;
                                                }
                                            case "pBox":
                                                {
                                                    for (int clCnt = 1; clCnt < myPdfChild.Rows[i].Cells.Count; clCnt++)
                                                    {
                                                        PdfTablePage newPdfTablePage = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                    break;
                                                }
                                            case "pLnSkip":
                                                {
                                                    foreach (PdfCell pcll in myPdfChild.Rows[i].Cells)
                                                    {
                                                        if (pcll.Content.ToString() == "SKIP")
                                                        {
                                                            pcll.SetBackgroundColor(Color.White);
                                                            pcll.SetForegroundColor(Color.White);
                                                        }
                                                    }
                                                    break;
                                                }
                                            case "RAlign":
                                                {
                                                    myPdfChild.Cell(i, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfChild.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (strvalues.Length > 2)
                                                    {
                                                        //Date Range Total:
                                                        if (dtFullChild.Rows[dtFullChild.Rows.Count - 2][dtFullChild.Columns.Count - 3].ToString() == "Date Range Total:")
                                                        {
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2][dtFullChild.Columns.Count - 3].ColSpan = 2;
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2].SetFont(GridHeaderFont);
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 2].SetBackgroundColor(Color.Gainsboro);
                                                            myPdfChild.Cell(dtFullChild.Rows.Count - 2, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                        }
                                                        //Ending Balance: 
                                                        if (dtFullChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns.Count - 3].ToString() == "Ending Balance:")
                                                        {
                                                            //myPdfTable.HeadersRow.MergeCells();
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 1][dtFullChild.Columns.Count - 3].ColSpan = 2;
                                                            //SET SUM ROW FONT
                                                            myPdfChild.Rows[dtFullChild.Rows.Count - 1].SetFont(GridHeaderFont);
                                                            myPdfChild.Cell(dtFullChild.Rows.Count - 1, Convert.ToInt32(strvalues[1].ToString()) - 1).CellContentAlignment(ContentAlignment.MiddleRight);
                                                        }
                                                    }
                                                    break;
                                                }
                                            default:
                                                break;
                                        }
                                    }
                                }
                                //Right aligned for missing new entry monthwise rows
                                if (childIndexes.Length != dtFullChild.Rows.Count)
                                {
                                    int colsum = dtFullChild.Columns[strSumColumn].Ordinal;
                                    for (int i = childIndexes.Length; i < dtFullChild.Rows.Count; i++)
                                    {
                                        myPdfChild.Cell(i, colsum).CellContentAlignment(ContentAlignment.MiddleRight);
                                    }
                                }
                                while (!myPdfChild.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 8 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormatPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //
                                        posY = currentYPos + 25;
                                        currentYPos = posY + 9 + ((myPdfChildHeaderFormatPage.Area.PosY - posY) / 2);
                                        posY = currentYPos;
                                        newPdfPage.Add(myPdfChildHeaderFormatPage);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage2 = myPdfChild.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                    newPdfPage.Add(newPdfTablePage2);
                                    currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                }
                            }
                        } //dtchild close
                    }
                }
                // Grand Totals for BalanceForward,DateRange,EndingBalance
                #region GrandTotals
                DataTable dtTotals = new DataTable();
                if (dtChild != null)
                {
                    for (int col = 0; col < dtChild.Columns.Count; col++)
                    {
                        switch (dtChild.Columns[col].ColumnName)
                        {
                            case "TrxID":
                            case "Link1":
                            case "SubTotal1":
                            case "SubTotal1Description":
                                {
                                    break;
                                }
                            default:
                                {
                                    dtTotals.Columns.Add(dtChild.Columns[col].ColumnName);
                                    break;
                                }
                        }
                    }
                    //Geting calculated grand totals from hashtable
                    string strgrandtotal;
                    string[] strGrandSumCols ={ "BalanceForward", "DateRange", "EndingBalance" };
                    if (htGrandTotalSum.Count > 0)
                    {
                        for (int i = 0; i < strGrandSumCols.Length; i++)
                        {
                            //Convert to Decimal format
                            strgrandtotal = clsReportsUICore.ConvertToCurrencyFormat(htGrandTotalSum[strGrandSumCols[i].ToString()].ToString());

                            switch (strGrandSumCols[i].ToString())
                            {
                                case "BalanceForward":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Balance Forward";
                                        break;

                                    }
                                case "DateRange":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Date Range";
                                        break;
                                    }

                                case "EndingBalance":
                                    {
                                        dtTotals.Rows.Add(dtTotals.NewRow());
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 2].ColumnName] = strgrandtotal;
                                        dtTotals.Rows[dtTotals.Rows.Count - 1][dtTotals.Columns[dtTotals.Columns.Count - 5].ColumnName] = "Total Ending Balance";
                                        break;
                                    }
                            }

                        }
                    }
                    PdfTable myPdfGrand = myPdfDocument.NewTable(FontRegular, dtTotals.Rows.Count, dtTotals.Columns.Count, 1);
                    myPdfGrand.ImportDataTable(dtTotals);
                    myPdfGrand.HeadersRow.SetFont(fontSumTotals);
                    myPdfGrand.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfGrand.HeadersRow.SetBackgroundColor(Color.White);
                    myPdfGrand.HeadersRow.SetForegroundColor(Color.White);
                    myPdfGrand.SetColumnsWidth(colChdHeaderWidths);
                    foreach (PdfCell pcell in myPdfGrand.Rows[0].Cells)
                    {
                        if (!string.IsNullOrEmpty(pcell.Content.ToString()))
                        {
                            pcell.SetContentAlignment(ContentAlignment.MiddleRight);
                            pcell.SetFont(SumRowFont1);
                        }
                    }
                    //Description 1st row colspan
                    for (int i = 0; i < dtTotals.Rows.Count; i++)
                    {
                        //BalanceForward DateRange  EndingBalance
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].ColSpan = 3;
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].CellContentAlignment(ContentAlignment.MiddleRight);
                        //set Font
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 5].SetFont(SumRowFont);
                        //Amount colspan
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].ColSpan = 2;
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].SetFont(SumRowFont);
                        //Amount Right alignment
                        myPdfGrand.Rows[i][dtTotals.Columns.Count - 2].CellContentAlignment(ContentAlignment.MiddleRight);
                    }
                    while (!myPdfGrand.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 10;
                        }
                        if (myPdfDocument.PageHeight - posY < 200)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage2 = myPdfGrand.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                        newPdfPage.Add(newPdfTablePage2);
                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                    }
                } //dtchild null closed
                #endregion
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 641
        public void ReportStyle641(DataTable[] dtAll, DataTable dtHeader, ArrayList ArrhtPFormats, bool PLayout, ArrayList ArrArrWidths, ArrayList ArrHtColNameValues, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 200;
                }
                if (dtAll.Length > 0)
                {
                    string imgpath = PDFImagePath();
                    PdfImage LogoImage = null;

                    Font fontHeader1 = new Font("Verdana", 10, FontStyle.Bold);
                    Font fontHeader2 = new Font("Verdana", 8, FontStyle.Bold);
                    Font fontHeader3 = new Font("Verdana", 7, FontStyle.Bold);
                    Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                    ArrayList alRemovedColumns = new ArrayList();
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }
                    newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);


                    for (int dtCnt = 0; dtCnt < dtAll.Length; dtCnt++)
                    {
                        switch (dtAll[dtCnt].TableName)
                        {
                            case "ReportDetail":
                                {
                                    DataTable dtParentTotals = new DataTable();
                                    #region Table 0
                                    for (int rws = 0; rws <= dtAll[dtCnt].Rows.Count; rws++)
                                    {
                                        double _Totals = 0;
                                        DataRow[] foundRows = null;
                                        DataRow[] foundParentTtlRws = null;
                                        string strLink1 = string.Empty;
                                        string strLink1Name = string.Empty;
                                        if (dtAll[dtCnt].Columns.Contains("Link1"))
                                        {
                                            foundRows = dtAll[dtCnt].Select("Link1 ='" + dtAll[dtCnt].Rows[0]["Link1"].ToString() + "'");
                                            foundParentTtlRws = dtAll[dtCnt + 3].Select("Link1 ='" + dtAll[dtCnt].Rows[0]["Link1"].ToString() + "'");
                                            strLink1 = dtAll[dtCnt].Rows[0]["Link1"].ToString();
                                            strLink1Name = dtAll[dtCnt].Rows[0]["Caption"].ToString();
                                            if (foundParentTtlRws.Length > 0)
                                            {
                                                int drFndParTttls = 0;
                                                for (; drFndParTttls < foundParentTtlRws.Length; drFndParTttls++)
                                                {
                                                    int rowIndexTttls = dtAll[dtCnt + 3].Rows.IndexOf(foundParentTtlRws[drFndParTttls]);
                                                    dtParentTotals = new DataTable();
                                                    if (drFndParTttls == 0)
                                                    {
                                                        dtParentTotals = GetFilteredDataRows1(dtAll, dtCnt + 3, foundParentTtlRws, rowIndexTttls);
                                                    }
                                                    else
                                                    {
                                                        dtParentTotals = GetFilteredDataRows1(dtAll, dtCnt + 3, foundParentTtlRws, drFndParTttls);
                                                    }
                                                    _Totals = _Totals + Convert.ToDouble(dtParentTotals.Rows[0]["EndBal"].ToString());
                                                }
                                            }
                                            //
                                            string amtTotals = clsReportsUICore.ConvertToCurrencyFormat(_Totals.ToString());
                                            dtParentTotals.Rows[0]["EndBal"] = amtTotals;
                                            //
                                            if (dtParentTotals.Columns.Contains("TrxID"))
                                            {
                                                dtParentTotals.Columns.Remove("TrxID");
                                            }
                                            if (dtParentTotals.Columns.Contains("Link1"))
                                            {
                                                dtParentTotals.Columns.Remove("Link1");
                                            }
                                            if (dtParentTotals.Columns.Contains("Link2"))
                                            {
                                                dtParentTotals.Columns.Remove("Link2");
                                            }
                                            if (dtParentTotals.Columns.Contains("Link3"))
                                            {
                                                dtParentTotals.Columns.Remove("Link3");
                                            }
                                            dtParentTotals.Columns.Add("Col");
                                            dtParentTotals.Columns["Col"].SetOrdinal(0);
                                            dtParentTotals.Rows[0]["Col"] = "Total " + strLink1Name;
                                            if (foundRows.Length > 0)
                                            {
                                                int rowIndex = dtAll[dtCnt].Rows.IndexOf(foundRows[0]);
                                                DataTable dtNew = GetFilteredDataRows(dtAll, dtCnt, foundRows, rowIndex);
                                                int[] widths;
                                                int[] colParentWidths;
                                                dtNew = GetArrayWidths(ArrArrWidths, 0, 2, alRemovedColumns, dtNew, out widths, out colParentWidths);
                                                //
                                                PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(fontHeader1, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                                                myPdfTableHeaderFormat.ImportDataTable(dtNew);
                                                myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                                                myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                myPdfTableHeaderFormat.SetColumnsWidth(colParentWidths);
                                                myPdfTableHeaderFormat.HeadersRow.SetFont(fontHeader1);
                                                myPdfTableHeaderFormat.HeadersRow.SetBackgroundColor(Color.White);
                                                myPdfTableHeaderFormat.HeadersRow.SetForegroundColor(Color.White);
                                                //
                                                posY = currentYPos + 15;
                                                currentYPos = posY;
                                                double tmpPosX = 20;
                                                //
                                                PdfTablePage myPdfHeaderFormattedPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, tmpPosX, posY, width, (height - (posY))));
                                                newPdfPage.Add(myPdfHeaderFormattedPage);
                                                //
                                                #region Table 1
                                                if (dtAll[dtCnt + 1].Rows.Count > 0)
                                                {
                                                    DataRow[] dtChild1FoundRows = null;
                                                    DataTable dtChild1 = new DataTable();
                                                    //
                                                    double amts = 0;
                                                    for (int rws1 = 0; rws1 < dtAll[dtCnt + 1].Rows.Count; rws1++)
                                                    {
                                                        if ((dtAll[dtCnt + 1].Columns.Contains("Link1")) && (dtAll[dtCnt + 1].Columns.Contains("Link2")))
                                                        {
                                                            dtChild1FoundRows = dtAll[dtCnt + 1].Select("Link1 ='" + strLink1 + "'");
                                                            string strLink2 = string.Empty;
                                                            string strName = string.Empty;
                                                            if (dtChild1FoundRows.Length > 0)
                                                            {
                                                                int drFoundRws = 0;
                                                                for (; drFoundRws < dtChild1FoundRows.Length; drFoundRws++)
                                                                {
                                                                    strLink2 = dtAll[dtCnt + 1].Rows[rws1]["Link2"].ToString();
                                                                    strName = dtAll[dtCnt + 1].Rows[rws1]["Caption"].ToString();
                                                                    int rowIndex1 = dtAll[dtCnt + 1].Rows.IndexOf(dtChild1FoundRows[drFoundRws]);
                                                                    dtChild1 = new DataTable();
                                                                    if (drFoundRws == 0)
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, rowIndex1);
                                                                    }
                                                                    else
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, drFoundRws);
                                                                    }
                                                                    //
                                                                    if (dtChild1.Columns.Contains("EndBal"))
                                                                    {
                                                                        dtChild1.Columns.Remove("EndBal");
                                                                    }
                                                                    widths = null;
                                                                    colParentWidths = null;
                                                                    alRemovedColumns = new ArrayList();
                                                                    dtChild1 = GetArrayWidths(ArrArrWidths, 1, 3, alRemovedColumns, dtChild1, out widths, out colParentWidths);
                                                                    //
                                                                    PdfTable myPdfChild1 = myPdfDocument.NewTable(fontHeader2, dtChild1.Rows.Count, dtChild1.Columns.Count, 1);
                                                                    myPdfChild1.ImportDataTable(dtChild1);
                                                                    myPdfChild1.SetBorders(Color.Black, 1, BorderType.None);
                                                                    myPdfChild1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                    myPdfChild1.SetColumnsWidth(colParentWidths);
                                                                    myPdfChild1.HeadersRow.SetFont(fontHeader1);
                                                                    myPdfChild1.HeadersRow.SetBackgroundColor(Color.White);
                                                                    myPdfChild1.HeadersRow.SetForegroundColor(Color.White);
                                                                    //
                                                                    posX = 30;
                                                                    posX = posX + 5;
                                                                    while (!myPdfChild1.AllTablePagesCreated)
                                                                    {
                                                                        //Setting the Y position and if required creating new page
                                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                        {
                                                                            posY = 70;
                                                                            currentYPos = 70;
                                                                            newPdfPage.SaveToDocument();
                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                        }
                                                                        else
                                                                        {
                                                                            posY = currentYPos + 25;
                                                                        }
                                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                        {
                                                                            posY = 70;
                                                                            currentYPos = 70;
                                                                            newPdfPage.SaveToDocument();
                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                        }
                                                                        PdfTablePage myPdfChildPage1 = myPdfChild1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                                        newPdfPage.Add(myPdfChildPage1);
                                                                        currentYPos = myPdfChildPage1.Area.BottomLeftVertex.Y;
                                                                    }
                                                                    #region Table 2
                                                                    if (dtAll[dtCnt + 2].Rows.Count > 0)
                                                                    {
                                                                        DataRow[] dtChild2FoundRows = null;
                                                                        string strLink3 = string.Empty;
                                                                        DataTable dtAmount = new DataTable();
                                                                        DataTable dtChild2 = new DataTable();
                                                                        int dt2ColumnsCount = 0;
                                                                        for (int rws2 = 0; rws2 < dtAll[dtCnt + 2].Rows.Count; rws2++)
                                                                        {
                                                                            if ((dtAll[dtCnt + 2].Columns.Contains("Link1")) && (dtAll[dtCnt + 2].Columns.Contains("Link2")))
                                                                            {
                                                                                dtChild2FoundRows = dtAll[dtCnt + 2].Select(" Link1 ='" + strLink1 + "' and Link2 ='" + strLink2 + "'");

                                                                                if (dtChild2FoundRows.Length > 0)
                                                                                {
                                                                                    for (int drRws2 = 0; drRws2 < dtChild2FoundRows.Length; drRws2++)
                                                                                    {
                                                                                        int rowIndex2 = dtAll[dtCnt + 2].Rows.IndexOf(dtChild2FoundRows[drRws2]);
                                                                                        DataRow dtChRow2 = dtChild2.NewRow();

                                                                                        if (dtChild2.Columns.Count == 0)
                                                                                        {
                                                                                            for (int x = 0; x < dtAll[dtCnt + 2].Columns.Count; x++)
                                                                                            {
                                                                                                dtChild2.Columns.Add(dtAll[dtCnt + 2].Columns[x].ColumnName);
                                                                                            }
                                                                                            dt2ColumnsCount = dtChild2.Columns.Count;
                                                                                        }
                                                                                        for (int i = 0; i < dtChild2.Columns.Count; i++)
                                                                                        {
                                                                                            if (dtAll[dtCnt + 2].Columns.Contains(dtChild2.Columns[i].ColumnName))
                                                                                            {
                                                                                                dtChRow2[i] = dtChild2FoundRows[drRws2].ItemArray[i].ToString();
                                                                                            }
                                                                                        }
                                                                                        strLink3 = dtAll[dtCnt + 2].Rows[0]["Link3"].ToString();
                                                                                        dtChild2.Rows.Add(dtChRow2);
                                                                                        //Delete Row
                                                                                        if (dtAll[dtCnt + 2].Rows.Count > 0)
                                                                                        {
                                                                                            dtAll[dtCnt + 2].Rows[0].Delete();
                                                                                        }
                                                                                        dtChild2.AcceptChanges();
                                                                                        dtChild2.TableName = dtAll[dtCnt + 2].TableName;
                                                                                        dtAmount = dtChild2.Copy();
                                                                                    }
                                                                                    #region Table 3
                                                                                    int endingBalanceordinal = 0;
                                                                                    if (dtAll[dtCnt + 3].Rows.Count > 0)
                                                                                    {
                                                                                        DataRow[] dtChild3FoundRows = null;
                                                                                        for (int rws3 = 0; rws3 < dtAmount.Rows.Count; rws3++)
                                                                                        {
                                                                                            strLink3 = dtAmount.Rows[rws3]["Link3"].ToString();
                                                                                            if ((dtAll[dtCnt + 3].Columns.Contains("Link1")) && (dtAll[dtCnt + 3].Columns.Contains("Link2")) && (dtAll[dtCnt + 3].Columns.Contains("Link3")))
                                                                                            {
                                                                                                dtChild3FoundRows = dtAll[dtCnt + 3].Select("Link1 ='" + strLink1 + "' and Link2 ='" + strLink2 + "' and Link3 ='" + strLink3 + "'");
                                                                                                if (dtChild3FoundRows.Length > 0)
                                                                                                {
                                                                                                    for (int drrws3 = 0; drrws3 < dtChild3FoundRows.Length; drrws3++)
                                                                                                    {
                                                                                                        int rowIndex3 = dtAll[dtCnt + 3].Rows.IndexOf(dtChild3FoundRows[drrws3]);
                                                                                                        DataTable dtChild3 = new DataTable();
                                                                                                        if (drrws3 == 0)
                                                                                                        {
                                                                                                            dtChild3 = GetFilteredDataRows(dtAll, dtCnt + 3, dtChild3FoundRows, rowIndex3);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            dtChild3 = GetFilteredDataRows(dtAll, dtCnt + 3, dtChild3FoundRows, drrws3);
                                                                                                        }
                                                                                                        if (!dtAmount.Columns.Contains("EndBal"))
                                                                                                        {
                                                                                                            dtAmount.Columns.Add("EndBal");
                                                                                                        }
                                                                                                        if (!dtChild1.Columns.Contains("EndBal"))
                                                                                                        {
                                                                                                            dtChild1.Columns.Add("EndBal");
                                                                                                        }
                                                                                                        foreach (DataColumn dc in dtChild3.Columns)
                                                                                                        {
                                                                                                            switch (dc.ColumnName)
                                                                                                            {
                                                                                                                case "EndBal":
                                                                                                                    {
                                                                                                                        amts = amts + Convert.ToDouble(dtChild3.Rows[0][dc.ColumnName].ToString());
                                                                                                                        string totamt = clsReportsUICore.ConvertToCurrencyFormat(dtChild3.Rows[0][dc.ColumnName].ToString());
                                                                                                                        dtAmount.Rows[rws3][dc.ColumnName] = totamt;
                                                                                                                        endingBalanceordinal = dc.Ordinal;
                                                                                                                        break;
                                                                                                                    }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if (!dtAmount.Columns.Contains("EndBal"))
                                                                                                    {
                                                                                                        dtAmount.Columns.Add("EndBal");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        posX = posX + 10;
                                                                                        if (dtChild1.Columns.Contains("EndBal"))
                                                                                        {
                                                                                            if (dtChild1.Columns.Count > 0)
                                                                                            {
                                                                                                string totAmt = clsReportsUICore.ConvertToCurrencyFormat(amts.ToString());
                                                                                                if (!string.IsNullOrEmpty(totAmt))
                                                                                                {
                                                                                                    dtChild1.Rows[0]["EndBal"] = totAmt;
                                                                                                    dtChild1.Rows[0][0] = "Total " + strName;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if (!dtChild1.Columns.Contains("EndBal"))
                                                                                    {
                                                                                        if (dtChild1.Columns.Count > 0)
                                                                                        {
                                                                                            dtChild1.Rows[0][0] = "Total " + strName;
                                                                                        }
                                                                                    }

                                                                                    #endregion
                                                                                    int[] ebwidths = (int[])ArrArrWidths[3];
                                                                                    int[] childWidths = (int[])ArrArrWidths[2];
                                                                                    int[] ebwidths1 = new int[childWidths.Length + 1];
                                                                                    int ebLength = ebwidths[endingBalanceordinal];
                                                                                    for (int il = 0; il < ebwidths1.Length; il++)
                                                                                    {
                                                                                        switch (il.ToString())
                                                                                        {
                                                                                            case "5":
                                                                                                {
                                                                                                    ebwidths1[il] = ebLength;
                                                                                                    break;
                                                                                                }
                                                                                            default:
                                                                                                {
                                                                                                    ebwidths1[il] = ebwidths[il];
                                                                                                    break;
                                                                                                }
                                                                                        }
                                                                                    }
                                                                                    ArrArrWidths.RemoveAt(3);
                                                                                    ArrArrWidths.Add(ebwidths1);
                                                                                    widths = null;
                                                                                    colParentWidths = null;
                                                                                    alRemovedColumns = new ArrayList();
                                                                                    dtAmount = GetArrayWidths(ArrArrWidths, 3, 4, alRemovedColumns, dtAmount, out widths, out colParentWidths);
                                                                                    //
                                                                                    PdfTable myPdfChild3 = myPdfDocument.NewTable(FontRegular, dtAmount.Rows.Count, dtAmount.Columns.Count, 1);
                                                                                    myPdfChild3.ImportDataTable(dtAmount);
                                                                                    myPdfChild3.SetBorders(Color.Black, 1, BorderType.None);
                                                                                    myPdfChild3.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                    myPdfChild3.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                                    myPdfChild3.SetColumnsWidth(colParentWidths);
                                                                                    myPdfChild3.HeadersRow.SetFont(fontHeader1);
                                                                                    myPdfChild3.HeadersRow.SetBackgroundColor(Color.White);
                                                                                    myPdfChild3.HeadersRow.SetForegroundColor(Color.White);
                                                                                    for (int prw = 0; prw < myPdfChild3.Rows.Length; prw++)
                                                                                    {
                                                                                        foreach (DataColumn dc in dtAmount.Columns)
                                                                                        {
                                                                                            switch (dc.ColumnName)
                                                                                            {
                                                                                                case "TrxID":
                                                                                                case "Link1":
                                                                                                case "Link2":
                                                                                                case "Link3":
                                                                                                    {
                                                                                                        myPdfChild3.Rows[prw][dc.Ordinal].SetBackgroundColor(Color.White);
                                                                                                        myPdfChild3.Rows[prw][dc.Ordinal].SetForegroundColor(Color.White);
                                                                                                        myPdfChild3.HeadersRow[dc.Ordinal].SetForegroundColor(Color.White);
                                                                                                        myPdfChild3.HeadersRow[dc.Ordinal].SetBackgroundColor(Color.White);
                                                                                                        break;
                                                                                                    }
                                                                                                case "EndBal":
                                                                                                    {
                                                                                                        myPdfChild3.Rows[prw][dc.Ordinal].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                                                        myPdfChild3.Rows[prw][dc.Ordinal].SetFont(fontSumTotals);
                                                                                                        break;
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    while (!myPdfChild3.AllTablePagesCreated)
                                                                                    {
                                                                                        //Setting the Y position and if required creating new page
                                                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            posY = currentYPos;
                                                                                        }
                                                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                        }
                                                                                        PdfTablePage newPdfTablePage3 = myPdfChild3.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width - 200, height - posY));
                                                                                        newPdfPage.Add(newPdfTablePage3);
                                                                                        currentYPos = newPdfTablePage3.Area.BottomLeftVertex.Y;
                                                                                    }
                                                                                    //
                                                                                    PdfTable myPdfTotalChild1 = myPdfDocument.NewTable(fontHeader2, dtChild1.Rows.Count, dtChild1.Columns.Count, 1);
                                                                                    myPdfTotalChild1.ImportDataTable(dtChild1);
                                                                                    myPdfTotalChild1.SetBorders(Color.Black, 1, BorderType.None);
                                                                                    myPdfTotalChild1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                    myPdfTotalChild1.HeadersRow.SetFont(fontHeader1);
                                                                                    myPdfTotalChild1.HeadersRow.SetBackgroundColor(Color.White);
                                                                                    myPdfTotalChild1.HeadersRow.SetForegroundColor(Color.White);
                                                                                    //
                                                                                    foreach (DataColumn dc in dtChild1.Columns)
                                                                                    {
                                                                                        switch (dc.ColumnName)
                                                                                        {
                                                                                            case "EndBal":
                                                                                                {
                                                                                                    myPdfTotalChild1.Rows[0][dc.Ordinal].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                                                    break;
                                                                                                }
                                                                                        }
                                                                                    }
                                                                                    while (!myPdfTotalChild1.AllTablePagesCreated)
                                                                                    {
                                                                                        //Setting the Y position and if required creating new page
                                                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            posY = currentYPos;
                                                                                        }
                                                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                        }
                                                                                        PdfTablePage myPdfTotalChildPage1 = myPdfTotalChild1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width - 200, height - posY));
                                                                                        newPdfPage.Add(myPdfTotalChildPage1);
                                                                                        currentYPos = myPdfTotalChildPage1.Area.BottomLeftVertex.Y;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion
                                            }
                                            //PdfParent Totals
                                            //
                                            PdfTable myPdfParentTotals = myPdfDocument.NewTable(fontHeader1, dtParentTotals.Rows.Count, dtParentTotals.Columns.Count, 1);
                                            myPdfParentTotals.ImportDataTable(dtParentTotals);
                                            myPdfParentTotals.SetBorders(Color.Black, 1, BorderType.None);
                                            myPdfParentTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfParentTotals.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                            myPdfParentTotals.HeadersRow.SetFont(fontHeader1);
                                            myPdfParentTotals.HeadersRow.SetBackgroundColor(Color.White);
                                            myPdfParentTotals.HeadersRow.SetForegroundColor(Color.White);
                                            //
                                            myPdfParentTotals.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleRight);
                                            while (!myPdfParentTotals.AllTablePagesCreated)
                                            {
                                                //Setting the Y position and if required creating new page
                                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                else
                                                {
                                                    posY = currentYPos;
                                                }
                                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                PdfTablePage myPdfParentTotPage = myPdfParentTotals.CreateTablePage(new PdfArea(myPdfDocument, 20, posY, width - 175, height - posY));
                                                newPdfPage.Add(myPdfParentTotPage);
                                                currentYPos = myPdfParentTotPage.Area.BottomLeftVertex.Y;
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                break;
                        }
                        newPdfPage.SaveToDocument();
                        CreatePDFDocument(fileName);
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }

        private static DataTable GetArrayWidths(ArrayList ArrArrWidths, int num, int removeLength, ArrayList alRemovedColumns, DataTable dtNew, out int[] widths, out int[] colParentWidths)
        {
            int colstart = 0;
            widths = (int[])ArrArrWidths[num];
            colParentWidths = new int[widths.Length - removeLength];
            if (dtNew.Columns.Contains("TrxID"))
            {
                alRemovedColumns.Add(dtNew.Columns["TrxID"].Ordinal);
            }
            if (dtNew.Columns.Contains("Link1"))
            {
                alRemovedColumns.Add(dtNew.Columns["Link1"].Ordinal);
            }
            if (dtNew.Columns.Contains("Link2"))
            {
                alRemovedColumns.Add(dtNew.Columns["Link2"].Ordinal);
            }
            if (dtNew.Columns.Contains("Link3"))
            {
                alRemovedColumns.Add(dtNew.Columns["Link3"].Ordinal);
            }
            for (int ctr = 0; ctr < widths.Length; ctr++)
            {
                if (!alRemovedColumns.Contains(ctr))
                {
                    colParentWidths[colstart] = widths[ctr];
                    colstart++;
                }
            }
            //To Delete
            if (dtNew.Columns.Contains("TrxID"))
            {
                dtNew.Columns.Remove("TrxID");
            }
            if (dtNew.Columns.Contains("Link1"))
            {
                dtNew.Columns.Remove("Link1");
            }
            if (dtNew.Columns.Contains("Link2"))
            {
                dtNew.Columns.Remove("Link2");
            }
            if (dtNew.Columns.Contains("Link3"))
            {
                dtNew.Columns.Remove("Link3");
            }
            //
            return dtNew;
        }

        private static DataTable GetFilteredDataRows(DataTable[] dtAll, int dtCnt, DataRow[] foundRows, int rowIndex)
        {
            DataTable dtNew = new DataTable();
            DataRow dt2Row = dtNew.NewRow();
            if (dtNew.Columns.Count == 0)
            {
                for (int x = 0; x < dtAll[dtCnt].Columns.Count; x++)
                {
                    dtNew.Columns.Add(dtAll[dtCnt].Columns[x].ColumnName);
                }
            }
            for (int i = 0; i < dtNew.Columns.Count; i++)
            {
                dt2Row[i] = foundRows[rowIndex].ItemArray[i].ToString();
            }
            dtNew.Rows.Add(dt2Row);
            if (dtAll[dtCnt].Rows.Count > 0)
            {
                dtAll[dtCnt].Rows[0].Delete();
            }
            dtNew.AcceptChanges();
            dtNew.TableName = dtAll[dtCnt].TableName;
            return dtNew;
        }

        private static DataTable GetFilteredDataRows1(DataTable[] dtAll, int dtCnt, DataRow[] foundRows, int rowIndex)
        {
            DataTable dtNew = new DataTable();
            DataRow dt2Row = dtNew.NewRow();
            if (dtNew.Columns.Count == 0)
            {
                for (int x = 0; x < dtAll[dtCnt].Columns.Count; x++)
                {
                    dtNew.Columns.Add(dtAll[dtCnt].Columns[x].ColumnName);
                }
            }
            for (int i = 0; i < dtNew.Columns.Count; i++)
            {
                dt2Row[i] = foundRows[rowIndex].ItemArray[i].ToString();
            }
            dtNew.Rows.Add(dt2Row);
            //if (dtAll[dtCnt].Rows.Count > 0)
            //{
            //    dtAll[dtCnt].Rows[0].Delete();
            //}
            dtNew.AcceptChanges();
            dtNew.TableName = dtAll[dtCnt].TableName;
            return dtNew;
        }

        #endregion

        #region Report Style 652
        public void ReportStyle652(DataTable[] dt, DataTable dtHeader, Hashtable[] arrhtFormatModes, bool PLayout, int[][] arrallcolWidths, Hashtable[] ArrhtColNameValues, string fileName)
        {
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                pgHeight = 50;
                pgWidth = 200;
                //
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                //
                ArrayList alRemovedColumns = new ArrayList();
                Font fontHeader = new Font("Verdana", 10, FontStyle.Bold);
                Font fontMedium = new Font("Verdana", 8, FontStyle.Bold);
                Font fontSumTotals = new Font("Verdana", 8, FontStyle.Bold);
                Font fontGrid = new Font("Verdana", 7, FontStyle.Regular);
                //
                #region PDF Header
                DataTable dtFormattedHeader = new DataTable();
                foreach (DataColumn dc in dt[1].Columns)
                {
                    switch (dc.ColumnName)
                    {
                        case "Link1":
                        case "TrxID":
                            {
                                alRemovedColumns.Add(dc.Ordinal);
                                break;
                            }
                        default:
                            {
                                dtFormattedHeader.Columns.Add(dc.ColumnName);
                                break;
                            }
                    }
                }
                if (!dtFormattedHeader.Columns.Contains("Year"))
                {
                    dtFormattedHeader.Columns.Add("Year");
                }
                int colstart = 0;
                int[] colChdHeaderWidths = new int[arrallcolWidths[1].Length - 1];
                for (int ctr = 0; ctr < arrallcolWidths[1].Length; ctr++)
                {
                    if (!alRemovedColumns.Contains(ctr))
                    {
                        colChdHeaderWidths[colstart] = 30;
                        colstart++;
                    }
                }
                colChdHeaderWidths[colChdHeaderWidths.Length - 1] = 30;
                dtFormattedHeader.Rows.Add(dtFormattedHeader.NewRow());
                for (int col = 0; col < dtFormattedHeader.Columns.Count; col++)
                {
                    dtFormattedHeader.Rows[dtFormattedHeader.Rows.Count - 1][dtFormattedHeader.Columns[col].ToString()] = "SKIP";
                }
                PdfTable pdfMainHeader = myPdfDocument.NewTable(FontRegular, dtFormattedHeader.Rows.Count, dtFormattedHeader.Columns.Count, 1);
                pdfMainHeader.ImportDataTable(dtFormattedHeader);
                pdfMainHeader.SetBorders(Color.Black, 1, BorderType.None);
                pdfMainHeader.SetContentAlignment(ContentAlignment.MiddleLeft);
                pdfMainHeader.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                pdfMainHeader.SetColumnsWidth(colChdHeaderWidths);
                pdfMainHeader.HeadersRow.SetFont(fontHeader);
                //
                foreach (PdfCell pHeaderCll in pdfMainHeader.HeadersRow.Cells)
                {
                    string labelName = pHeaderCll.Content.ToString();
                    switch (labelName)
                    {
                        case "AccountName":
                            {
                                pHeaderCll.SetBackgroundColor(Color.White);
                                pHeaderCll.SetForegroundColor(Color.White);
                                break;
                            }
                        case "Year":
                            {
                                break;
                            }
                        default:
                            {
                                pHeaderCll.SetContent(ArrhtColNameValues[1][labelName].ToString());
                                break;
                            }
                    }
                }
                foreach (PdfCell pskipCll in pdfMainHeader.Cells)
                {
                    string labelValue = pskipCll.Content.ToString();
                    switch (labelValue)
                    {
                        case "SKIP":
                            {
                                pskipCll.SetBackgroundColor(Color.White);
                                pskipCll.SetForegroundColor(Color.White);
                                break;
                            }
                    }
                }
                //
                posY = currentYPos + 25;
                currentYPos = posY;
                //
                pdfMainHeaderPage = pdfMainHeader.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, (height - (posY))));
                newPdfPage.Add(pdfMainHeaderPage);
                //
                double xPos = pdfMainHeaderPage.CellArea(pdfMainHeader.HeadersRow.Index, 0).TopLeftVertex.X;
                double yPos = pdfMainHeaderPage.CellArea(pdfMainHeader.HeadersRow.Index, 0).TopLeftVertex.Y;
                //
                Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos));
                Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos));
                pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                newPdfPage.Add(pdfLineBrk);
                #endregion
                #region Parent Table
                DataTable dtParent = dt[0];
                if (dtParent.Rows.Count > 0)
                {
                    Hashtable htTotRevenues = new Hashtable();
                    Hashtable htTotProdCosts = new Hashtable();
                    Hashtable htTotGrossProfit = new Hashtable();
                    Hashtable htTotOtherCosts = new Hashtable();
                    Hashtable htTotOtherIncome = new Hashtable();
                    Hashtable htTotNetIncomeBefTaxes = new Hashtable();
                    Hashtable htTotTaxes = new Hashtable();
                    Hashtable htTotNetIncome = new Hashtable();
                    //
                    int dtCnt = 0;
                    for (; dtCnt <= dtParent.Rows.Count; dtCnt++)
                    {
                        string LinkID = dtParent.Rows[0]["Link1"].ToString();
                        DataTable dtNew = new DataTable();
                        DataRow[] foundChildRows = null;
                        DataRow[] foundParentRows = null;
                        //
                        if (!string.IsNullOrEmpty(LinkID))
                        {
                            switch (LinkID)
                            {
                                #region CASE 10
                                case "10":
                                    {
                                        foundChildRows = dt[1].Select("Link1='" + LinkID + "'");
                                        if (foundChildRows.Length > 0)
                                        {
                                            for (int cnt = 0; cnt < foundChildRows.Length; cnt++)
                                            {
                                                double TotalAmount = 0;
                                                int rwIndex = dt[1].Rows.IndexOf(foundChildRows[cnt]);
                                                DataTable dt1 = dt[1];
                                                dtNew = GetFilteredRowsToDT(dt1, dtParent, dtCnt, foundChildRows, 0);
                                                dtNew.Rows[0]["AccountName"] = dtParent.Rows[dtCnt]["Caption"].ToString();
                                                //
                                                if (dtNew.Rows.Count > 0)
                                                {
                                                    string[] grandFormats = (string[])arrhtFormatModes[1][rwIndex];
                                                    foreach (string val in grandFormats)
                                                    {
                                                        string[] strvalues = val.Split('~');
                                                        string strformat = string.Empty;
                                                        string childTrxID = string.Empty;
                                                        string strCustom = string.Empty;
                                                        string strTotalAmount = string.Empty;

                                                        if (strvalues.Length > 1)
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        else
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        switch (strformat)
                                                        {
                                                            case "RAlign":
                                                                {
                                                                    if (strvalues.Length > 1)
                                                                    {
                                                                        strCustom = string.Empty;
                                                                        decimal amount;
                                                                        string amt = string.Empty;
                                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                                        string colName = dtNew.Columns[colNo].ColumnName.Trim().ToString();
                                                                        if (!htTotRevenues.ContainsKey(colName))
                                                                        {
                                                                            Decimal.TryParse(foundChildRows[cnt][colNo].ToString(), out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotRevenues.Add(colName, amt);
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            TotalAmount = Convert.ToDouble(htTotRevenues[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotRevenues[colName] = amt;
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                        }
                                                    }
                                                }
                                                string amts = clsReportsUICore.ConvertToCurrencyFormat(TotalAmount.ToString());
                                                dtNew.Columns.Add("Year");
                                                dtNew.Rows[dtNew.Rows.Count - 1]["Year"] = amts;
                                                if (dtNew.Columns.Contains("TrxID"))
                                                {
                                                    dtNew.Columns.Remove("TrxID");
                                                }
                                                if (dtNew.Columns.Contains("Link1"))
                                                {
                                                    dtNew.Columns.Remove("Link1");
                                                }
                                                FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, true);

                                                if (dtParent.Rows.Count > 0)
                                                {
                                                    dtParent.Rows[0].Delete();
                                                }
                                            }
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 20
                                case "20":
                                    {
                                        foundParentRows = dtParent.Select("Link1='" + dtParent.Rows[0]["Link1"].ToString() + "' ");
                                        if (foundParentRows.Length > 0)
                                        {
                                            foreach (DataColumn dc in dt[1].Columns)
                                            {
                                                switch (dc.ColumnName)
                                                {
                                                    case "TrxID":
                                                    case "Link1":
                                                        {
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            dtNew.Columns.Add(dc.ColumnName.ToString());
                                                            break;
                                                        }
                                                }
                                            }
                                            dtNew.Columns.Add("Year");
                                            dtNew.Rows.Add(dtNew.NewRow());
                                            dtNew.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        }
                                        if (dtNew.Rows.Count > 0)
                                        {
                                            FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, true);
                                            foreach (PdfCell pcell in myPdfTable.Cells)
                                            {
                                                switch (pcell.Content.ToString())
                                                {
                                                    case "PRODUCTION COSTS":
                                                        {
                                                            pcell.SetFont(fontMedium);
                                                            pcell.ColSpan = 2;
                                                            break;
                                                        }
                                                }
                                            }
                                        }
                                        foundChildRows = dt[1].Select("Link1='" + LinkID + "'");
                                        DataTable dt1 = dt[1];
                                        if (foundChildRows.Length > 0)
                                        {
                                            for (int cnt = 0; cnt < foundChildRows.Length; cnt++)
                                            {
                                                double TotalAmount = 0;
                                                int rwIndex = dt[1].Rows.IndexOf(foundChildRows[cnt]);
                                                dtNew = GetFilteredRowsToDT(dt1, dtParent, dtCnt, foundChildRows, cnt);
                                                //
                                                if (dtNew.Rows.Count > 0)
                                                {
                                                    string[] grandFormats = (string[])arrhtFormatModes[1][rwIndex];
                                                    foreach (string val in grandFormats)
                                                    {
                                                        string[] strvalues = val.Split('~');
                                                        string strformat = string.Empty;
                                                        string childTrxID = string.Empty;
                                                        string strCustom = string.Empty;
                                                        string strTotalAmount = string.Empty;
                                                        if (strvalues.Length > 1)
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        else
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        switch (strformat)
                                                        {
                                                            case "RAlign":
                                                                {
                                                                    if (strvalues.Length > 1)
                                                                    {
                                                                        strCustom = string.Empty;
                                                                        decimal amount;
                                                                        string amt = string.Empty;
                                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                                        string colName = dtNew.Columns[colNo].ColumnName.Trim().ToString();
                                                                        if (!htTotProdCosts.ContainsKey(colName))
                                                                        {
                                                                            Decimal.TryParse(foundChildRows[cnt][colNo].ToString(), out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotProdCosts.Add(colName, amt);
                                                                            //TotalAmount = Convert.ToDouble(htTotProdCosts[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            TotalAmount = Convert.ToDouble(htTotProdCosts[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotProdCosts[colName] = amt;
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                        }
                                                    }
                                                    string amts = clsReportsUICore.ConvertToCurrencyFormat(TotalAmount.ToString());
                                                    dtNew.Columns.Add("Year");
                                                    dtNew.Rows[dtNew.Rows.Count - 1]["Year"] = amts;
                                                    if (dtNew.Columns.Contains("TrxID"))
                                                    {
                                                        dtNew.Columns.Remove("TrxID");
                                                    }
                                                    if (dtNew.Columns.Contains("Link1"))
                                                    {
                                                        dtNew.Columns.Remove("Link1");
                                                    }
                                                    FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, true);
                                                    for (int rws = 0; rws < dtNew.Rows.Count; rws++)
                                                    {
                                                        for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                                        {
                                                            myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                            if (rws == dtNew.Rows.Count - 1)
                                                            {
                                                                myPdfTable.Rows[rws][pCll].SetFont(SumRowFont);
                                                            }
                                                        }
                                                    }
                                                    if (dtParent.Rows.Count > 0)
                                                    {
                                                        dtParent.Rows[0].Delete();
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 30
                                case "30":
                                    {
                                        decimal revAmt = 0;
                                        decimal prodAmt = 0;
                                        decimal amount = 0;
                                        double TotalAmount = 0;
                                        //
                                        IDictionaryEnumerator enumRevenues = htTotRevenues.GetEnumerator();
                                        while (enumRevenues.MoveNext())
                                        {
                                            IDictionaryEnumerator enumProdCosts = htTotProdCosts.GetEnumerator();
                                            while (enumProdCosts.MoveNext())
                                            {
                                                if (htTotRevenues.Keys.Count > 0)
                                                {
                                                    if (!htTotGrossProfit.ContainsKey(enumRevenues.Key.ToString()))
                                                    {
                                                        if (enumProdCosts.Key.ToString().Trim() == enumRevenues.Key.ToString().Trim())
                                                        {
                                                            Decimal.TryParse(enumRevenues.Value.ToString(), out amount);
                                                            revAmt = amount;
                                                            Decimal.TryParse(enumProdCosts.Value.ToString(), out amount);
                                                            prodAmt = amount;
                                                            int gp = Convert.ToInt32(revAmt) - Convert.ToInt32(prodAmt);
                                                            string gpAmt = clsReportsUICore.ConvertToCurrencyFormat(gp.ToString());
                                                            htTotGrossProfit.Add(enumRevenues.Key, gpAmt);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        DataTable dtGP = new DataTable();
                                        for (int cols = 0; cols < dt[1].Columns.Count; cols++)
                                        {
                                            dtGP.Columns.Add(dt[1].Columns[cols].ColumnName.ToString());
                                        }
                                        if (dtGP.Columns.Contains("TrxID"))
                                        {
                                            dtGP.Columns.Remove("TrxID");
                                        }
                                        if (dtGP.Columns.Contains("Link1"))
                                        {
                                            dtGP.Columns.Remove("Link1");
                                        }
                                        dtGP.Rows.Add(dtGP.NewRow());
                                        foreach (DataColumn dc in dtGP.Columns)
                                        {
                                            if (htTotGrossProfit.ContainsKey(dc.ColumnName))
                                            {
                                                dtGP.Rows[0][dc.ColumnName] = htTotGrossProfit[dc.ColumnName.ToString()].ToString();
                                                TotalAmount = TotalAmount + Convert.ToDouble(htTotGrossProfit[dc.ColumnName.ToString()].ToString());
                                            }
                                        }
                                        string amts = clsReportsUICore.ConvertToCurrencyFormat(TotalAmount.ToString());
                                        dtGP.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        if (dtGP.Rows.Count > 0)
                                        {
                                            dtGP.Columns.Add("Year");
                                            dtGP.Rows[dtGP.Rows.Count - 1]["Year"] = amts;
                                            dtGP.Rows.Add(dtGP.NewRow());
                                            foreach (DataColumn dc in dtGP.Columns)
                                            {
                                                if (htTotGrossProfit.ContainsKey(dc.ColumnName))
                                                {
                                                    double perAmt = 0;
                                                    perAmt = Convert.ToDouble(htTotGrossProfit[dc.ColumnName].ToString()) / Convert.ToDouble(htTotRevenues[dc.ColumnName].ToString());
                                                    perAmt = perAmt * 100;
                                                    string amtper = clsReportsUICore.ConvertToCurrencyFormat(perAmt.ToString()) + "%";
                                                    dtGP.Rows[dtGP.Rows.Count - 1][dc.ColumnName] = amtper.ToString();
                                                }
                                            }
                                            FeedToPdfTable(LogoImage, dtGP, fontGrid, colChdHeaderWidths, false);
                                            for (int rws = 0; rws < dtGP.Rows.Count; rws++)
                                            {
                                                for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                                {
                                                    myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    if (rws == dtGP.Rows.Count - 1)
                                                    {
                                                        myPdfTable.Rows[rws][pCll].SetFont(SumRowFont);
                                                    }
                                                }
                                            }
                                        }
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                                #region  CASE 40
                                case "40":
                                    {
                                        foundParentRows = dtParent.Select("Link1='" + dtParent.Rows[0]["Link1"].ToString() + "' ");
                                        if (foundParentRows.Length > 0)
                                        {
                                            foreach (DataColumn dc in dt[1].Columns)
                                            {
                                                switch (dc.ColumnName)
                                                {
                                                    case "TrxID":
                                                    case "Link1":
                                                        {
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            dtNew.Columns.Add(dc.ColumnName.ToString());
                                                            break;
                                                        }
                                                }
                                            }
                                            dtNew.Columns.Add("Year");
                                            dtNew.Rows.Add(dtNew.NewRow());
                                            dtNew.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        }
                                        if (dtNew.Rows.Count > 0)
                                        {
                                            FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, true);
                                        }
                                        foundChildRows = dt[1].Select("Link1='" + LinkID + "'");
                                        if (foundChildRows.Length > 0)
                                        {
                                            DataTable dt1 = dt[1];
                                            DataTable dtFiltered = new DataTable();
                                            double totAmts = 0;
                                            for (int cnt = 0; cnt < foundChildRows.Length; cnt++)
                                            {
                                                double TotalAmount = 0;
                                                double rowWiseAmts = 0;
                                                int rwIndex = dt[1].Rows.IndexOf(foundChildRows[cnt]);
                                                dtNew = GetFilteredRowsToDT(dt1, dtParent, dtCnt, foundChildRows, cnt);
                                                //
                                                if (dtNew.Rows.Count > 0)
                                                {
                                                    if (dtFiltered.Columns.Count == 0)
                                                    {
                                                        foreach (DataColumn dc in dtNew.Columns)
                                                        {
                                                            dtFiltered.Columns.Add(dc.ColumnName);
                                                        }
                                                    }
                                                    dtFiltered.Rows.Add(dtFiltered.NewRow());
                                                    foreach (DataColumn dc in dtNew.Columns)
                                                    {
                                                        dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = dtNew.Rows[0][dc.ColumnName];
                                                    }
                                                    string[] grandFormats = (string[])arrhtFormatModes[1][rwIndex];
                                                    //
                                                    foreach (string val in grandFormats)
                                                    {
                                                        string[] strvalues = val.Split('~');
                                                        string strformat = string.Empty;
                                                        string childTrxID = string.Empty;
                                                        int childRowIndex = 0;
                                                        string strCustom = string.Empty;
                                                        string strTotalAmount = string.Empty;

                                                        if (strvalues.Length > 1)
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        else
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        switch (strformat)
                                                        {
                                                            case "RAlign":
                                                                {
                                                                    if (strvalues.Length > 1)
                                                                    {
                                                                        strCustom = string.Empty;
                                                                        decimal amount;
                                                                        string amt = string.Empty;
                                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                                        string colName = dtNew.Columns[colNo].ColumnName.Trim().ToString();
                                                                        if (!htTotOtherCosts.ContainsKey(colName))
                                                                        {
                                                                            Decimal.TryParse(foundChildRows[cnt][colNo].ToString(), out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotOtherCosts.Add(colName, amt);
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                                rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            TotalAmount = Convert.ToDouble(htTotOtherCosts[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotOtherCosts[colName] = amt;
                                                                            rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                        }
                                                    }
                                                }
                                                string amts = clsReportsUICore.ConvertToCurrencyFormat(rowWiseAmts.ToString());
                                                totAmts = totAmts + rowWiseAmts;
                                                //
                                                if (!dtFiltered.Columns.Contains("Year"))
                                                {
                                                    dtFiltered.Columns.Add("Year");
                                                }
                                                dtFiltered.Rows[dtFiltered.Rows.Count - 1]["Year"] = amts;
                                            }
                                            dtFiltered.Rows.Add(dtFiltered.NewRow());
                                            foreach (DataColumn dc in dtFiltered.Columns)
                                            {
                                                if (htTotOtherCosts.ContainsKey(dc.ColumnName))
                                                {
                                                    dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = htTotOtherCosts[dc.ColumnName.ToString()].ToString();
                                                }
                                            }
                                            if (dtFiltered.Rows.Count > 0)
                                            {
                                                string amts = clsReportsUICore.ConvertToCurrencyFormat(totAmts.ToString());
                                                dtFiltered.Rows[dtFiltered.Rows.Count - 1]["Year"] = amts;
                                                if (dtFiltered.Columns.Contains("TrxID"))
                                                {
                                                    dtFiltered.Columns.Remove("TrxID");
                                                }
                                                if (dtFiltered.Columns.Contains("Link1"))
                                                {
                                                    dtFiltered.Columns.Remove("Link1");
                                                }
                                                FeedToPdfTable(LogoImage, dtFiltered, fontGrid, colChdHeaderWidths, true);
                                            }
                                            if (dtParent.Rows.Count > 0)
                                            {
                                                dtParent.Rows[0].Delete();
                                            }
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 50
                                case "50":
                                    {
                                        foundParentRows = dtParent.Select("Link1='" + dtParent.Rows[0]["Link1"].ToString() + "' ");
                                        if (foundParentRows.Length > 0)
                                        {
                                            foreach (DataColumn dc in dt[1].Columns)
                                            {
                                                switch (dc.ColumnName)
                                                {
                                                    case "TrxID":
                                                    case "Link1":
                                                        {
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            dtNew.Columns.Add(dc.ColumnName.ToString());
                                                            break;
                                                        }
                                                }
                                            }
                                            dtNew.Columns.Add("Year");
                                            dtNew.Rows.Add(dtNew.NewRow());
                                            dtNew.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        }
                                        if (dtNew.Rows.Count > 0)
                                        {
                                            FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, true);
                                        }
                                        foundChildRows = dt[1].Select("Link1='" + LinkID + "'");
                                        if (foundChildRows.Length > 0)
                                        {
                                            DataTable dt1 = dt[1];
                                            DataTable dtFiltered = new DataTable();
                                            for (int cnt = 0; cnt < foundChildRows.Length; cnt++)
                                            {
                                                double TotalAmount = 0;
                                                double rowWiseAmts = 0;

                                                int rwIndex = dt[1].Rows.IndexOf(foundChildRows[cnt]);
                                                dtNew = GetFilteredRowsToDT(dt1, dtParent, dtCnt, foundChildRows, cnt);
                                                //
                                                if (dtNew.Rows.Count > 0)
                                                {
                                                    if (dtFiltered.Columns.Count == 0)
                                                    {
                                                        foreach (DataColumn dc in dtNew.Columns)
                                                        {
                                                            dtFiltered.Columns.Add(dc.ColumnName);
                                                        }
                                                    }
                                                    dtFiltered.Rows.Add(dtFiltered.NewRow());
                                                    foreach (DataColumn dc in dtNew.Columns)
                                                    {
                                                        dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = dtNew.Rows[0][dc.ColumnName];
                                                    }
                                                    string[] grandFormats = (string[])arrhtFormatModes[1][rwIndex];
                                                    //
                                                    foreach (string val in grandFormats)
                                                    {
                                                        string[] strvalues = val.Split('~');
                                                        string strformat = string.Empty;
                                                        string childTrxID = string.Empty;
                                                        int childRowIndex = 0;
                                                        string strCustom = string.Empty;
                                                        string strTotalAmount = string.Empty;

                                                        if (strvalues.Length > 1)
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        else
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        switch (strformat)
                                                        {
                                                            case "RAlign":
                                                                {
                                                                    if (strvalues.Length > 1)
                                                                    {
                                                                        strCustom = string.Empty;
                                                                        decimal amount;
                                                                        string amt = string.Empty;
                                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                                        string colName = dtNew.Columns[colNo].ColumnName.Trim().ToString();
                                                                        if (!htTotOtherIncome.ContainsKey(colName))
                                                                        {
                                                                            Decimal.TryParse(foundChildRows[cnt][colNo].ToString(), out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotOtherIncome.Add(colName, amt);
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                                rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            TotalAmount = Convert.ToDouble(htTotOtherIncome[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotOtherIncome[colName] = amt;
                                                                            rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                        }
                                                    }
                                                }
                                                string amts = clsReportsUICore.ConvertToCurrencyFormat(rowWiseAmts.ToString());
                                                if (!dtFiltered.Columns.Contains("Year"))
                                                {
                                                    dtFiltered.Columns.Add("Year");
                                                }
                                                dtFiltered.Rows[dtFiltered.Rows.Count - 1]["Year"] = amts;
                                            }
                                            dtFiltered.Rows.Add(dtFiltered.NewRow());
                                            foreach (DataColumn dc in dtFiltered.Columns)
                                            {
                                                if (htTotOtherIncome.ContainsKey(dc.ColumnName))
                                                {
                                                    dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = htTotOtherIncome[dc.ColumnName.ToString()].ToString();
                                                }
                                            }
                                            if (dtFiltered.Rows.Count > 0)
                                            {
                                                if (dtFiltered.Columns.Contains("TrxID"))
                                                {
                                                    dtFiltered.Columns.Remove("TrxID");
                                                }
                                                if (dtFiltered.Columns.Contains("Link1"))
                                                {
                                                    dtFiltered.Columns.Remove("Link1");
                                                }
                                                FeedToPdfTable(LogoImage, dtFiltered, fontGrid, colChdHeaderWidths, true);
                                                for (int rws = 0; rws < dtFiltered.Rows.Count; rws++)
                                                {
                                                    for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                                    {
                                                        myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                }
                                            }
                                        }
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 60
                                case "60":
                                    {
                                        DataTable dtNBefTaxes = new DataTable();
                                        foreach (DataColumn dc in dt[1].Columns)
                                        {
                                            dtNBefTaxes.Columns.Add(dc.ColumnName);
                                        }
                                        dtNBefTaxes.Rows.Add(dtNBefTaxes.NewRow());
                                        dtNBefTaxes.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        //
                                        decimal gpAmt = 0;
                                        decimal othercostAmt = 0;
                                        decimal otherincomeAmt = 0;
                                        decimal amount = 0;
                                        int nibefTaxes = 0;
                                        string amt = string.Empty;
                                        //
                                        foreach (DataColumn dc in dtNBefTaxes.Columns)
                                        {
                                            if (htTotGrossProfit.ContainsKey(dc.ColumnName))
                                            {
                                                Decimal.TryParse(htTotGrossProfit[dc.ColumnName].ToString(), out amount);
                                                gpAmt = amount;
                                                //
                                                if (htTotOtherCosts.Keys.Count > 0)
                                                {
                                                    if (htTotOtherCosts.ContainsKey(dc.ColumnName))
                                                    {
                                                        Decimal.TryParse(htTotOtherCosts[dc.ColumnName].ToString(), out amount);
                                                        othercostAmt = amount;
                                                        //
                                                        if (htTotOtherIncome.Keys.Count > 0)
                                                        {
                                                            Decimal.TryParse(htTotOtherIncome[dc.ColumnName].ToString(), out amount);
                                                            otherincomeAmt = amount;
                                                            nibefTaxes = Convert.ToInt32(gpAmt) - Convert.ToInt32(othercostAmt) + Convert.ToInt32(otherincomeAmt);
                                                        }
                                                        else
                                                        {
                                                            nibefTaxes = Convert.ToInt32(gpAmt) - Convert.ToInt32(othercostAmt);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    nibefTaxes = Convert.ToInt32(gpAmt);
                                                }
                                                amt = clsReportsUICore.ConvertToCurrencyFormat(nibefTaxes.ToString());
                                                dtNBefTaxes.Rows[0][dc.ColumnName] = amt;
                                                htTotNetIncomeBefTaxes.Add(dc.ColumnName.ToString(), amt);
                                            }
                                        }
                                        if (dtNBefTaxes.Columns.Contains("TrxID"))
                                        {
                                            dtNBefTaxes.Columns.Remove("TrxID");
                                        }
                                        if (dtNBefTaxes.Columns.Contains("Link1"))
                                        {
                                            dtNBefTaxes.Columns.Remove("Link1");
                                        }
                                        if (!dtNBefTaxes.Columns.Contains("Year"))
                                        {
                                            dtNBefTaxes.Columns.Add("Year");
                                        }
                                        dtNBefTaxes.Rows.Add(dtNBefTaxes.NewRow());
                                        foreach (DataColumn dc in dtNBefTaxes.Columns)
                                        {
                                            if (htTotNetIncomeBefTaxes.ContainsKey(dc.ColumnName))
                                            {
                                                double perAmt = 0;
                                                perAmt = Convert.ToDouble(htTotNetIncomeBefTaxes[dc.ColumnName].ToString()) / Convert.ToDouble(htTotRevenues[dc.ColumnName].ToString());
                                                perAmt = perAmt * 100;
                                                string amtper = clsReportsUICore.ConvertToCurrencyFormat(perAmt.ToString()) + "%";
                                                dtNBefTaxes.Rows[dtNBefTaxes.Rows.Count - 1][dc.ColumnName] = amtper.ToString();
                                            }
                                        }
                                        FeedToPdfTable(LogoImage, dtNBefTaxes, fontGrid, colChdHeaderWidths, false);
                                        for (int rws = 0; rws < dtNBefTaxes.Rows.Count; rws++)
                                        {
                                            for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                            {
                                                myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        //
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 70
                                case "70":
                                    {
                                        foundParentRows = dtParent.Select("Link1='" + dtParent.Rows[0]["Link1"].ToString() + "' ");
                                        if (foundParentRows.Length > 0)
                                        {
                                            foreach (DataColumn dc in dt[1].Columns)
                                            {
                                                switch (dc.ColumnName)
                                                {
                                                    case "TrxID":
                                                    case "Link1":
                                                        {
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            dtNew.Columns.Add(dc.ColumnName.ToString());
                                                            break;
                                                        }
                                                }
                                            }
                                            dtNew.Columns.Add("Year");
                                            dtNew.Rows.Add(dtNew.NewRow());
                                            dtNew.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        }
                                        if (dtNew.Rows.Count > 0)
                                        {
                                            FeedToPdfTable(LogoImage, dtNew, fontGrid, colChdHeaderWidths, false);
                                        }
                                        foundChildRows = dt[1].Select("Link1='" + LinkID + "'");
                                        if (foundChildRows.Length > 0)
                                        {
                                            DataTable dt1 = dt[1];
                                            DataTable dtFiltered = new DataTable();
                                            for (int cnt = 0; cnt < foundChildRows.Length; cnt++)
                                            {
                                                double TotalAmount = 0;
                                                double rowWiseAmts = 0;
                                                //
                                                int rwIndex = dt[1].Rows.IndexOf(foundChildRows[cnt]);
                                                dtNew = GetFilteredRowsToDT(dt1, dtParent, dtCnt, foundChildRows, cnt);
                                                //
                                                if (dtNew.Rows.Count > 0)
                                                {
                                                    if (dtFiltered.Columns.Count == 0)
                                                    {
                                                        foreach (DataColumn dc in dtNew.Columns)
                                                        {
                                                            dtFiltered.Columns.Add(dc.ColumnName);
                                                        }
                                                    }
                                                    dtFiltered.Rows.Add(dtFiltered.NewRow());
                                                    foreach (DataColumn dc in dtNew.Columns)
                                                    {
                                                        dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = dtNew.Rows[0][dc.ColumnName];
                                                    }
                                                    string[] grandFormats = (string[])arrhtFormatModes[1][rwIndex];
                                                    //
                                                    foreach (string val in grandFormats)
                                                    {
                                                        string[] strvalues = val.Split('~');
                                                        string strformat = string.Empty;
                                                        string childTrxID = string.Empty;
                                                        string strCustom = string.Empty;
                                                        string strTotalAmount = string.Empty;

                                                        if (strvalues.Length > 1)
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        else
                                                        {
                                                            strformat = strvalues[0];
                                                        }
                                                        switch (strformat)
                                                        {
                                                            case "RAlign":
                                                                {
                                                                    if (strvalues.Length > 1)
                                                                    {
                                                                        strCustom = string.Empty;
                                                                        decimal amount;
                                                                        TotalAmount = 0;
                                                                        string amt = string.Empty;
                                                                        int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                                        string colName = dtNew.Columns[colNo].ColumnName.Trim().ToString();
                                                                        if (!htTotTaxes.ContainsKey(colName))
                                                                        {
                                                                            Decimal.TryParse(foundChildRows[cnt][colNo].ToString(), out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotTaxes.Add(colName, amt);
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                                rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            TotalAmount = Convert.ToDouble(htTotTaxes[colName].ToString());
                                                                            if (!string.IsNullOrEmpty(foundChildRows[cnt][colNo].ToString()))
                                                                            {
                                                                                TotalAmount = TotalAmount + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                            }
                                                                            strTotalAmount = Convert.ToString(TotalAmount);
                                                                            Decimal.TryParse(strTotalAmount, out amount);
                                                                            amt = string.Format("{0:N}", amount);
                                                                            htTotTaxes[colName] = amt;
                                                                            rowWiseAmts = rowWiseAmts + Convert.ToDouble(foundChildRows[cnt][colNo].ToString());
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                        }
                                                    }
                                                }
                                                string amts = clsReportsUICore.ConvertToCurrencyFormat(rowWiseAmts.ToString());
                                                if (!dtFiltered.Columns.Contains("Year"))
                                                {
                                                    dtFiltered.Columns.Add("Year");
                                                }
                                                dtFiltered.Rows[dtFiltered.Rows.Count - 1]["Year"] = amts;
                                            }
                                            dtFiltered.Rows.Add(dtFiltered.NewRow());
                                            foreach (DataColumn dc in dtFiltered.Columns)
                                            {
                                                if (htTotTaxes.ContainsKey(dc.ColumnName))
                                                {
                                                    dtFiltered.Rows[dtFiltered.Rows.Count - 1][dc.ColumnName] = htTotTaxes[dc.ColumnName.ToString()].ToString();
                                                }
                                            }
                                            if (dtFiltered.Rows.Count > 0)
                                            {
                                                if (dtFiltered.Columns.Contains("TrxID"))
                                                {
                                                    dtFiltered.Columns.Remove("TrxID");
                                                }
                                                if (dtFiltered.Columns.Contains("Link1"))
                                                {
                                                    dtFiltered.Columns.Remove("Link1");
                                                }
                                                //if (dtFiltered.Rows.Count > 1)
                                                //{
                                                //    if (dtFiltered.Rows[0][dtFiltered.Columns.Count - 1].ToString() != null)
                                                //    {
                                                //        dtFiltered.Rows[dtFiltered.Rows.Count - 1][dtFiltered.Columns.Count - 1] = dtFiltered.Rows[0][dtFiltered.Columns.Count - 1].ToString();
                                                //    }
                                                //}
                                                FeedToPdfTable(LogoImage, dtFiltered, fontGrid, colChdHeaderWidths, false);
                                                for (int rws = 0; rws < dtFiltered.Rows.Count; rws++)
                                                {
                                                    for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                                    {
                                                        myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                }
                                            }
                                        }
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                                #region CASE 900
                                case "900":
                                    {
                                        DataTable dtNetIncome = new DataTable();
                                        foreach (DataColumn dc in dt[1].Columns)
                                        {
                                            dtNetIncome.Columns.Add(dc.ColumnName);
                                        }
                                        dtNetIncome.Rows.Add(dtNetIncome.NewRow());
                                        dtNetIncome.Rows[0]["AccountName"] = dtParent.Rows[0]["Caption"].ToString();
                                        //
                                        decimal netincomeTaxesAmt = 0;
                                        decimal taxesAmt = 0;
                                        decimal amount = 0;
                                        int netincome = 0;
                                        string amt = string.Empty;
                                        //
                                        foreach (DataColumn dc in dtNetIncome.Columns)
                                        {
                                            if (htTotNetIncomeBefTaxes.ContainsKey(dc.ColumnName))
                                            {
                                                Decimal.TryParse(htTotNetIncomeBefTaxes[dc.ColumnName].ToString(), out amount);
                                                netincomeTaxesAmt = amount;
                                                //
                                                if (htTotTaxes.Keys.Count > 0)
                                                {
                                                    if (htTotTaxes.ContainsKey(dc.ColumnName))
                                                    {
                                                        Decimal.TryParse(htTotTaxes[dc.ColumnName].ToString(), out amount);
                                                        taxesAmt = amount;
                                                        netincome = Convert.ToInt32(netincomeTaxesAmt) - Convert.ToInt32(taxesAmt);
                                                    }
                                                }
                                                else
                                                {
                                                    netincome = Convert.ToInt32(netincomeTaxesAmt);
                                                }
                                                amt = clsReportsUICore.ConvertToCurrencyFormat(netincome.ToString());
                                                dtNetIncome.Rows[0][dc.ColumnName] = amt;
                                                htTotNetIncome.Add(dc.ColumnName, amt);
                                            }
                                        }
                                        if (dtNetIncome.Columns.Contains("TrxID"))
                                        {
                                            dtNetIncome.Columns.Remove("TrxID");
                                        }
                                        if (dtNetIncome.Columns.Contains("Link1"))
                                        {
                                            dtNetIncome.Columns.Remove("Link1");
                                        }
                                        if (!dtNetIncome.Columns.Contains("Year"))
                                        {
                                            dtNetIncome.Columns.Add("Year");
                                        }
                                        dtNetIncome.Rows.Add(dtNetIncome.NewRow());
                                        foreach (DataColumn dc in dtNetIncome.Columns)
                                        {
                                            if (htTotNetIncome.ContainsKey(dc.ColumnName))
                                            {
                                                double perAmt = 0;
                                                perAmt = Convert.ToDouble(htTotNetIncome[dc.ColumnName].ToString()) / Convert.ToDouble(htTotRevenues[dc.ColumnName].ToString());
                                                perAmt = perAmt * 100;
                                                string amtper = clsReportsUICore.ConvertToCurrencyFormat(perAmt.ToString()) + "%";
                                                dtNetIncome.Rows[dtNetIncome.Rows.Count - 1][dc.ColumnName] = amtper.ToString();
                                            }
                                        }
                                        FeedToPdfTable(LogoImage, dtNetIncome, fontGrid, colChdHeaderWidths, false);
                                        for (int rws = 0; rws < dtNetIncome.Rows.Count; rws++)
                                        {
                                            for (int pCll = 1; pCll < myPdfTable.Rows[rws].Cells.Count; pCll++)
                                            {
                                                myPdfTable.Rows[rws][pCll].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        //
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                                #region DEFAULT
                                default:
                                    {
                                        if (dtParent.Rows.Count > 0)
                                        {
                                            dtParent.Rows[0].Delete();
                                        }
                                        break;
                                    }
                                #endregion
                            }
                        }
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            alRemovedColumns.Add(dtNew.Columns["TrxID"].Ordinal);
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            alRemovedColumns.Add(dtNew.Columns["Link1"].Ordinal);
                        }
                        //To Delete
                        if (dtNew.Columns.Contains("TrxID"))
                        {
                            dtNew.Columns.Remove("TrxID");
                        }
                        if (dtNew.Columns.Contains("Link1"))
                        {
                            dtNew.Columns.Remove("Link1");
                        }
                        if (dtCnt == dtParent.Rows.Count - 1)
                        {
                            dtCnt = 0;
                        }
                        if (dtCnt == dtParent.Rows.Count)
                        {
                            dtCnt = 0;
                        }
                    }
                }
                #endregion
                newPdfPage.SaveToDocument();
                CreatePDFDocument(fileName);
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }

        private static DataTable GetFilteredRowsToDT(DataTable dt, DataTable dtParent, int dtCnt, DataRow[] foundRows, int cnt)
        {
            DataTable dtNew = new DataTable();
            int rwIndex = dt.Rows.IndexOf(foundRows[cnt]);
            DataRow dtFilteredRws = dtNew.NewRow();
            if (dtNew.Columns.Count == 0)
            {
                for (int x = 0; x < dt.Columns.Count; x++)
                {
                    dtNew.Columns.Add(dt.Columns[x].ColumnName);
                }
            }
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                if (dtNew.Columns.Contains(dt.Columns[i].ColumnName))
                {
                    dtFilteredRws[i] = foundRows[cnt].ItemArray[i].ToString();
                }
            }
            dtNew.Rows.Add(dtFilteredRws);
            dtNew.AcceptChanges();
            dtNew.TableName = dtParent.TableName;
            return dtNew;
        }

        private void FeedToPdfTable(PdfImage m_LogoImage, DataTable dt, Font fontall, int[] colWidths, bool blLastColumn)
        {
            myPdfTable = myPdfDocument.NewTable(fontall, dt.Rows.Count, dt.Columns.Count, 1);
            myPdfTable.ImportDataTable(dt);
            myPdfTable.SetColumnsWidth(colWidths);
            myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
            myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
            myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
            myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
            myPdfTable.HeadersRow.SetForegroundColor(Color.White);
            for (int rws = 0; rws < dt.Rows.Count; rws++)
            {
                if (dt.Rows.Count > 1)
                {
                    for (int pcell = 1; pcell < myPdfTable.Rows[rws].Cells.Count; pcell++)
                    {
                        switch (myPdfTable.Cell(rws, pcell).Content.ToString())
                        {
                            default:
                                {
                                    myPdfTable.Cell(rws, pcell).SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Cell(rws, pcell).SetFont(fontall);
                                    myPdfTable.Cell(dt.Rows.Count - 1, pcell).SetFont(GridHeaderFont);
                                    break;
                                }
                        }
                    }
                }
                else
                {
                    for (int pcell = 1; pcell < myPdfTable.Rows[rws].Cells.Count; pcell++)
                    {
                        switch (myPdfTable.Cell(rws, pcell).Content.ToString())
                        {
                            default:
                                {
                                    myPdfTable.Cell(rws, pcell).SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Cell(rws, pcell).SetFont(fontall);
                                    myPdfTable.Cell(rws, 0).SetFont(GridHeaderFont);
                                    break;
                                }
                        }
                    }
                }
            }
            while (!myPdfTable.AllTablePagesCreated)
            {
                //Setting the Y position and if required creating new page
                if (currentYPos > myPdfDocument.PageHeight - 50)
                {
                    posY = 70;
                    currentYPos = 70;
                    newPdfPage.SaveToDocument();
                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                    newPdfPage = myPdfDocument.NewPage();
                    newPdfPage.Add(myHeaderPdfTablePage);
                    if (m_LogoImage != null) { newPdfPage.Add(m_LogoImage, imgPosX, imgPosY); }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY + 20 + ((pdfMainHeaderPage.Area.PosY - posY) / 2);
                    posY = currentYPos;
                    newPdfPage.Add(pdfMainHeaderPage);
                    newPdfPage.Add(pdfLineBrk);
                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                }
                else
                {
                    if (posY >= currentYPos)
                    {
                        currentYPos = posY + 20 + (pdfMainHeaderPage.Area.PosY - posY) / 2;
                        posY = currentYPos;
                    }
                    else
                    {
                        posY = currentYPos;
                    }
                }
                if (myPdfDocument.PageHeight - 50 - posY < 50)
                {
                    posY = 70;
                    currentYPos = 70;
                    newPdfPage.SaveToDocument();
                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                    newPdfPage = myPdfDocument.NewPage();
                    newPdfPage.Add(myHeaderPdfTablePage);
                    if (m_LogoImage != null) { newPdfPage.Add(m_LogoImage, imgPosX, imgPosY); }
                    //
                    posY = currentYPos + 25;
                    currentYPos = posY + 20 + ((pdfMainHeaderPage.Area.PosY - posY) / 2);
                    posY = currentYPos;
                    newPdfPage.Add(pdfMainHeaderPage);
                    newPdfPage.Add(pdfLineBrk);
                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 560, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                }
                PdfTablePage newPdfTablePage2 = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                newPdfPage.Add(newPdfTablePage2);
                currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                if (myPdfTable.Rows.Length > 1)
                {
                    for (int rws = 0; rws < myPdfTable.Rows.Length; rws++)
                    {
                        int cllCnt = 0;
                        if ((bool)blLastColumn)
                        {
                            cllCnt = myPdfTable.Rows[rws].Cells.Count;
                        }
                        else
                        {
                            cllCnt = myPdfTable.Rows[rws].Cells.Count - 1;
                        }
                        for (int clls = 1; clls < cllCnt; clls++)
                        {
                            double xPos = newPdfTablePage2.CellArea(myPdfTable.Rows.Length - 1, clls).TopLeftVertex.X;
                            double yPos = newPdfTablePage2.CellArea(myPdfTable.Rows.Length - 1, clls).TopLeftVertex.Y;
                            //
                            Point pStart = new Point(Convert.ToInt32(xPos + 8), Convert.ToInt32(yPos));
                            Point pEnd = new Point(Convert.ToInt32(xPos + (55)), Convert.ToInt32(yPos));
                            PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                            newPdfPage.Add(pdfLineBrk);
                            //
                            double xPos1 = newPdfTablePage2.CellArea(myPdfTable.Rows.Length - 1, clls).TopLeftVertex.X;
                            double yPos1 = newPdfTablePage2.CellArea(myPdfTable.Rows.Length - 1, clls).TopLeftVertex.Y;
                            //
                            Point pStart1 = new Point(Convert.ToInt32(xPos1 + 8), Convert.ToInt32(yPos1 + 9));
                            Point pEnd1 = new Point(Convert.ToInt32(xPos1 + (55)), Convert.ToInt32(yPos1 + 9));
                            PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                            newPdfPage.Add(pdfLineBrk1);
                        }
                    }
                }
            }
        }

        #endregion



        #region Report Style 660
        public void ReportStyle660(DataTable[] dtAll, DataTable dtHeader, ArrayList ArrhtPFormats, bool PLayout, ArrayList ArrArrWidths, ArrayList ArrHtColNameValues, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 100;
                }
                if (dtAll.Length > 0)
                {
                    string imgpath = PDFImagePath();
                    PdfImage LogoImage = null;
                    //
                    PdfTablePage myPdfHeaderPage = null;
                    PdfLine pdfLineBrk = null;
                    //
                    Font FontRegular = new Font("Verdana", 5, FontStyle.Regular);
                    Font fontHeader1 = new Font("Verdana", 5, FontStyle.Bold);
                    Font fontHeader2 = new Font("Verdana", 5, FontStyle.Bold);
                    Font fontHeader3 = new Font("Verdana", 5, FontStyle.Regular);
                    Font fontSumTotals = new Font("Verdana", 5, FontStyle.Bold);
                    Font fontMainHeader = new Font("Verdana", 5, FontStyle.Bold);
                    //
                    ArrayList alRemovedColumns = new ArrayList();
                    int[] intColHeaderWdts = null;
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }
                    newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                    #region PDF Header
                    DataTable dtMainHeader = new DataTable();
                    foreach (DataColumn dcHeader in dtAll[2].Columns)
                    {
                        switch (dcHeader.ColumnName)
                        {
                            case "Link1":
                            case "Link2":
                            case "TrxID":
                                {
                                    alRemovedColumns.Add(dcHeader.Ordinal);
                                    break;
                                }
                            default:
                                {
                                    dtMainHeader.Columns.Add(dcHeader.ColumnName.ToString());
                                    break;
                                }
                        }
                    }
                    if (dtAll[2].Columns.Contains("TrxID"))
                    {
                        dtAll[2].Columns["TrxID"].SetOrdinal(0);
                    }
                    if (dtAll[2].Columns.Contains("Link1"))
                    {
                        dtAll[2].Columns["Link1"].SetOrdinal(0);
                    }
                    if (dtAll[2].Columns.Contains("Link2"))
                    {
                        dtAll[2].Columns["Link2"].SetOrdinal(0);
                    }
                    int[] arr2Widths = (int[])ArrArrWidths[2];
                    ArrayList alAllColWidths = new ArrayList();
                    int[] colBudgetWidths = (int[])ArrArrWidths[2];
                    int colPos = 0;
                    for (int cnt = 0; cnt < colBudgetWidths.Length; cnt++)
                    {
                        if (!alRemovedColumns.Contains(cnt))
                        {
                            if (colBudgetWidths[cnt] != 0)
                            {
                                alAllColWidths.Add(colBudgetWidths[cnt]);
                                colPos++;
                            }
                        }
                    }
                    intColHeaderWdts = (int[])alAllColWidths.ToArray(typeof(int));
                    dtMainHeader.Rows.Add(dtMainHeader.NewRow());
                    for (int col = 0; col < dtMainHeader.Columns.Count; col++)
                    {
                        dtMainHeader.Rows[dtMainHeader.Rows.Count - 1][dtMainHeader.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfHeader = myPdfDocument.NewTable(fontMainHeader, dtMainHeader.Rows.Count, dtMainHeader.Columns.Count, 1);
                    myPdfHeader.ImportDataTable(dtMainHeader);
                    myPdfHeader.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfHeader.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfHeader.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfHeader.SetColumnsWidth(intColHeaderWdts);
                    foreach (PdfCell pHeaderCll in myPdfHeader.HeadersRow.Cells)
                    {
                        string labelName = pHeaderCll.Content.ToString();
                        IEnumerable htColNameVals = (IEnumerable)ArrHtColNameValues[2];
                        foreach (DictionaryEntry de in htColNameVals)
                        {
                            if (de.Key.ToString() == labelName)
                            {
                                pHeaderCll.SetContent(de.Value);
                            }
                        }
                    }
                    foreach (PdfCell pskipCll in myPdfHeader.Cells)
                    {
                        string labelValue = pskipCll.Content.ToString();
                        switch (labelValue)
                        {
                            case "SKIP":
                                {
                                    pskipCll.SetBackgroundColor(Color.White);
                                    pskipCll.SetForegroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    posY = currentYPos + 10;
                    currentYPos = posY;
                    //
                    myPdfHeaderPage = myPdfHeader.CreateTablePage(new PdfArea(myPdfDocument, posX + 12, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfHeaderPage);
                    //
                    double xPos = myPdfHeaderPage.CellArea(myPdfHeader.HeadersRow.Index, 0).BottomLeftVertex.X;
                    double yPos = myPdfHeaderPage.CellArea(myPdfHeader.HeadersRow.Index, 0).BottomLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 5));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 5));
                    pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    #endregion
                    DataTable dtGrandTotals = new DataTable();
                    Hashtable htGrandTotalsNew = new Hashtable();
                    for (int dtCnt = 0; dtCnt < dtAll.Length; dtCnt++)
                    {
                        string strTableName = dtAll[0].TableName.ToString();
                        switch (strTableName)
                        {
                            case "MainLink":
                                {
                                    DataTable dtParentTotals = new DataTable();
                                    #region Table 0
                                    for (int rws = 0; rws <= dtAll[dtCnt].Rows.Count; rws++)
                                    {
                                        DataTable dtAmounts = new DataTable();
                                        Hashtable htIndvGrandTotals = new Hashtable();
                                        DataRow[] foundRows = null;
                                        string strLink1 = string.Empty;
                                        string strLink1Name = string.Empty;
                                        if (dtAll[dtCnt].Columns.Contains("Link1"))
                                        {
                                            foundRows = dtAll[dtCnt].Select("Link1 ='" + dtAll[dtCnt].Rows[0]["Link1"].ToString() + "'");
                                            strLink1 = dtAll[dtCnt].Rows[0]["Link1"].ToString();
                                            strLink1Name = dtAll[dtCnt].Rows[0]["Description"].ToString();
                                            if (foundRows.Length > 0)
                                            {
                                                int rowIndex = dtAll[dtCnt].Rows.IndexOf(foundRows[0]);
                                                DataTable dtNew = GetFilteredDataRows(dtAll, dtCnt, foundRows, rowIndex);
                                                int[] widths;
                                                int[] colParentWidths;
                                                dtNew = GetArrayWidths(ArrArrWidths, 0, 2, alRemovedColumns, dtNew, out widths, out colParentWidths);
                                                if (dtNew.Columns.Contains("NumberID"))
                                                {
                                                    dtNew.Columns.Remove("NumberID");
                                                }
                                                PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(fontHeader2, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                                                myPdfTableHeaderFormat.ImportDataTable(dtNew);
                                                myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                                                myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                myPdfTableHeaderFormat.HeadersRow.SetFont(fontHeader1);
                                                myPdfTableHeaderFormat.HeadersRow.SetBackgroundColor(Color.White);
                                                myPdfTableHeaderFormat.HeadersRow.SetForegroundColor(Color.White);
                                                //
                                                double dblTmpPosX = posX + 5;
                                                while (!myPdfTableHeaderFormat.AllTablePagesCreated)
                                                {
                                                    //Setting the Y position and if required creating new page
                                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        posY = currentYPos + 25;
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                            posY = currentYPos + 5;
                                                        }
                                                        newPdfPage.Add(myPdfHeaderPage);
                                                        newPdfPage.Add(pdfLineBrk);
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    else
                                                    {
                                                        if (posY >= currentYPos)
                                                        {
                                                            if (myPdfHeaderPage != null)
                                                            {
                                                                currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                            }
                                                            posY = currentYPos + 12;
                                                        }
                                                        else
                                                        {
                                                            posY = currentYPos + 12;
                                                        }
                                                    }
                                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                        posY = currentYPos + 25;
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 9 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                            posY = currentYPos;
                                                        }
                                                        newPdfPage.Add(myPdfHeaderPage);
                                                        newPdfPage.Add(pdfLineBrk);
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    PdfTablePage myPdfHeaderFormattedPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX, posY, width, (height - (posY))));
                                                    newPdfPage.Add(myPdfHeaderFormattedPage);
                                                    currentYPos = myPdfHeaderFormattedPage.Area.BottomLeftVertex.Y;
                                                    //
                                                    double xPos1 = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                    double yPos1 = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                    //
                                                    Point pStart1 = new Point(Convert.ToInt32(xPos1), Convert.ToInt32(yPos1 + 2));
                                                    Point pEnd1 = new Point(Convert.ToInt32(xPos1 + 80), Convert.ToInt32(yPos1 + 2));
                                                    PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                                    newPdfPage.Add(pdfLineBrk1);
                                                }
                                                //
                                                #region Table 1
                                                if (dtAll[dtCnt + 1].Rows.Count > 0)
                                                {
                                                    DataRow[] dtChild1FoundRows = null;
                                                    DataTable dtChild1 = new DataTable();
                                                    //
                                                    for (int rws1 = 0; rws1 < dtAll[dtCnt + 1].Rows.Count; rws1++)
                                                    {
                                                        if ((dtAll[dtCnt + 1].Columns.Contains("Link1")) && (dtAll[dtCnt + 1].Columns.Contains("Link2")))
                                                        {
                                                            dtChild1FoundRows = dtAll[dtCnt + 1].Select("Link1 ='" + strLink1 + "'");
                                                            string strLink2 = string.Empty;
                                                            string strName = string.Empty;
                                                            if (dtChild1FoundRows.Length > 0)
                                                            {
                                                                int drFoundRws = 0;
                                                                for (; drFoundRws < dtChild1FoundRows.Length; drFoundRws++)
                                                                {
                                                                    strLink2 = dtAll[dtCnt + 1].Rows[rws1]["Link2"].ToString();
                                                                    strName = dtAll[dtCnt + 1].Rows[rws1]["Description"].ToString();

                                                                    int rowIndex1 = dtAll[dtCnt + 1].Rows.IndexOf(dtChild1FoundRows[drFoundRws]);
                                                                    dtChild1 = new DataTable();
                                                                    if (drFoundRws == 0)
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, rowIndex1);
                                                                    }
                                                                    else
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, drFoundRws);
                                                                    }
                                                                    //
                                                                    widths = null;
                                                                    colParentWidths = null;
                                                                    alRemovedColumns = new ArrayList();
                                                                    dtChild1 = GetArrayWidths(ArrArrWidths, 1, 3, alRemovedColumns, dtChild1, out widths, out colParentWidths);
                                                                    //
                                                                    double dblTmpPosX1 = posX + 10;
                                                                    PdfTable myPdfChild1 = myPdfDocument.NewTable(fontHeader2, dtChild1.Rows.Count, dtChild1.Columns.Count, 1);
                                                                    myPdfChild1.ImportDataTable(dtChild1);
                                                                    myPdfChild1.SetBorders(Color.Black, 1, BorderType.None);
                                                                    myPdfChild1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                    myPdfChild1.SetColumnsWidth(colParentWidths);
                                                                    myPdfChild1.HeadersRow.SetFont(fontHeader1);
                                                                    myPdfChild1.HeadersRow.SetBackgroundColor(Color.White);
                                                                    myPdfChild1.HeadersRow.SetForegroundColor(Color.White);
                                                                    //
                                                                    while (!myPdfChild1.AllTablePagesCreated)
                                                                    {
                                                                        //Setting the Y position and if required creating new page
                                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                        {
                                                                            posY = 70;
                                                                            currentYPos = 70;
                                                                            newPdfPage.SaveToDocument();
                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                            posY = currentYPos + 25;
                                                                            if (myPdfHeaderPage != null)
                                                                            {
                                                                                currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                posY = currentYPos + 5;
                                                                            }
                                                                            newPdfPage.Add(myPdfHeaderPage);
                                                                            newPdfPage.Add(pdfLineBrk);
                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));

                                                                        }
                                                                        else
                                                                        {
                                                                            if (posY >= currentYPos)
                                                                            {
                                                                                if (myPdfHeaderPage != null)
                                                                                {
                                                                                    currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                                                }
                                                                                posY = currentYPos + 5;
                                                                            }
                                                                            else
                                                                            {
                                                                                posY = currentYPos + 5;
                                                                            }
                                                                        }
                                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                        {
                                                                            posY = 70;
                                                                            currentYPos = 70;
                                                                            newPdfPage.SaveToDocument();
                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                            posY = currentYPos + 25;
                                                                            if (myPdfHeaderPage != null)
                                                                            {
                                                                                currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                posY = currentYPos + 5;
                                                                            }
                                                                            newPdfPage.Add(myPdfHeaderPage);
                                                                            newPdfPage.Add(pdfLineBrk);
                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                        }
                                                                        PdfTablePage myPdfChildPage1 = myPdfChild1.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX1, posY, width, height - posY));
                                                                        newPdfPage.Add(myPdfChildPage1);
                                                                        currentYPos = myPdfChildPage1.Area.BottomLeftVertex.Y;
                                                                        //
                                                                        double xPos2 = myPdfChildPage1.CellArea(myPdfChild1.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                                        double yPos2 = myPdfChildPage1.CellArea(myPdfChild1.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                                        //
                                                                        Point pStart2 = new Point(Convert.ToInt32(xPos2), Convert.ToInt32(yPos2 + 2));
                                                                        Point pEnd2 = new Point(Convert.ToInt32(xPos2 + (80)), Convert.ToInt32(yPos2 + 2));
                                                                        PdfLine pdfLineBrk2 = new PdfLine(myPdfDocument, pStart2, pEnd2, Color.Black, 1);
                                                                        newPdfPage.Add(pdfLineBrk2);
                                                                    }
                                                                    #region Table 2
                                                                    if (dtAll[dtCnt + 2].Rows.Count > 0)
                                                                    {
                                                                        DataRow[] dtChild2FoundRows = null;
                                                                        DataTable dtChild2 = new DataTable();
                                                                        int dt2ColumnsCount = 0;
                                                                        ArrayList arrRwIndex = new ArrayList();
                                                                        IEnumerable htPFormatModes1 = (IEnumerable)ArrhtPFormats[2];
                                                                        Hashtable htPFormatModes2 = (Hashtable)htPFormatModes1;
                                                                        Hashtable htGrandTotals = new Hashtable();
                                                                        for (int rws2 = 0; rws2 < dtAll[dtCnt + 2].Rows.Count; rws2++)
                                                                        {
                                                                            if ((dtAll[dtCnt + 2].Columns.Contains("Link1")) && (dtAll[dtCnt + 2].Columns.Contains("Link2")))
                                                                            {
                                                                                dtChild2FoundRows = dtAll[dtCnt + 2].Select(" Link1 ='" + strLink1 + "' and Link2 ='" + strLink2 + "'");

                                                                                if (dtChild2FoundRows.Length > 0)
                                                                                {
                                                                                    for (int drRws2 = 0; drRws2 < dtChild2FoundRows.Length; drRws2++)
                                                                                    {
                                                                                        int rowIndex2 = dtAll[dtCnt + 2].Rows.IndexOf(dtChild2FoundRows[drRws2]);
                                                                                        arrRwIndex.Add(rowIndex2);
                                                                                        DataRow dtChRow2 = dtChild2.NewRow();
                                                                                        if (dtChild2.Columns.Count == 0)
                                                                                        {
                                                                                            for (int x = 0; x < dtAll[dtCnt + 2].Columns.Count; x++)
                                                                                            {
                                                                                                dtChild2.Columns.Add(dtAll[dtCnt + 2].Columns[x].ColumnName);
                                                                                            }
                                                                                            dt2ColumnsCount = dtChild2.Columns.Count;
                                                                                        }
                                                                                        for (int i = 0; i < dtChild2.Columns.Count; i++)
                                                                                        {
                                                                                            if (dtAll[dtCnt + 2].Columns.Contains(dtChild2.Columns[i].ColumnName))
                                                                                            {
                                                                                                dtChRow2[i] = dtChild2FoundRows[drRws2].ItemArray[i].ToString();
                                                                                            }
                                                                                        }
                                                                                        string childTrxID = string.Empty;
                                                                                        string strCustom = string.Empty;
                                                                                        string strTotalAmount = string.Empty;
                                                                                        string[] grandFormats = (string[])htPFormatModes2[rowIndex2];
                                                                                        double TotalAmount = 0;
                                                                                        foreach (string val in grandFormats)
                                                                                        {
                                                                                            string[] strvalues = val.Split('~');
                                                                                            string strformat = string.Empty;
                                                                                            if (strvalues.Length > 1)
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            switch (strformat)
                                                                                            {
                                                                                                case "RAlign":
                                                                                                    {
                                                                                                        if (strvalues.Length > 1)
                                                                                                        {
                                                                                                            strCustom = string.Empty;
                                                                                                            decimal amount;
                                                                                                            TotalAmount = 0;
                                                                                                            string amt = string.Empty;
                                                                                                            int colNo = Convert.ToInt32(strvalues[1].ToString()) + 2;
                                                                                                            string colName = dtChild2.Columns[colNo].ColumnName.Trim().ToString();
                                                                                                            if (!htGrandTotals.ContainsKey(colName))
                                                                                                            {
                                                                                                                Decimal.TryParse(dtChRow2[colNo].ToString(), out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotals.Add(colName, amt);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                                                                                if (!string.IsNullOrEmpty(dtChRow2[colNo].ToString()))
                                                                                                                {
                                                                                                                    TotalAmount = TotalAmount + Convert.ToDouble(dtChRow2[colNo].ToString());
                                                                                                                }
                                                                                                                strTotalAmount = Convert.ToString(TotalAmount);
                                                                                                                Decimal.TryParse(strTotalAmount, out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotals[colName] = amt;
                                                                                                            }
                                                                                                            if (!htIndvGrandTotals.ContainsKey(colName))
                                                                                                            {
                                                                                                                Decimal.TryParse(dtChRow2[colNo].ToString(), out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htIndvGrandTotals.Add(colName, amt);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                TotalAmount = Convert.ToDouble(htIndvGrandTotals[colName].ToString());
                                                                                                                if (!string.IsNullOrEmpty(dtChRow2[colNo].ToString()))
                                                                                                                {
                                                                                                                    TotalAmount = TotalAmount + Convert.ToDouble(dtChRow2[colNo].ToString());
                                                                                                                }
                                                                                                                strTotalAmount = Convert.ToString(TotalAmount);
                                                                                                                Decimal.TryParse(strTotalAmount, out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htIndvGrandTotals[colName] = amt;
                                                                                                            }
                                                                                                            if (!htGrandTotalsNew.ContainsKey(colName))
                                                                                                            {
                                                                                                                Decimal.TryParse(dtChRow2[colNo].ToString(), out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotalsNew.Add(colName, amt);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                TotalAmount = Convert.ToDouble(htGrandTotalsNew[colName].ToString());
                                                                                                                if (!string.IsNullOrEmpty(dtChRow2[colNo].ToString()))
                                                                                                                {
                                                                                                                    TotalAmount = TotalAmount + Convert.ToDouble(dtChRow2[colNo].ToString());
                                                                                                                }
                                                                                                                strTotalAmount = Convert.ToString(TotalAmount);
                                                                                                                Decimal.TryParse(strTotalAmount, out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotalsNew[colName] = amt;
                                                                                                            }
                                                                                                        }
                                                                                                        break;
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                        dtChild2.Rows.Add(dtChRow2);
                                                                                        dtChild2.AcceptChanges();
                                                                                        dtChild2.TableName = dtAll[dtCnt + 2].TableName;
                                                                                        if (dtAmounts.Columns.Count == 0)
                                                                                        {
                                                                                            foreach (DataColumn dcTotals in dtChild2.Columns)
                                                                                            {
                                                                                                dtAmounts.Columns.Add(dcTotals.ColumnName.ToString());
                                                                                            }
                                                                                        }
                                                                                        if (dtGrandTotals.Columns.Count == 0)
                                                                                        {
                                                                                            foreach (DataColumn dcTotals in dtChild2.Columns)
                                                                                            {
                                                                                                dtGrandTotals.Columns.Add(dcTotals.ColumnName.ToString());
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                                                                    if (htGrandTotals.Keys.Count > 0)
                                                                                    {
                                                                                        dtChild2.Rows.Add(dtChild2.NewRow());
                                                                                    }
                                                                                    while (enumTot.MoveNext())
                                                                                    {
                                                                                        dtChild2.Rows[dtChild2.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                                                                    }
                                                                                    if (dtChild2.Columns.Contains("TrxID"))
                                                                                    {
                                                                                        dtChild2.Columns.Remove("TrxID");
                                                                                    }
                                                                                    if (dtChild2.Columns.Contains("Link1"))
                                                                                    {
                                                                                        dtChild2.Columns.Remove("Link1");
                                                                                    }
                                                                                    if (dtChild2.Columns.Contains("Link2"))
                                                                                    {
                                                                                        dtChild2.Columns.Remove("Link2");
                                                                                    }
                                                                                    dtChild2.Rows[dtChild2.Rows.Count - 1][0] = "Total " + strName;
                                                                                    double dblTmpPosX2 = posX + 12;
                                                                                    //Pdf Childs
                                                                                    PdfTable myPdf2Childs = myPdfDocument.NewTable(fontHeader3, dtChild2.Rows.Count, dtChild2.Columns.Count, 1);
                                                                                    myPdf2Childs.ImportDataTable(dtChild2);
                                                                                    myPdf2Childs.SetColumnsWidth(intColHeaderWdts);
                                                                                    myPdf2Childs.SetBorders(Color.Black, 1, BorderType.None);
                                                                                    myPdf2Childs.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                    myPdf2Childs.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                                    myPdf2Childs.HeadersRow.SetFont(fontHeader1);
                                                                                    myPdf2Childs.HeadersRow.SetBackgroundColor(Color.White);
                                                                                    myPdf2Childs.HeadersRow.SetForegroundColor(Color.White);
                                                                                    //
                                                                                    for (int cols = 1; cols < myPdf2Childs.Columns.Length; cols++)
                                                                                    {
                                                                                        myPdf2Childs.Rows[myPdf2Childs.Rows.Length - 1][cols].SetBackgroundColor(Color.Gainsboro);
                                                                                    }
                                                                                    //Child Table Rows Formats
                                                                                    foreach (int intRwIndexNos in arrRwIndex)
                                                                                    {
                                                                                        int i = intRwIndexNos;
                                                                                        string[] arrformats = (string[])htPFormatModes2[i];
                                                                                        foreach (string val in arrformats)
                                                                                        {
                                                                                            string[] strvalues = val.Split('~');
                                                                                            int intNo = 0;
                                                                                            string strformat = string.Empty;
                                                                                            if (strvalues.Length > 1)
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            switch (strformat)
                                                                                            {
                                                                                                case "pFont":
                                                                                                    {
                                                                                                        myPdf2Childs.Rows[i].SetFont(SumRowFont);
                                                                                                        break;
                                                                                                    }
                                                                                                case "pUnderLine":
                                                                                                    {
                                                                                                        myPdf2Childs.Rows[i].SetFont(FontUnderline);
                                                                                                        break;
                                                                                                    }
                                                                                                case "pBox":
                                                                                                    {
                                                                                                        for (int clCnt = 1; clCnt < myPdf2Childs.Rows[i].Cells.Count; clCnt++)
                                                                                                        {
                                                                                                            PdfTablePage newPdfTablePage = myPdf2Childs.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                                                                            PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                                                                            pr.StrokeWidth = 1;
                                                                                                            newPdfPage.Add(pr);
                                                                                                        }
                                                                                                        break;
                                                                                                    }
                                                                                                case "pLnSkip":
                                                                                                    {
                                                                                                        foreach (PdfCell pcll in myPdf2Childs.Cells)
                                                                                                        {
                                                                                                            if (pcll.Content.ToString() == "SKIP")
                                                                                                            {
                                                                                                                pcll.SetBackgroundColor(Color.White);
                                                                                                                pcll.SetForegroundColor(Color.White);
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        break;
                                                                                                    }
                                                                                                case "RAlign":
                                                                                                    {
                                                                                                        intNo = Convert.ToInt32(strvalues[1]) - 1;
                                                                                                        myPdf2Childs.Columns[intNo].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                                                        break;
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    //
                                                                                    myPdf2Childs.Rows[myPdf2Childs.Rows.Length - 1].SetFont(fontSumTotals);
                                                                                    while (!myPdf2Childs.AllTablePagesCreated)
                                                                                    {
                                                                                        //Setting the Y position and if required creating new page
                                                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                                            posY = currentYPos + 25;
                                                                                            if (myPdfHeaderPage != null)
                                                                                            {
                                                                                                currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                                posY = currentYPos + 5;
                                                                                            }
                                                                                            newPdfPage.Add(myPdfHeaderPage);
                                                                                            newPdfPage.Add(pdfLineBrk);
                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (posY >= currentYPos)
                                                                                            {
                                                                                                if (myPdfHeaderPage != null)
                                                                                                {
                                                                                                    currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                                                                }
                                                                                                posY = currentYPos + 5;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                posY = currentYPos + 5;
                                                                                            }
                                                                                        }
                                                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                                        {
                                                                                            posY = 70;
                                                                                            currentYPos = 70;
                                                                                            newPdfPage.SaveToDocument();
                                                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                            newPdfPage = myPdfDocument.NewPage();
                                                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                                            posY = currentYPos + 25;
                                                                                            if (myPdfHeaderPage != null)
                                                                                            {
                                                                                                currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                                posY = currentYPos + 5;
                                                                                            }
                                                                                            newPdfPage.Add(myPdfHeaderPage);
                                                                                            newPdfPage.Add(pdfLineBrk);
                                                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                        }
                                                                                        PdfTablePage myPdf2ChildPage = myPdf2Childs.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX2, posY, width, height - posY));
                                                                                        newPdfPage.Add(myPdf2ChildPage);
                                                                                        currentYPos = myPdf2ChildPage.Area.BottomLeftVertex.Y;
                                                                                    }
                                                                                }
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                    }//dtchild1
                                                }
                                                #endregion
                                            }
                                        }
                                        IDictionaryEnumerator enumIndvTot = htIndvGrandTotals.GetEnumerator();
                                        if (htIndvGrandTotals.Keys.Count > 0)
                                        {
                                            dtAmounts.Rows.Add(dtAmounts.NewRow());

                                            while (enumIndvTot.MoveNext())
                                            {
                                                dtAmounts.Rows[dtAmounts.Rows.Count - 1][enumIndvTot.Key.ToString()] = enumIndvTot.Value.ToString();
                                            }
                                            if (dtAmounts.Columns.Contains("TrxID"))
                                            {
                                                dtAmounts.Columns.Remove("TrxID");
                                            }
                                            if (dtAmounts.Columns.Contains("Link1"))
                                            {
                                                dtAmounts.Columns.Remove("Link1");
                                            }
                                            if (dtAmounts.Columns.Contains("Link2"))
                                            {
                                                dtAmounts.Columns.Remove("Link2");
                                            }
                                            dtAmounts.Rows[0][0] = "Total " + strLink1Name;
                                            //Pdf Parent Totals
                                            PdfTable myPdfParentTotals = myPdfDocument.NewTable(fontSumTotals, dtAmounts.Rows.Count, dtAmounts.Columns.Count, 1);
                                            myPdfParentTotals.ImportDataTable(dtAmounts);
                                            myPdfParentTotals.SetBorders(Color.Black, 1, BorderType.None);
                                            myPdfParentTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfParentTotals.HeadersRow.SetFont(fontHeader1);
                                            myPdfParentTotals.SetColumnsWidth(intColHeaderWdts);
                                            myPdfParentTotals.HeadersRow.SetBackgroundColor(Color.White);
                                            myPdfParentTotals.HeadersRow.SetForegroundColor(Color.White);
                                            //
                                            for (int cols = 1; cols < myPdfParentTotals.Columns.Length; cols++)
                                            {
                                                myPdfParentTotals.Columns[cols].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                            while (!myPdfParentTotals.AllTablePagesCreated)
                                            {
                                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                    posY = currentYPos + 25;
                                                    if (myPdfHeaderPage != null)
                                                    {
                                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                        posY = currentYPos + 5;
                                                    }
                                                    newPdfPage.Add(myPdfHeaderPage);
                                                    newPdfPage.Add(pdfLineBrk);
                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                else
                                                {
                                                    if (posY >= currentYPos)
                                                    {
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                        }
                                                        posY = currentYPos + 5;
                                                    }
                                                    else
                                                    {
                                                        posY = currentYPos + 5;
                                                    }
                                                }
                                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                    posY = currentYPos + 25;
                                                    if (myPdfHeaderPage != null)
                                                    {
                                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                        posY = currentYPos + 5;
                                                    }
                                                    newPdfPage.Add(myPdfHeaderPage);
                                                    newPdfPage.Add(pdfLineBrk);
                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                PdfTablePage myPdfParentTotPage = myPdfParentTotals.CreateTablePage(new PdfArea(myPdfDocument, posX + 12, posY, width, height - posY));
                                                newPdfPage.Add(myPdfParentTotPage);
                                                currentYPos = myPdfParentTotPage.Area.BottomLeftVertex.Y;
                                                //
                                                double xPos3 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).TopLeftVertex.X;
                                                double yPos3 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).TopLeftVertex.Y;
                                                //
                                                Point pStart3 = new Point(Convert.ToInt32(xPos3), Convert.ToInt32(yPos3 - 2));
                                                Point pEnd3 = new Point(Convert.ToInt32(xPos3 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos3 - 2));
                                                PdfLine pdfLineBrk3 = new PdfLine(myPdfDocument, pStart3, pEnd3, Color.Black, 1);
                                                newPdfPage.Add(pdfLineBrk3);
                                                double xPos4 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                double yPos4 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                //
                                                Point pStart4 = new Point(Convert.ToInt32(xPos4), Convert.ToInt32(yPos4 + 10));
                                                Point pEnd4 = new Point(Convert.ToInt32(xPos4 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos4 + 10));
                                                PdfLine pdfLineBrk4 = new PdfLine(myPdfDocument, pStart4, pEnd4, Color.Black, 1);
                                                newPdfPage.Add(pdfLineBrk4);
                                                //
                                                double xPos5 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                double yPos5 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                //
                                                Point pStart5 = new Point(Convert.ToInt32(xPos5), Convert.ToInt32(yPos5 + 15));
                                                Point pEnd5 = new Point(Convert.ToInt32(xPos5 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos5 + 15));
                                                PdfLine pdfLineBrk5 = new PdfLine(myPdfDocument, pStart5, pEnd5, Color.Black, 1);
                                                newPdfPage.Add(pdfLineBrk5);
                                                //
                                                currentYPos = myPdfParentTotPage.Area.BottomLeftVertex.Y + 5;
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                break;
                        }
                        //PdfGrand Totals
                        #region PDF Grand Totals
                        if (htGrandTotalsNew.Keys.Count > 0)
                        {
                            IDictionaryEnumerator enumGrandTotals = htGrandTotalsNew.GetEnumerator();
                            if (htGrandTotalsNew.Keys.Count > 0)
                            {
                                dtGrandTotals.Rows.Add(dtGrandTotals.NewRow());
                            }
                            while (enumGrandTotals.MoveNext())
                            {
                                dtGrandTotals.Rows[dtGrandTotals.Rows.Count - 1][enumGrandTotals.Key.ToString()] = enumGrandTotals.Value.ToString();
                            }
                            if (dtGrandTotals.Columns.Contains("TrxID"))
                            {
                                dtGrandTotals.Columns.Remove("TrxID");
                            }
                            if (dtGrandTotals.Columns.Contains("Link1"))
                            {
                                dtGrandTotals.Columns.Remove("Link1");
                            }
                            if (dtGrandTotals.Columns.Contains("Link2"))
                            {
                                dtGrandTotals.Columns.Remove("Link2");
                            }
                            dtGrandTotals.Rows[0][0] = "Over all Production Cost ";
                            //Pdf Parent Totals
                            PdfTable myPdfGrandTotals = myPdfDocument.NewTable(fontSumTotals, dtGrandTotals.Rows.Count, dtGrandTotals.Columns.Count, 1);
                            myPdfGrandTotals.ImportDataTable(dtGrandTotals);
                            myPdfGrandTotals.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfGrandTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfGrandTotals.HeadersRow.SetFont(fontHeader1);
                            myPdfGrandTotals.SetColumnsWidth(intColHeaderWdts);
                            myPdfGrandTotals.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfGrandTotals.HeadersRow.SetForegroundColor(Color.White);
                            //
                            for (int cols = 1; cols < myPdfGrandTotals.Columns.Length; cols++)
                            {
                                myPdfGrandTotals.Columns[cols].SetContentAlignment(ContentAlignment.MiddleRight);
                            }
                            while (!myPdfGrandTotals.AllTablePagesCreated)
                            {
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    posY = currentYPos + 25;
                                    if (myPdfHeaderPage != null)
                                    {
                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                        posY = currentYPos + 5;
                                    }
                                    newPdfPage.Add(myPdfHeaderPage);
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    if (posY >= currentYPos)
                                    {
                                        if (myPdfHeaderPage != null)
                                        {
                                            currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                        }
                                        posY = currentYPos + 5;
                                    }
                                    else
                                    {
                                        posY = currentYPos + 5;
                                    }
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                    posY = currentYPos + 25;
                                    if (myPdfHeaderPage != null)
                                    {
                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                        posY = currentYPos + 5;
                                    }
                                    newPdfPage.Add(myPdfHeaderPage);
                                    newPdfPage.Add(pdfLineBrk);
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage myPdfGrandTotalsPage = myPdfGrandTotals.CreateTablePage(new PdfArea(myPdfDocument, posX + 12, posY, width, height - posY));
                                newPdfPage.Add(myPdfGrandTotalsPage);
                                currentYPos = myPdfGrandTotalsPage.Area.BottomLeftVertex.Y;
                                //
                                double xPos6 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).TopLeftVertex.X;
                                double yPos6 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).TopLeftVertex.Y;
                                //
                                Point pStart6 = new Point(Convert.ToInt32(xPos6), Convert.ToInt32(yPos6 - 2));
                                Point pEnd6 = new Point(Convert.ToInt32(xPos6 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos6 - 2));
                                PdfLine pdfLineBrk6 = new PdfLine(myPdfDocument, pStart6, pEnd6, Color.Black, 1);
                                newPdfPage.Add(pdfLineBrk6);
                                double xPos7 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                double yPos7 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                //
                                Point pStart7 = new Point(Convert.ToInt32(xPos7), Convert.ToInt32(yPos7 + 10));
                                Point pEnd7 = new Point(Convert.ToInt32(xPos7 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos7 + 10));
                                PdfLine pdfLineBrk7 = new PdfLine(myPdfDocument, pStart7, pEnd7, Color.Black, 1);
                                newPdfPage.Add(pdfLineBrk7);
                                //
                                //double xPos8 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                //double yPos8 = myPdfGrandTotalsPage.CellArea(myPdfGrandTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                //
                                //Point pStart8 = new Point(Convert.ToInt32(xPos8), Convert.ToInt32(yPos8 + 15));
                                //Point pEnd8 = new Point(Convert.ToInt32(xPos8 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos8 + 15));
                                //PdfLine pdfLineBrk8 = new PdfLine(myPdfDocument, pStart8, pEnd8, Color.Black, 1);
                                //newPdfPage.Add(pdfLineBrk8);
                                //
                                currentYPos = myPdfGrandTotalsPage.Area.BottomLeftVertex.Y + 5;
                            }
                        }
                        #endregion

                        newPdfPage.SaveToDocument();
                        CreatePDFDocument(fileName);
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Report Style 661
        public void ReportStyle661(DataTable[] dtAll, DataTable dtHeader, ArrayList ArrhtPFormats, bool PLayout, ArrayList ArrArrWidths, ArrayList ArrHtColNameValues, string fileName)
        {
            try
            {
                if ((bool)PLayout)
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                }
                else
                {
                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                    pgHeight = 50;
                    pgWidth = 100;
                }
                if (dtAll.Length > 0)
                {
                    string imgpath = PDFImagePath();
                    PdfImage LogoImage = null;
                    //
                    PdfTablePage myPdfHeaderPage = null;
                    PdfLine pdfLineBrk = null;
                    //
                    Font fontHeader1 = new Font("Verdana", 6, FontStyle.Bold);
                    Font fontHeader2 = new Font("Verdana", 6, FontStyle.Bold);
                    Font fontHeader3 = new Font("Verdana", 6, FontStyle.Regular);
                    Font fontSumTotals = new Font("Verdana", 6, FontStyle.Bold);
                    Font fontMainHeader = new Font("Verdana", 6, FontStyle.Bold);
                    //
                    ArrayList alRemovedColumns = new ArrayList();
                    int[] intColHeaderWdts = null;
                    if (!string.IsNullOrEmpty(imgpath))
                    {
                        LogoImage = myPdfDocument.NewImage(imgpath);
                    }
                    newPdfPage = GetHeaderPDFTableStyle1(dtHeader, out myHeaderPdfTablePage);
                    #region PDF Header
                    DataTable dtMainHeader = new DataTable();
                    foreach (DataColumn dcHeader in dtAll[2].Columns)
                    {
                        switch (dcHeader.ColumnName)
                        {
                            case "Link1":
                            case "Link2":
                            case "TrxID":
                                {
                                    alRemovedColumns.Add(dcHeader.Ordinal);
                                    break;
                                }
                            default:
                                {
                                    dtMainHeader.Columns.Add(dcHeader.ColumnName.ToString());
                                    break;
                                }
                        }
                    }
                    if (dtAll[2].Columns.Contains("TrxID"))
                    {
                        dtAll[2].Columns["TrxID"].SetOrdinal(0);
                    }
                    if (dtAll[2].Columns.Contains("Link1"))
                    {
                        dtAll[2].Columns["Link1"].SetOrdinal(0);
                    }
                    if (dtAll[2].Columns.Contains("Link2"))
                    {
                        dtAll[2].Columns["Link2"].SetOrdinal(0);
                    }
                    int[] arr2Widths = (int[])ArrArrWidths[2];
                    ArrayList alAllColWidths = new ArrayList();
                    int[] colBudgetWidths = (int[])ArrArrWidths[2];
                    int colPos = 0;
                    for (int cnt = 0; cnt < colBudgetWidths.Length; cnt++)
                    {
                        if (!alRemovedColumns.Contains(cnt))
                        {
                            if (colBudgetWidths[cnt] != 0)
                            {
                                alAllColWidths.Add(colBudgetWidths[cnt]);
                                colPos++;
                            }
                        }
                    }
                    intColHeaderWdts = (int[])alAllColWidths.ToArray(typeof(int));
                    dtMainHeader.Rows.Add(dtMainHeader.NewRow());
                    for (int col = 0; col < dtMainHeader.Columns.Count; col++)
                    {
                        dtMainHeader.Rows[dtMainHeader.Rows.Count - 1][dtMainHeader.Columns[col].ToString()] = "SKIP";
                    }
                    PdfTable myPdfHeader = myPdfDocument.NewTable(fontMainHeader, dtMainHeader.Rows.Count, dtMainHeader.Columns.Count, 1);
                    myPdfHeader.ImportDataTable(dtMainHeader);
                    myPdfHeader.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfHeader.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfHeader.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfHeader.SetColumnsWidth(intColHeaderWdts);
                    foreach (PdfCell pHeaderCll in myPdfHeader.HeadersRow.Cells)
                    {
                        string labelName = pHeaderCll.Content.ToString();
                        IEnumerable htColNameVals = (IEnumerable)ArrHtColNameValues[2];
                        foreach (DictionaryEntry de in htColNameVals)
                        {
                            if (de.Key.ToString() == labelName)
                            {
                                pHeaderCll.SetContent(de.Value);
                            }
                        }
                    }
                    foreach (PdfCell pskipCll in myPdfHeader.Cells)
                    {
                        string labelValue = pskipCll.Content.ToString();
                        switch (labelValue)
                        {
                            case "SKIP":
                                {
                                    pskipCll.SetBackgroundColor(Color.White);
                                    pskipCll.SetForegroundColor(Color.White);
                                    break;
                                }
                        }
                    }
                    posY = currentYPos + 10;
                    currentYPos = posY;
                    //
                    myPdfHeaderPage = myPdfHeader.CreateTablePage(new PdfArea(myPdfDocument, posX + 20, posY, width, (height - (posY))));
                    newPdfPage.Add(myPdfHeaderPage);
                    //
                    double xPos = myPdfHeaderPage.CellArea(myPdfHeader.HeadersRow.Index, 0).BottomLeftVertex.X;
                    double yPos = myPdfHeaderPage.CellArea(myPdfHeader.HeadersRow.Index, 0).BottomLeftVertex.Y;
                    //
                    Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 5));
                    Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 5));
                    pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    //
                    #endregion
                    for (int dtCnt = 0; dtCnt < dtAll.Length; dtCnt++)
                    {
                        string strTableName = dtAll[0].TableName.ToString();
                        switch (strTableName)
                        {
                            case "MainLink":
                                {
                                    DataTable dtParentTotals = new DataTable();
                                    #region Table 0
                                    for (int rws = 0; rws <= dtAll[dtCnt].Rows.Count; rws++)
                                    {
                                        DataTable dtAmounts = new DataTable();
                                        Hashtable htIndvGrandTotals = new Hashtable();
                                        DataRow[] foundRows = null;
                                        string strLink1 = string.Empty;
                                        string strLink1Name = string.Empty;
                                        if (dtAll[dtCnt].Columns.Contains("Link1"))
                                        {
                                            foundRows = dtAll[dtCnt].Select("Link1 ='" + dtAll[dtCnt].Rows[0]["Link1"].ToString() + "'");
                                            strLink1 = dtAll[dtCnt].Rows[0]["Link1"].ToString();
                                            strLink1Name = dtAll[dtCnt].Rows[0]["Description"].ToString();
                                            if (foundRows.Length > 0)
                                            {
                                                int rowIndex = dtAll[dtCnt].Rows.IndexOf(foundRows[0]);
                                                DataTable dtNew = GetFilteredDataRows(dtAll, dtCnt, foundRows, rowIndex);
                                                int[] widths;
                                                int[] colParentWidths;
                                                dtNew = GetArrayWidths(ArrArrWidths, 0, 2, alRemovedColumns, dtNew, out widths, out colParentWidths);
                                                if (dtNew.Columns.Contains("NumberID"))
                                                {
                                                    dtNew.Columns.Remove("NumberID");
                                                }

                                                PdfTable myPdfTableHeaderFormat = myPdfDocument.NewTable(fontHeader2, dtNew.Rows.Count, dtNew.Columns.Count, 1);
                                                myPdfTableHeaderFormat.ImportDataTable(dtNew);
                                                myPdfTableHeaderFormat.SetBorders(Color.Black, 1, BorderType.None);
                                                myPdfTableHeaderFormat.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                myPdfTableHeaderFormat.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                myPdfTableHeaderFormat.HeadersRow.SetFont(fontHeader1);
                                                myPdfTableHeaderFormat.HeadersRow.SetBackgroundColor(Color.White);
                                                myPdfTableHeaderFormat.HeadersRow.SetForegroundColor(Color.White);
                                                //
                                                double dblTmpPosX = posX + 5;
                                                while (!myPdfTableHeaderFormat.AllTablePagesCreated)
                                                {
                                                    //Setting the Y position and if required creating new page
                                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        posY = currentYPos + 25;
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                            posY = currentYPos + 5;
                                                        }
                                                        newPdfPage.Add(myPdfHeaderPage);
                                                        newPdfPage.Add(pdfLineBrk);
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    else
                                                    {
                                                        if (posY >= currentYPos)
                                                        {
                                                            if (myPdfHeaderPage != null)
                                                            {
                                                                currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                            }
                                                            posY = currentYPos + 12;
                                                        }
                                                        else
                                                        {
                                                            posY = currentYPos + 12;
                                                        }
                                                    }
                                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                        posY = currentYPos + 25;
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 9 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                            posY = currentYPos;
                                                        }
                                                        newPdfPage.Add(myPdfHeaderPage);
                                                        newPdfPage.Add(pdfLineBrk);
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    PdfTablePage myPdfHeaderFormattedPage = myPdfTableHeaderFormat.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX, posY, width, (height - (posY))));
                                                    newPdfPage.Add(myPdfHeaderFormattedPage);
                                                    currentYPos = myPdfHeaderFormattedPage.Area.BottomLeftVertex.Y;
                                                    //
                                                    double xPos1 = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                    double yPos1 = myPdfHeaderFormattedPage.CellArea(myPdfTableHeaderFormat.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                    //
                                                    Point pStart1 = new Point(Convert.ToInt32(xPos1), Convert.ToInt32(yPos1 + 2));
                                                    Point pEnd1 = new Point(Convert.ToInt32(xPos1 + 80), Convert.ToInt32(yPos1 + 2));
                                                    PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                                    newPdfPage.Add(pdfLineBrk1);
                                                }
                                                //
                                                #region Table 1
                                                if (dtAll[dtCnt + 1].Rows.Count > 0)
                                                {
                                                    DataRow[] dtChild1FoundRows = null;
                                                    DataTable dtChild1 = new DataTable();
                                                    //
                                                    for (int rws1 = 0; rws1 < dtAll[dtCnt + 1].Rows.Count; rws1++)
                                                    {
                                                        if ((dtAll[dtCnt + 1].Columns.Contains("Link1")) && (dtAll[dtCnt + 1].Columns.Contains("Link2")))
                                                        {
                                                            dtChild1FoundRows = dtAll[dtCnt + 1].Select("Link1 ='" + strLink1 + "'");
                                                            string strLink2 = string.Empty;
                                                            string strName = string.Empty;
                                                            if (dtChild1FoundRows.Length > 0)
                                                            {
                                                                int drFoundRws = 0;
                                                                for (; drFoundRws < dtChild1FoundRows.Length; drFoundRws++)
                                                                {
                                                                    strLink2 = dtAll[dtCnt + 1].Rows[rws1]["Link2"].ToString();
                                                                    strName = dtAll[dtCnt + 1].Rows[rws1]["Description"].ToString();
                                                                    int rowIndex1 = dtAll[dtCnt + 1].Rows.IndexOf(dtChild1FoundRows[drFoundRws]);
                                                                    dtChild1 = new DataTable();
                                                                    if (drFoundRws == 0)
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, rowIndex1);
                                                                    }
                                                                    else
                                                                    {
                                                                        dtChild1 = GetFilteredDataRows(dtAll, dtCnt + 1, dtChild1FoundRows, drFoundRws);
                                                                    }
                                                                    //
                                                                    widths = null;
                                                                    colParentWidths = null;
                                                                    alRemovedColumns = new ArrayList();
                                                                    dtChild1 = GetArrayWidths(ArrArrWidths, 1, 3, alRemovedColumns, dtChild1, out widths, out colParentWidths);
                                                                    //
                                                                    /*   double dblTmpPosX1 = posX + 10;
                                                                       PdfTable myPdfChild1 = myPdfDocument.NewTable(fontHeader2, dtChild1.Rows.Count, dtChild1.Columns.Count, 1);
                                                                       myPdfChild1.ImportDataTable(dtChild1);
                                                                       myPdfChild1.SetBorders(Color.Black, 1, BorderType.None);
                                                                       myPdfChild1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                       myPdfChild1.SetColumnsWidth(colParentWidths);
                                                                       myPdfChild1.HeadersRow.SetFont(fontHeader1);
                                                                       myPdfChild1.HeadersRow.SetBackgroundColor(Color.White);
                                                                       myPdfChild1.HeadersRow.SetForegroundColor(Color.White);
                                                                       //
                                                                       while (!myPdfChild1.AllTablePagesCreated)
                                                                       {
                                                                           //Setting the Y position and if required creating new page
                                                                           if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                           {
                                                                               posY = 70;
                                                                               currentYPos = 70;
                                                                               newPdfPage.SaveToDocument();
                                                                               //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                               newPdfPage = myPdfDocument.NewPage();
                                                                               newPdfPage.Add(myHeaderPdfTablePage);
                                                                               if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                               posY = currentYPos + 25;
                                                                               if (myPdfHeaderPage != null)
                                                                               {
                                                                                   currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                   posY = currentYPos + 5;
                                                                               }
                                                                               newPdfPage.Add(myPdfHeaderPage);
                                                                               newPdfPage.Add(pdfLineBrk);
                                                                               newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));

                                                                           }
                                                                           else
                                                                           {
                                                                               if (posY >= currentYPos)
                                                                               {
                                                                                   if (myPdfHeaderPage != null)
                                                                                   {
                                                                                       currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                                                   }
                                                                                   posY = currentYPos + 5;
                                                                               }
                                                                               else
                                                                               {
                                                                                   posY = currentYPos + 5;
                                                                               }
                                                                           }
                                                                           if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                           {
                                                                               posY = 70;
                                                                               currentYPos = 70;
                                                                               newPdfPage.SaveToDocument();
                                                                               //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                               newPdfPage = myPdfDocument.NewPage();
                                                                               newPdfPage.Add(myHeaderPdfTablePage);
                                                                               if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                               posY = currentYPos + 25;
                                                                               if (myPdfHeaderPage != null)
                                                                               {
                                                                                   currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                   posY = currentYPos + 5;
                                                                               }
                                                                               newPdfPage.Add(myPdfHeaderPage);
                                                                               newPdfPage.Add(pdfLineBrk);
                                                                               newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                           }
                                                                           PdfTablePage myPdfChildPage1 = myPdfChild1.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX1, posY, width, height - posY));
                                                                           newPdfPage.Add(myPdfChildPage1);
                                                                           currentYPos = myPdfChildPage1.Area.BottomLeftVertex.Y;
                                                                           //
                                                                           double xPos2 = myPdfChildPage1.CellArea(myPdfChild1.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                                           double yPos2 = myPdfChildPage1.CellArea(myPdfChild1.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                                           //
                                                                           Point pStart2 = new Point(Convert.ToInt32(xPos2), Convert.ToInt32(yPos2 + 2));
                                                                           Point pEnd2 = new Point(Convert.ToInt32(xPos2 + (80)), Convert.ToInt32(yPos2 + 2));
                                                                           PdfLine pdfLineBrk2 = new PdfLine(myPdfDocument, pStart2, pEnd2, Color.Black, 1);
                                                                           newPdfPage.Add(pdfLineBrk2);
                                                                       }*/
                                                                    #region Table 2
                                                                    if (dtAll[dtCnt + 2].Rows.Count > 0)
                                                                    {
                                                                        DataRow[] dtChild2FoundRows = null;
                                                                        DataTable dtChild2 = new DataTable();
                                                                        int dt2ColumnsCount = 0;
                                                                        ArrayList arrRwIndex = new ArrayList();
                                                                        IEnumerable htPFormatModes1 = (IEnumerable)ArrhtPFormats[2];
                                                                        Hashtable htPFormatModes2 = (Hashtable)htPFormatModes1;
                                                                        Hashtable htGrandTotals = new Hashtable();
                                                                        for (int rws2 = 0; rws2 < dtAll[dtCnt + 2].Rows.Count; rws2++)
                                                                        {
                                                                            if ((dtAll[dtCnt + 2].Columns.Contains("Link1")) && (dtAll[dtCnt + 2].Columns.Contains("Link2")))
                                                                            {
                                                                                dtChild2FoundRows = dtAll[dtCnt + 2].Select(" Link1 ='" + strLink1 + "' and Link2 ='" + strLink2 + "'");

                                                                                if (dtChild2FoundRows.Length > 0)
                                                                                {
                                                                                    for (int drRws2 = 0; drRws2 < dtChild2FoundRows.Length; drRws2++)
                                                                                    {
                                                                                        int rowIndex2 = dtAll[dtCnt + 2].Rows.IndexOf(dtChild2FoundRows[drRws2]);
                                                                                        arrRwIndex.Add(rowIndex2);
                                                                                        DataRow dtChRow2 = dtChild2.NewRow();
                                                                                        if (dtChild2.Columns.Count == 0)
                                                                                        {
                                                                                            for (int x = 0; x < dtAll[dtCnt + 2].Columns.Count; x++)
                                                                                            {
                                                                                                dtChild2.Columns.Add(dtAll[dtCnt + 2].Columns[x].ColumnName);
                                                                                            }
                                                                                            dt2ColumnsCount = dtChild2.Columns.Count;
                                                                                        }
                                                                                        for (int i = 0; i < dtChild2.Columns.Count; i++)
                                                                                        {
                                                                                            if (dtAll[dtCnt + 2].Columns.Contains(dtChild2.Columns[i].ColumnName))
                                                                                            {
                                                                                                switch (dtChild2.Columns[i].ColumnName)
                                                                                                {
                                                                                                    //PARENT
                                                                                                    case "Account":
                                                                                                        dtChRow2[i] = "";
                                                                                                        break;
                                                                                                    default:
                                                                                                        dtChRow2[i] = dtChild2FoundRows[drRws2].ItemArray[i].ToString();
                                                                                                        break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        string childTrxID = string.Empty;
                                                                                        string strCustom = string.Empty;
                                                                                        string strTotalAmount = string.Empty;
                                                                                        string[] grandFormats = (string[])htPFormatModes2[rowIndex2];
                                                                                        double TotalAmount = 0;
                                                                                        foreach (string val in grandFormats)
                                                                                        {
                                                                                            string[] strvalues = val.Split('~');
                                                                                            string strformat = string.Empty;
                                                                                            if (strvalues.Length > 1)
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                strformat = strvalues[0];
                                                                                            }
                                                                                            switch (strformat)
                                                                                            {
                                                                                                case "RAlign":
                                                                                                    {
                                                                                                        if (strvalues.Length > 1)
                                                                                                        {
                                                                                                            strCustom = string.Empty;
                                                                                                            decimal amount;
                                                                                                            TotalAmount = 0;
                                                                                                            string amt = string.Empty;
                                                                                                            int colNo = Convert.ToInt32(strvalues[1].ToString()) + 2;
                                                                                                            string colName = dtChild2.Columns[colNo].ColumnName.Trim().ToString();
                                                                                                            if (!htGrandTotals.ContainsKey(colName))
                                                                                                            {
                                                                                                                Decimal.TryParse(dtChRow2[colNo].ToString(), out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotals.Add(colName, amt);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                                                                                if (!string.IsNullOrEmpty(dtChRow2[colNo].ToString()))
                                                                                                                {
                                                                                                                    TotalAmount = TotalAmount + Convert.ToDouble(dtChRow2[colNo].ToString());
                                                                                                                }
                                                                                                                strTotalAmount = Convert.ToString(TotalAmount);
                                                                                                                Decimal.TryParse(strTotalAmount, out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htGrandTotals[colName] = amt;
                                                                                                            }
                                                                                                            if (!htIndvGrandTotals.ContainsKey(colName))
                                                                                                            {
                                                                                                                Decimal.TryParse(dtChRow2[colNo].ToString(), out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htIndvGrandTotals.Add(colName, amt);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                TotalAmount = Convert.ToDouble(htIndvGrandTotals[colName].ToString());
                                                                                                                if (!string.IsNullOrEmpty(dtChRow2[colNo].ToString()))
                                                                                                                {
                                                                                                                    TotalAmount = TotalAmount + Convert.ToDouble(dtChRow2[colNo].ToString());
                                                                                                                }
                                                                                                                strTotalAmount = Convert.ToString(TotalAmount);
                                                                                                                Decimal.TryParse(strTotalAmount, out amount);
                                                                                                                amt = string.Format("{0:N}", amount);
                                                                                                                htIndvGrandTotals[colName] = amt;
                                                                                                            }
                                                                                                        }
                                                                                                        break;
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                        dtChild2.Rows.Add(dtChRow2);
                                                                                        dtChild2.AcceptChanges();
                                                                                        dtChild2.TableName = dtAll[dtCnt + 2].TableName;
                                                                                        if (dtAmounts.Columns.Count == 0)
                                                                                        {
                                                                                            foreach (DataColumn dcTotals in dtChild2.Columns)
                                                                                            {
                                                                                                dtAmounts.Columns.Add(dcTotals.ColumnName.ToString());
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                                                                                    if (htGrandTotals.Keys.Count > 0)
                                                                                    {
                                                                                        dtChild2.Rows.Add(dtChild2.NewRow());

                                                                                        while (enumTot.MoveNext())
                                                                                        {
                                                                                            dtChild2.Rows[dtChild2.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                                                                                        }
                                                                                        if (dtChild2.Columns.Contains("TrxID"))
                                                                                        {
                                                                                            dtChild2.Columns.Remove("TrxID");
                                                                                        }
                                                                                        if (dtChild2.Columns.Contains("Link1"))
                                                                                        {
                                                                                            dtChild2.Columns.Remove("Link1");
                                                                                        }
                                                                                        if (dtChild2.Columns.Contains("Link2"))
                                                                                        {
                                                                                            dtChild2.Columns.Remove("Link2");
                                                                                        }
                                                                                        dtChild2.Rows[dtChild2.Rows.Count - 1][0] = "";//"Total " + strName;
                                                                                        double dblTmpPosX2 = posX + 20;
                                                                                        /*New Code for showing only Account Names*/
                                                                                        //Chandu
                                                                                        DataTable dtAccounts = new DataTable();
                                                                                        foreach (DataColumn dcAcc in dtChild2.Columns)
                                                                                        {
                                                                                            dtAccounts.Columns.Add(dcAcc.ColumnName);
                                                                                        }
                                                                                        dtAccounts.Rows.Add(dtAccounts.NewRow());
                                                                                        if (dtChild2.Rows.Count > 0)
                                                                                        {
                                                                                            foreach (DataColumn dcCols in dtChild2.Columns)
                                                                                            {
                                                                                                dtAccounts.Rows[dtAccounts.Rows.Count - 1][dcCols.ColumnName] = dtChild2.Rows[dtChild2.Rows.Count - 1][dcCols.ColumnName].ToString();
                                                                                            }
                                                                                        }
                                                                                        dtAccounts.Rows[dtAccounts.Rows.Count - 1][0] = strName;
                                                                                        //
                                                                                        //Pdf Childs
                                                                                        PdfTable myPdf2Childs = myPdfDocument.NewTable(fontHeader3, dtAccounts.Rows.Count, dtAccounts.Columns.Count, 1);
                                                                                        myPdf2Childs.ImportDataTable(dtAccounts);
                                                                                        myPdf2Childs.SetColumnsWidth(intColHeaderWdts);
                                                                                        myPdf2Childs.SetBorders(Color.Black, 1, BorderType.None);
                                                                                        myPdf2Childs.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                        myPdf2Childs.HeadersRow.SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                                        myPdf2Childs.HeadersRow.SetFont(fontHeader1);
                                                                                        myPdf2Childs.HeadersRow.SetBackgroundColor(Color.White);
                                                                                        myPdf2Childs.HeadersRow.SetForegroundColor(Color.White);
                                                                                        //
                                                                                        //for (int cols = 1; cols < myPdf2Childs.Columns.Length; cols++)
                                                                                        //{
                                                                                        //    myPdf2Childs.Rows[myPdf2Childs.Rows.Length - 1][cols].SetBackgroundColor(Color.Gainsboro);
                                                                                        //}
                                                                                        //Child Table Rows Formats
                                                                                        foreach (int intRwIndexNos in arrRwIndex)
                                                                                        {
                                                                                            int i = intRwIndexNos;
                                                                                            string[] arrformats = (string[])htPFormatModes2[i];
                                                                                            foreach (string val in arrformats)
                                                                                            {
                                                                                                string[] strvalues = val.Split('~');
                                                                                                int intNo = 0;
                                                                                                string strformat = string.Empty;
                                                                                                if (strvalues.Length > 1)
                                                                                                {
                                                                                                    strformat = strvalues[0];
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    strformat = strvalues[0];
                                                                                                }
                                                                                                switch (strformat)
                                                                                                {
                                                                                                    case "pFont":
                                                                                                        {
                                                                                                            myPdf2Childs.Rows[i].SetFont(SumRowFont);
                                                                                                            break;
                                                                                                        }
                                                                                                    case "pUnderLine":
                                                                                                        {
                                                                                                            myPdf2Childs.Rows[i].SetFont(FontUnderline);
                                                                                                            break;
                                                                                                        }
                                                                                                    case "pBox":
                                                                                                        {
                                                                                                            for (int clCnt = 1; clCnt < myPdf2Childs.Rows[i].Cells.Count; clCnt++)
                                                                                                            {
                                                                                                                PdfTablePage newPdfTablePage = myPdf2Childs.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                                                                                PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                                                                                pr.StrokeWidth = 1;
                                                                                                                newPdfPage.Add(pr);
                                                                                                            }
                                                                                                            break;
                                                                                                        }
                                                                                                    case "pLnSkip":
                                                                                                        {
                                                                                                            foreach (PdfCell pcll in myPdf2Childs.Cells)
                                                                                                            {
                                                                                                                if (pcll.Content.ToString() == "SKIP")
                                                                                                                {
                                                                                                                    pcll.SetBackgroundColor(Color.White);
                                                                                                                    pcll.SetForegroundColor(Color.White);
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            break;
                                                                                                        }
                                                                                                    case "RAlign":
                                                                                                        {
                                                                                                            intNo = Convert.ToInt32(strvalues[1]) - 1;
                                                                                                            myPdf2Childs.Columns[intNo].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                                                            break;
                                                                                                        }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        //
                                                                                        myPdf2Childs.Rows[myPdf2Childs.Rows.Length - 1].SetFont(fontSumTotals);
                                                                                        while (!myPdf2Childs.AllTablePagesCreated)
                                                                                        {
                                                                                            //Setting the Y position and if required creating new page
                                                                                            if (currentYPos > myPdfDocument.PageHeight - 50)
                                                                                            {
                                                                                                posY = 70;
                                                                                                currentYPos = 70;
                                                                                                newPdfPage.SaveToDocument();
                                                                                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                                newPdfPage = myPdfDocument.NewPage();
                                                                                                newPdfPage.Add(myHeaderPdfTablePage);
                                                                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                                                posY = currentYPos + 25;
                                                                                                if (myPdfHeaderPage != null)
                                                                                                {
                                                                                                    currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                                    posY = currentYPos + 5;
                                                                                                }
                                                                                                newPdfPage.Add(myPdfHeaderPage);
                                                                                                newPdfPage.Add(pdfLineBrk);
                                                                                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if (posY >= currentYPos)
                                                                                                {
                                                                                                    if (myPdfHeaderPage != null)
                                                                                                    {
                                                                                                        currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                                                                    }
                                                                                                    posY = currentYPos + 5;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    posY = currentYPos + 5;
                                                                                                }
                                                                                            }
                                                                                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                                                            {
                                                                                                posY = 70;
                                                                                                currentYPos = 70;
                                                                                                newPdfPage.SaveToDocument();
                                                                                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                                                                newPdfPage = myPdfDocument.NewPage();
                                                                                                newPdfPage.Add(myHeaderPdfTablePage);
                                                                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                                                                posY = currentYPos + 25;
                                                                                                if (myPdfHeaderPage != null)
                                                                                                {
                                                                                                    currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                                                                    posY = currentYPos + 5;
                                                                                                }
                                                                                                newPdfPage.Add(myPdfHeaderPage);
                                                                                                newPdfPage.Add(pdfLineBrk);
                                                                                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                                                            }
                                                                                            PdfTablePage myPdf2ChildPage = myPdf2Childs.CreateTablePage(new PdfArea(myPdfDocument, dblTmpPosX2, posY, width, height - posY));
                                                                                            newPdfPage.Add(myPdf2ChildPage);
                                                                                            currentYPos = myPdf2ChildPage.Area.BottomLeftVertex.Y;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion
                                            }
                                        }
                                        #region Parent Totals
                                        IDictionaryEnumerator enumIndvTot = htIndvGrandTotals.GetEnumerator();
                                        if (htIndvGrandTotals.Keys.Count > 0)
                                        {
                                            dtAmounts.Rows.Add(dtAmounts.NewRow());

                                            while (enumIndvTot.MoveNext())
                                            {
                                                dtAmounts.Rows[dtAmounts.Rows.Count - 1][enumIndvTot.Key.ToString()] = enumIndvTot.Value.ToString();
                                            }
                                            if (dtAmounts.Columns.Contains("TrxID"))
                                            {
                                                dtAmounts.Columns.Remove("TrxID");
                                            }
                                            if (dtAmounts.Columns.Contains("Link1"))
                                            {
                                                dtAmounts.Columns.Remove("Link1");
                                            }
                                            if (dtAmounts.Columns.Contains("Link2"))
                                            {
                                                dtAmounts.Columns.Remove("Link2");
                                            }
                                            dtAmounts.Rows[0][0] = "Total " + strLink1Name;
                                            //Pdf Parent Totals
                                            PdfTable myPdfParentTotals = myPdfDocument.NewTable(fontSumTotals, dtAmounts.Rows.Count, dtAmounts.Columns.Count, 1);
                                            myPdfParentTotals.ImportDataTable(dtAmounts);
                                            myPdfParentTotals.SetBorders(Color.Black, 1, BorderType.None);
                                            myPdfParentTotals.SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfParentTotals.HeadersRow.SetFont(fontHeader1);
                                            myPdfParentTotals.SetColumnsWidth(intColHeaderWdts);
                                            myPdfParentTotals.HeadersRow.SetBackgroundColor(Color.White);
                                            myPdfParentTotals.HeadersRow.SetForegroundColor(Color.White);
                                            //
                                            for (int cols = 1; cols < myPdfParentTotals.Columns.Length; cols++)
                                            {
                                                myPdfParentTotals.Columns[cols].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                            while (!myPdfParentTotals.AllTablePagesCreated)
                                            {
                                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                    posY = currentYPos + 25;
                                                    if (myPdfHeaderPage != null)
                                                    {
                                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                        posY = currentYPos + 5;
                                                    }
                                                    newPdfPage.Add(myPdfHeaderPage);
                                                    newPdfPage.Add(pdfLineBrk);
                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                else
                                                {
                                                    if (posY >= currentYPos)
                                                    {
                                                        if (myPdfHeaderPage != null)
                                                        {
                                                            currentYPos = posY + 15 + (myPdfHeaderPage.Area.PosY - posY) / 2;
                                                        }
                                                        posY = currentYPos + 5;
                                                    }
                                                    else
                                                    {
                                                        posY = currentYPos + 5;
                                                    }
                                                }
                                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    newPdfPage.Add(myHeaderPdfTablePage);
                                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                                    posY = currentYPos + 25;
                                                    if (myPdfHeaderPage != null)
                                                    {
                                                        currentYPos = posY + 15 + ((myPdfHeaderPage.Area.PosY - posY) / 2);
                                                        posY = currentYPos + 5;
                                                    }
                                                    newPdfPage.Add(myPdfHeaderPage);
                                                    newPdfPage.Add(pdfLineBrk);
                                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, 100, myPdfDocument.PageHeight - 50, 450, 50), ContentAlignment.MiddleRight, "Page " + Convert.ToString((++pageCnt))));
                                                }
                                                PdfTablePage myPdfParentTotPage = myPdfParentTotals.CreateTablePage(new PdfArea(myPdfDocument, posX + 20, posY, width, height - posY));
                                                newPdfPage.Add(myPdfParentTotPage);
                                                currentYPos = myPdfParentTotPage.Area.BottomLeftVertex.Y;
                                                //
                                                double xPos3 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).TopLeftVertex.X;
                                                double yPos3 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).TopLeftVertex.Y;
                                                //
                                                Point pStart3 = new Point(Convert.ToInt32(xPos3), Convert.ToInt32(yPos3 - 2));
                                                Point pEnd3 = new Point(Convert.ToInt32(xPos3 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos3 - 2));
                                                PdfLine pdfLineBrk3 = new PdfLine(myPdfDocument, pStart3, pEnd3, Color.Black, 1);
                                                newPdfPage.Add(pdfLineBrk3);
                                                double xPos4 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                double yPos4 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                //
                                                Point pStart4 = new Point(Convert.ToInt32(xPos4), Convert.ToInt32(yPos4 + 10));
                                                Point pEnd4 = new Point(Convert.ToInt32(xPos4 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos4 + 10));
                                                PdfLine pdfLineBrk4 = new PdfLine(myPdfDocument, pStart4, pEnd4, Color.Black, 1);
                                                newPdfPage.Add(pdfLineBrk4);
                                                //
                                                //double xPos5 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.X;
                                                //double yPos5 = myPdfParentTotPage.CellArea(myPdfParentTotals.HeadersRow.Index, 0).BottomLeftVertex.Y;
                                                ////
                                                //Point pStart5 = new Point(Convert.ToInt32(xPos5), Convert.ToInt32(yPos5 + 15));
                                                //Point pEnd5 = new Point(Convert.ToInt32(xPos5 + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos5 + 15));
                                                //PdfLine pdfLineBrk5 = new PdfLine(myPdfDocument, pStart5, pEnd5, Color.Black, 1);
                                                //newPdfPage.Add(pdfLineBrk5);
                                                //
                                                currentYPos = myPdfParentTotPage.Area.BottomLeftVertex.Y + 5;
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion
                                }
                                break;
                        }
                        newPdfPage.SaveToDocument();
                        CreatePDFDocument(fileName);
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion


        #endregion

        #region Old Report Styles

        #region Old Report Style 1
        public void OldReportStyle1(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string GVXml, string tableLayout)
        {
            try
            {
                bool dataPrinted = false;
                int pageCnt = 0;
                Hashtable m_htPagebrk = new Hashtable();
                Hashtable m_htRightAlign = new Hashtable();
                Hashtable m_htDateFormat = new Hashtable();
                string m_AmountNodes = string.Empty;
                string m_DateFormats = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(GVXml);
                XmlNode nodeGridLayout = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout");
                foreach (XmlNode nodetreenode in nodeGridLayout.ChildNodes)
                {
                    //Get the treeNodeName
                    string treeNodeName = nodetreenode.SelectSingleNode("Node").InnerText;
                    dt = XMLToDataTable(GVXml, treeNodeName, "");
                    dt = objclsrpt.ChangeDateAndAmountFormats(dt, GVXml, treeNodeName);
                    int pgHeight = 0;
                    int pgWidth = 0;
                    if (dt.Columns.Count > 10 && dt.Columns.Count <= 20)
                    {
                        myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(32, 28));
                        pgHeight = 820;
                        pgWidth = 250;
                    }
                    else
                    {
                        if (dt.Columns.Count >= 6 && dt.Columns.Count <= 10)
                        {
                            myPdfDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(30, 28));
                            pgHeight = 820;
                            pgWidth = 470;
                        }
                        else
                        {
                            myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                            pgHeight = 820;
                            pgWidth = 300;
                        }
                    }
                    if (dt.Rows.Count > 0)
                    {
                        if (!dataPrinted)
                            dataPrinted = true;
                        if (dt.Columns.Contains("Notes"))
                        {
                            NotesDT = reportsBO.GenerateNotesDatatable(dt);
                            dt.Columns.Remove("Notes");
                        }
                        //Getting the columns to be displayed in grid
                        XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                        //Getting the rows to print
                        XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                        int pageBreaks = 0;
                        //Considering the PLayout only for the first treenode
                        if (nodeRowList != null)
                        {
                            if (nodeRowList.ChildNodes != null)
                            {
                                foreach (XmlNode nodeRow in nodeRowList.ChildNodes)
                                {
                                    if (nodeRow.Attributes["TrxID"] != null)
                                    {
                                        string trxID = nodeRow.Attributes["TrxID"].Value;
                                        DataRow[] foundRows;
                                        foundRows = dt.Select("TrxID ='" + trxID + "'");
                                        if (foundRows.Length > 0)
                                        {
                                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                                            if (nodeRow.Attributes["pLnSkip"] != null)
                                            {
                                                if (nodeRow.Attributes["pLnSkip"].Value.ToString().Trim() != "0")
                                                {
                                                    for (int skipCnt = 0; skipCnt < Convert.ToInt32(nodeRow.Attributes["pLnSkip"].Value.Trim()); skipCnt++)
                                                    {
                                                        // Adding each row at a time
                                                        DataRow dSkipRow = dt.NewRow();
                                                        for (int col = 0; col < dt.Columns.Count; col++)
                                                        {
                                                            dSkipRow[dt.Columns[col].ColumnName] = "SKIP";
                                                        }
                                                        dt.Rows.InsertAt(dSkipRow, rowIndex + 1);
                                                        dt.AcceptChanges();
                                                    }
                                                }
                                            }
                                            if (nodeRow.Attributes["pPgBreak"] != null)
                                            {
                                                if (nodeRow.Attributes["pPgBreak"].Value.ToString().Trim() == "1")
                                                {
                                                    pageBreaks++;
                                                    m_htPagebrk.Add(pageBreaks, rowIndex);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        DataTable dtColumnWidths = new DataTable();
                        dtColumnWidths = SetColumnsWidths(dt);
                        // Variable to get the Column count of the parent table
                        int colsInTab = dt.Columns.Count - 1;
                        int[] Arraywidth = new int[colsInTab];
                        bool isSumExists = false;
                        if (tableLayout.ToUpper().Trim() == "NORMAL")
                        {
                            foreach (XmlNode node in nodeCols)
                            {
                                if (node.Attributes["Caption"] != null)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                                        if (dc != null)
                                        {
                                            //Set the column width based on FVL
                                            if (dr[dc.Ordinal].ToString().Length > 0)
                                            {
                                                if (Arraywidth[dc.Ordinal].ToString() != null)
                                                {
                                                    if (dr[dc.Ordinal].ToString().Length > Convert.ToInt32(Arraywidth[dc.Ordinal].ToString()))
                                                    {
                                                        Arraywidth[dc.Ordinal] = Convert.ToInt32(dr[dc.Ordinal].ToString().Length + 5);
                                                    }
                                                }
                                            }
                                            //Getting the cols having Issummed=1 
                                            if (node.Attributes["IsSummed"] != null)
                                            {
                                                if (node.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!isSumExists)
                                                        isSumExists = true;
                                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (node.Attributes["ControlType"] != null)
                                            {
                                                if (node.Attributes["ControlType"].Value == "Cal")
                                                {
                                                    m_DateFormats = node.Attributes["Caption"].Value;
                                                    if (!m_htDateFormat.Contains(node.Attributes["Caption"].Value))
                                                    {
                                                        m_htDateFormat.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                    }
                                                }
                                                if (node.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    m_AmountNodes = node.Attributes["Caption"].Value;
                                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                    {
                                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //Setting columns width based on No of cols
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                Arraywidth[colCnt] = 20;
                            }
                        }
                        //Setting the X and Y positons, width and height of the tables
                        string imgpath = PDFImagePath();
                        PdfImage LogoImage = null;
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            LogoImage = myPdfDocument.NewImage(imgpath);
                        }
                        double posX = 20;
                        double posY = 70;
                        double width = myPdfDocument.PageWidth - 50;
                        double height = myPdfDocument.PageHeight - 50;
                        double currentYPos = 70;
                        Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                        Font HeaderFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                        Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                        Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                        Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                        Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
                        Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
                        //Getting Header table
                        string title = string.Empty;
                        XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                        if (nodeTitle != null)
                        {
                            title = nodeTitle.InnerText.Trim().ToString();
                        }
                        string subTitle = string.Empty;
                        XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                        if (nodeSubTitle != null)
                        {
                            subTitle = nodeSubTitle.InnerText.Trim().ToString();
                        }
                        //Getting header DT for this treenode
                        DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                        myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 2);
                        //Import HeaderDT to PDF table
                        myHeaderPdfTable.ImportDataTable(HeaderDT);
                        myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                        myHeaderPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                        myHeaderPdfTable.HeadersRow.SetForegroundColor(Color.White);
                        myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 145, 55 });
                        int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (titleLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                        int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        if (subTitleLength < 75)
                        {
                            myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                        if (myHeaderPdfTable.Rows.Length > 2)
                        {
                            int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                            if (dateLength < 75)
                            {
                                myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                            if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                            {
                                myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                        }
                        PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                        imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                        imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                        //Adding New page for the first time
                        PdfPage newPdfPage = myPdfDocument.NewPage();
                        //Adding header table in the first page
                        newPdfPage.Add(myHeaderPdfTablePage);
                        if (LogoImage != null)
                        {
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        if (pageBreaks != 0)
                        {
                            for (int pgbrk = 1; pgbrk <= pageBreaks + 1; pgbrk++)
                            {
                                posY = 70;
                                currentYPos = 70;
                                //if (m_htPagebrk.Contains(pgbrk))
                                {
                                    int dtStRow = 0;
                                    int dtEndRow = 0;
                                    if (pgbrk == 1)
                                    {
                                        dtStRow = 0;
                                    }
                                    else
                                    {
                                        dtStRow = Convert.ToInt32(m_htPagebrk[pgbrk - 1].ToString()) + 1;
                                    }
                                    if (pgbrk == pageBreaks + 1)
                                    {
                                        dtEndRow = dt.Rows.Count - 1;
                                    }
                                    else
                                    {
                                        dtEndRow = Convert.ToInt32(m_htPagebrk[pgbrk].ToString());
                                    }
                                    int rowsInTab = dtEndRow - dtStRow + 1;//dt.Rows.Count;
                                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                    dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                                    myPdfTable.ImportDataTable(dt, 0, 0, dtStRow, dtEndRow);
                                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable.SetColumnsWidth(Arraywidth);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htRightAlign.Count > 0)
                                    {
                                        if (pgbrk == pageBreaks + 1)
                                        {
                                            if (isSumExists)
                                            {
                                                myPdfTable.Rows[rowsInTab - 1].SetFont(SumRowFont);
                                                myPdfTable.Rows[rowsInTab - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                        {
                                            if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                            {
                                                if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                {
                                                    if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                                    {
                                                        myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //Setting Row font
                                    int pdftableRow = 0;
                                    for (int pdfRow = dtStRow; pdfRow <= dtEndRow; pdfRow++)
                                    {
                                        string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                        XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                        if (nodeRow != null)
                                        {
                                            if (nodeRow.Attributes["pFont"] != null)
                                            {
                                                if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowFontBold);
                                                }
                                            }
                                            if (nodeRow.Attributes["pBox"] != null)
                                            {
                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowBoxFontBold);
                                                }
                                            }
                                        }
                                        if (trxID.ToUpper().Trim() == "SKIP")
                                        {
                                            myPdfTable.Rows[pdftableRow].SetForegroundColor(Color.White);
                                        }
                                        pdftableRow++;
                                    }
                                    if (pgbrk != 1)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null)
                                        {
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        }
                                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    while (!myPdfTable.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null)
                                            {
                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            }
                                            //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos;// +25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null)
                                            {
                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            }
                                            //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        //Printing Row boxes
                                        for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                        {
                                            string trxID = dt.Rows[index]["TrxID"].ToString();
                                            XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                            if (nodeRow != null)
                                            {
                                                if (nodeRow.Attributes["pBox"] != null)
                                                {
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                            pr.StrokeWidth = 1;
                                                            newPdfPage.Add(pr);
                                                        }
                                                    }
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                            {
                                                                PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                pr.StrokeWidth = 1;
                                                                newPdfPage.Add(pr);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Rows content
                                        newPdfPage.Add(newPdfTablePage);
                                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                        else
                        {
                            int rowsInTab = dt.Rows.Count;
                            PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 0);
                            dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                            dt = objclsrpt.ChangeDateAndAmountFormats(dt, GVXml, treeNodeName);
                            //
                            myPdfTable.ImportDataTable(dt, 0, 0, 0, rowsInTab);
                            myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable.SetColumnsWidth(Arraywidth);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable.HeadersRow.SetTransparent();
                            myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                            myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                            myPdfTable.Rows[0].SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable.Rows[0].SetFont(HeaderFont);
                            if (m_htRightAlign.Count > 0)
                            {
                                if (isSumExists)
                                {
                                    //Right justifying Summed row content
                                    myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                    myPdfTable.Rows[dt.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                                //Right justifying Summed column content and IsNumeric column content
                                for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                {
                                    if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                    {
                                        if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                        {
                                            if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                            {
                                                myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                    }
                                }
                            }
                            //Setting Row font
                            for (int pdfRow = 0; pdfRow < rowsInTab; pdfRow++)
                            {
                                string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                if (nodeRow != null)
                                {
                                    if (nodeRow.Attributes["pFont"] != null)
                                    {
                                        if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                        {
                                            myPdfTable.Rows[pdfRow].SetFont(RowFontBold);
                                        }
                                    }
                                    if (nodeRow.Attributes["pBox"] != null)
                                    {
                                        if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                        {
                                            myPdfTable.Rows[pdfRow].SetFont(RowBoxFontBold);
                                        }
                                    }
                                }
                                if (trxID.ToUpper().Trim() == "SKIP")
                                {
                                    myPdfTable.Rows[pdfRow].SetForegroundColor(Color.White);
                                }
                            }
                            while (!myPdfTable.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos;// +25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                //Printing Row boxes
                                for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                {
                                    string trxID = dt.Rows[index]["TrxID"].ToString();
                                    XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                    if (nodeRow != null)
                                    {
                                        if (nodeRow.Attributes["pBox"] != null)
                                        {
                                            if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                            {
                                                for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                {
                                                    PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                            }
                                            if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                            {
                                                for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                {
                                                    if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                    {
                                                        PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                        pr.StrokeWidth = 1;
                                                        newPdfPage.Add(pr);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //Adding Rows content
                                newPdfPage.Add(newPdfTablePage);
                                currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                            }
                        }
                        //Notes DT
                        if (NotesDT.Rows.Count > 0)
                        {
                            if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                            {
                                int rowsInNotesDT = NotesDT.Rows.Count;
                                int colsInNotesDT = NotesDT.Columns.Count;
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                                myPdfTable1.ImportDataTable(NotesDT);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;// +25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, pgHeight - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - pgWidth, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY - 10));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                        newPdfPage.SaveToDocument();
                    }
                }
                if (dataPrinted)
                {
                    //SaveToResponse("PDFReport");
                    if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                    else
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }

                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region Old Export To PDF-Report Style 10
        public void OldReportStyle10(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string GVXml, string tableLayout)
        {
            try
            {
                bool dataPrinted = false;
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                int pageCnt = 0;
                Hashtable m_htPagebrk = new Hashtable();
                Hashtable m_htRightAlign = new Hashtable();
                Hashtable m_htDateFormat = new Hashtable();
                string m_AmountNodes = string.Empty;
                string m_DateFormats = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(GVXml);
                XmlNode nodeGridLayout = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout");
                foreach (XmlNode nodetreenode in nodeGridLayout.ChildNodes)
                {
                    //Get the treeNodeName
                    string treeNodeName = nodetreenode.SelectSingleNode("Node").InnerText;
                    dt = XMLToDataTable(GVXml, treeNodeName, "");
                    dt = objclsrpt.ChangeDateAndAmountFormats(dt, GVXml, treeNodeName);
                    for (int rws = 0; rws < dt.Rows.Count; rws++)
                    {
                        foreach (DataColumn dcn in dt.Columns)
                        {
                            switch (dcn.ColumnName.Trim().ToString())
                            {
                                case "Total":
                                    {
                                        if (dt.Rows[rws][dcn.Ordinal].ToString() != string.Empty)
                                        {
                                            if (dt.Rows[rws][dcn.Ordinal].ToString() != "SKIP")
                                            {
                                                dt.Rows[rws][dcn.Ordinal - 1] = dt.Rows[rws][dcn.Ordinal].ToString();
                                                dt.Rows[rws][dcn.Ordinal] = "FREE";
                                            }
                                        }
                                        break;
                                    }
                                //case "Description":
                                //    {
                                //        if (dt.Rows[rws][dcn.Ordinal].ToString() != string.Empty)
                                //        {
                                //            if (dt.Rows[rws][dcn.Ordinal].ToString() != "SKIP")
                                //            {
                                //                dt.Rows[rws][dcn.Ordinal - 1] = dt.Rows[rws][dcn.Ordinal].ToString();
                                //                dt.Rows[rws][dcn.Ordinal] = "FREE";
                                //            }
                                //        }
                                //        break;
                                //    }
                            }
                        }
                    }
                    if (dt.Rows.Count > 0)
                    {
                        if (!dataPrinted)
                            dataPrinted = true;
                        if (dt.Columns.Contains("Notes"))
                        {
                            NotesDT = reportsBO.GenerateNotesDatatable(dt);
                            dt.Columns.Remove("Notes");
                        }
                        //Getting the columns to be displayed in grid
                        XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                        //Getting the rows to print
                        XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                        int pageBreaks = 0;
                        //Considering the PLayout only for the first treenode
                        if (myPdfDocument.PageCount == 0)
                        {
                            if (nodeRowList != null)
                            {
                                if (nodeRowList.FirstChild != null)
                                {
                                    if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                                    {
                                        string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                        if (pLayout == "1")//Landscape
                                        {
                                            myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                        }
                                    }
                                }
                            }
                        }
                        if (nodeRowList != null)
                        {
                            if (nodeRowList.ChildNodes != null)
                            {
                                foreach (XmlNode nodeRow in nodeRowList.ChildNodes)
                                {
                                    if (nodeRow.Attributes["TrxID"] != null)
                                    {
                                        string trxID = nodeRow.Attributes["TrxID"].Value;
                                        DataRow[] foundRows;
                                        foundRows = dt.Select("TrxID ='" + trxID + "'");
                                        if (foundRows.Length > 0)
                                        {
                                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                                            if (nodeRow.Attributes["pLnSkip"] != null)
                                            {
                                                if (nodeRow.Attributes["pLnSkip"].Value.ToString().Trim() != "0")
                                                {
                                                    for (int skipCnt = 0; skipCnt < Convert.ToInt32(nodeRow.Attributes["pLnSkip"].Value.Trim()); skipCnt++)
                                                    {
                                                        // Adding each row at a time
                                                        DataRow dSkipRow = dt.NewRow();
                                                        for (int col = 0; col < dt.Columns.Count; col++)
                                                        {
                                                            dSkipRow[dt.Columns[col].ColumnName] = "SKIP";
                                                        }
                                                        dt.Rows.InsertAt(dSkipRow, rowIndex + 1);
                                                        dt.AcceptChanges();
                                                    }
                                                }
                                            }
                                            if (nodeRow.Attributes["pPgBreak"] != null)
                                            {
                                                if (nodeRow.Attributes["pPgBreak"].Value.ToString().Trim() == "1")
                                                {
                                                    pageBreaks++;
                                                    m_htPagebrk.Add(pageBreaks, rowIndex);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // Variable to get the Column count of the parent table
                        int colsInTab = dt.Columns.Count - 1;
                        int[] Arraywidth = new int[colsInTab];
                        bool isSumExists = false;
                        if (tableLayout.ToUpper().Trim() == "NORMAL")
                        {
                            foreach (XmlNode node in nodeCols)
                            {
                                if (node.Attributes["Caption"] != null)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                                        if (dc != null)
                                        {
                                            //Set the column width based on FVL
                                            if (dr[dc.Ordinal].ToString().Length > 0)
                                            {
                                                if (Arraywidth[dc.Ordinal].ToString() != null)
                                                {
                                                    if (dr[dc.Ordinal].ToString().Length > Convert.ToInt32(Arraywidth[dc.Ordinal].ToString()))
                                                    {
                                                        Arraywidth[dc.Ordinal] = Convert.ToInt32(node.Attributes["FullViewLength"].Value); //Convert.ToInt32(dr[dc.Ordinal].ToString().Length);
                                                    }
                                                }
                                            }
                                            //Getting the cols having Issummed=1 
                                            if (node.Attributes["IsSummed"] != null)
                                            {
                                                if (node.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!isSumExists)
                                                        isSumExists = true;
                                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (node.Attributes["ControlType"] != null)
                                            {
                                                if (node.Attributes["ControlType"].Value == "Cal")
                                                {
                                                    m_DateFormats = node.Attributes["Caption"].Value;
                                                    if (!m_htDateFormat.Contains(node.Attributes["Caption"].Value))
                                                    {
                                                        m_htDateFormat.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                    }
                                                }
                                                if (node.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    m_AmountNodes = node.Attributes["Caption"].Value;
                                                    if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                    {
                                                        m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //Setting columns width for cols not present in node columns
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                if (Arraywidth[colCnt].ToString() == string.Empty)
                                    Arraywidth[colCnt] = 15;
                            }
                        }
                        else
                        {
                            //Setting columns width based on No of cols
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                Arraywidth[colCnt] = 20;
                            }
                        }
                        //Setting the X and Y positons, width and height of the tables
                        double posX = 20;
                        double posY = 70;
                        double width = myPdfDocument.PageWidth - 50;
                        double height = myPdfDocument.PageHeight - 50;
                        double currentYPos = 70;
                        string imgpath = PDFImagePath();
                        PdfImage LogoImage = null;
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            LogoImage = myPdfDocument.NewImage(imgpath);
                        }
                        Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                        Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                        Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                        Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                        Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                        Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                        Font RowBoxFontBold = new Font("Verdana", 8, FontStyle.Bold);
                        //Getting Header table
                        string title = string.Empty;
                        XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                        if (nodeTitle != null)
                        {
                            title = nodeTitle.InnerText.Trim().ToString();
                        }
                        string subTitle = string.Empty;
                        XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                        if (nodeSubTitle != null)
                        {
                            subTitle = nodeSubTitle.InnerText.Trim().ToString();
                        }
                        //Getting header DT for this treenode
                        DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                        myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                        myHeaderPdfTable.ImportDataTable(HeaderDT);
                        myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                        myHeaderPdfTable.VisibleHeaders = false;
                        myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 155, 55 });
                        int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (titleLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                        int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        if (subTitleLength < 75)
                        {
                            myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                        if (myHeaderPdfTable.Rows.Length > 2)
                        {
                            int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                            if (dateLength < 75)
                            {
                                myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                            if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                            {
                                myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                        }
                        PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                        imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                        imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                        //Adding New page for the first time
                        PdfPage newPdfPage = myPdfDocument.NewPage();
                        //Adding header table in the first page
                        newPdfPage.Add(myHeaderPdfTablePage);
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        if (pageBreaks != 0)
                        {
                            for (int pgbrk = 1; pgbrk <= pageBreaks + 1; pgbrk++)
                            {
                                posY = 70;
                                currentYPos = 70;
                                //if (m_htPagebrk.Contains(pgbrk))
                                {
                                    int dtStRow = 0;
                                    int dtEndRow = 0;
                                    if (pgbrk == 1)
                                    {
                                        dtStRow = 0;
                                    }
                                    else
                                    {
                                        dtStRow = Convert.ToInt32(m_htPagebrk[pgbrk - 1].ToString()) + 1;
                                    }
                                    if (pgbrk == pageBreaks + 1)
                                    {
                                        dtEndRow = dt.Rows.Count - 1;
                                    }
                                    else
                                    {
                                        dtEndRow = Convert.ToInt32(m_htPagebrk[pgbrk].ToString());
                                    }
                                    int rowsInTab = dtEndRow - dtStRow + 1;//dt.Rows.Count;
                                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                    dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                                    myPdfTable.ImportDataTable(dt, 0, 0, dtStRow, dtEndRow);
                                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable.SetColumnsWidth(Arraywidth);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htRightAlign.Count > 0)
                                    {
                                        if (pgbrk == pageBreaks + 1)
                                        {
                                            if (isSumExists)
                                            {
                                                myPdfTable.Rows[rowsInTab - 1].SetFont(SumRowFont);
                                                myPdfTable.Rows[rowsInTab - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                        {
                                            if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                            {
                                                if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                {
                                                    if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                                    {
                                                        myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //Setting Row font
                                    int pdftableRow = 0;
                                    for (int pdfRow = dtStRow; pdfRow <= dtEndRow; pdfRow++)
                                    {
                                        string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                        XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                        if (nodeRow != null)
                                        {
                                            if (nodeRow.Attributes["pFont"] != null)
                                            {
                                                if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowFontBold);
                                                }
                                            }
                                            if (nodeRow.Attributes["pBox"] != null)
                                            {
                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowBoxFontBold);
                                                }
                                            }
                                            if (nodeRow.Attributes["pBold"] != null)
                                            {
                                                if (nodeRow.Attributes["pBold"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdfRow].SetFont(RowBoxFontBold);
                                                }
                                            }
                                        }
                                        if (trxID.ToUpper().Trim() == "SKIP")
                                        {
                                            myPdfTable.Rows[pdftableRow].SetForegroundColor(Color.White);
                                        }
                                        pdftableRow++;
                                    }
                                    if (pgbrk != 1)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    while (!myPdfTable.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos;// +25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        //Printing Row boxes
                                        for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                        {
                                            string trxID = dt.Rows[index]["TrxID"].ToString();
                                            XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                            if (nodeRow != null)
                                            {
                                                if (nodeRow.Attributes["pBox"] != null)
                                                {
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                            pr.StrokeWidth = 1;
                                                            newPdfPage.Add(pr);
                                                        }
                                                    }
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                            {
                                                                PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                pr.StrokeWidth = 1;
                                                                newPdfPage.Add(pr);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Rows content
                                        newPdfPage.Add(newPdfTablePage);
                                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                        else
                        {
                            int rowsInTab = dt.Rows.Count;
                            Font tblFont = new Font("Verdana", 7);
                            PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                            dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                            dt = objclsrpt.ChangeDateAndAmountFormats(dt, GVXml, treeNodeName);
                            myPdfTable.ImportDataTable(dt, 0, 0, 0, rowsInTab);
                            myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable.SetColumnsWidth(Arraywidth);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleCenter);
                            myPdfTable.SetFont(tblFont);
                            myPdfTable.HeadersRow.SetFont(HeaderFont);
                            Font FontUnderline = new Font("Verdana", 8, FontStyle.Underline);
                            foreach (DataColumn dc in dt.Columns)
                            {
                                int colpos = dc.Ordinal;
                                switch (dc.ColumnName.ToString())
                                {
                                    case "Classification":
                                        {
                                            myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                            myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                            break;
                                        }
                                    case "Account Type":
                                        {
                                            myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                            int widthss = (Arraywidth[colpos]) / 2;
                                            myPdfTable.Columns[colpos].SetWidth(widthss + 5);
                                            myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                            break;
                                        }
                                    case "Description":
                                        {
                                            myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                            myPdfTable.HeadersRow[colpos].SetContentAlignment(ContentAlignment.MiddleLeft);
                                            break;
                                        }
                                    case "Ending Balance":
                                        {
                                            myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.HeadersRow[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.Columns[colpos].SetWidth(15);
                                            break;
                                        }
                                    case "Total":
                                        {
                                            int widthss = (Arraywidth[colpos]) / 2;
                                            myPdfTable.Columns[colpos].SetWidth(widthss + 15);
                                            myPdfTable.Columns[colpos].SetTransparent();
                                            myPdfTable.Columns[colpos].SetForegroundColor(Color.White);
                                            myPdfTable.Columns[colpos].SetBackgroundColor(Color.White);
                                            myPdfTable.HeadersRow[colpos].SetColors(Color.White, Color.White);
                                            break;
                                        }
                                    case "% Sales":
                                        {
                                            myPdfTable.Columns[colpos].SetContentAlignment(ContentAlignment.MiddleRight);
                                            //myPdfTable.Columns[colpos].SetFont(RowFontBold);
                                            break;
                                        }
                                }
                            }
                            for (int index = 0; index < myPdfTable.Rows.Length; index++)
                            {
                                string trxID = dt.Rows[index]["TrxID"].ToString();
                                XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                if (nodeRow != null)
                                {
                                    int cellcnt = 0;
                                    for (; cellcnt < myPdfTable.Rows[index].Cells.Count; )
                                    {
                                        cellcnt = 0;
                                        foreach (PdfCell pcell in myPdfTable.Rows[index].Cells)
                                        {
                                            if (pcell.Content.ToString() != string.Empty)
                                            {
                                                if (pcell.Content.ToString() == "FREE")
                                                {
                                                    myPdfTable.Cell(index, cellcnt - 1).SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable.Cell(index, cellcnt - 1).SetFont(HeaderFont);
                                                }
                                            }
                                            cellcnt++;
                                        }
                                    }
                                }
                            }
                            for (int pdfRow = 0; pdfRow < rowsInTab; pdfRow++)
                            {
                                string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                if (trxID.ToUpper().Trim() == "SKIP")
                                {
                                    myPdfTable.Rows[pdfRow].SetForegroundColor(Color.White);
                                }
                            }
                            while (!myPdfTable.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    posY = 15 + posY;
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos;// +25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    posY = 15 + posY;
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX + 30, posY, width - 50, height - posY));
                                //Adding Rows content
                                newPdfPage.Add(newPdfTablePage);
                                currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                //Printing Row boxes
                                for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                {
                                    string trxID = dt.Rows[index]["TrxID"].ToString();
                                    bool m_skip = true;
                                    if (trxID == "SKIP")
                                    {
                                        if ((index + 2) < dt.Rows.Count)
                                        {
                                            if (dt.Rows[index][dt.Columns["TrxID"].Ordinal - 2].ToString() == "SKIP" && dt.Rows[index + 2][dt.Columns["TrxID"].Ordinal - 2].ToString() == "SKIP")
                                            {
                                                if (index + 2 <= newPdfTablePage.LastRow)
                                                {
                                                    double xTotalLine = newPdfTablePage.CellArea(index + 1, dt.Columns["TrxID"].Ordinal - 2).TopLeftVertex.X;
                                                    double yTotalLine = newPdfTablePage.CellArea(index + 1, dt.Columns["TrxID"].Ordinal - 2).TopLeftVertex.Y;
                                                    //
                                                    Point pStart = new Point(Convert.ToInt32(xTotalLine + 20), Convert.ToInt32(yTotalLine - 1));
                                                    Point pEnd = new Point(Convert.ToInt32(xTotalLine + 90), Convert.ToInt32(yTotalLine - 1));
                                                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                                    newPdfPage.Add(pdfLineBrk);
                                                    //
                                                    Point pStart1 = new Point(Convert.ToInt32(xTotalLine + 20), Convert.ToInt32(yTotalLine + 10));
                                                    Point pEnd1 = new Point(Convert.ToInt32(xTotalLine + 90), Convert.ToInt32(yTotalLine + 10));
                                                    PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                                    newPdfPage.Add(pdfLineBrk1);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                        if (nodeRow != null)
                                        {
                                            if (nodeRow.Attributes["pBox"] != null)
                                            {
                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                {
                                                    int cellcnt = 0;
                                                    for (; cellcnt < myPdfTable.Rows[index].Cells.Count; )
                                                    {
                                                        foreach (PdfCell pcell in myPdfTable.Rows[index].Cells)
                                                        {
                                                            if (pcell.Content.ToString() != string.Empty)
                                                            {
                                                                cellcnt = 0;
                                                                foreach (PdfCell phcell in myPdfTable.HeadersRow.Cells)
                                                                {
                                                                    if (phcell.Content.ToString() == "Total")
                                                                    {
                                                                        if (index + 2 <= newPdfTablePage.LastRow)
                                                                        {
                                                                            double xPos = newPdfTablePage.CellArea(index, cellcnt - 1).TopLeftVertex.X;
                                                                            double yPos = newPdfTablePage.CellArea(index, cellcnt - 1).TopLeftVertex.Y;
                                                                            //
                                                                            Point pStart = new Point(Convert.ToInt32(xPos + 20), Convert.ToInt32(yPos - 1));
                                                                            Point pEnd = new Point(Convert.ToInt32(xPos + 90), Convert.ToInt32(yPos - 1));
                                                                            PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                                                            newPdfPage.Add(pdfLineBrk);
                                                                            //
                                                                            Point pStart1 = new Point(Convert.ToInt32(xPos + 20), Convert.ToInt32(yPos + 10));
                                                                            Point pEnd1 = new Point(Convert.ToInt32(xPos + 90), Convert.ToInt32(yPos + 10));
                                                                            PdfLine pdfLineBrk1 = new PdfLine(myPdfDocument, pStart1, pEnd1, Color.Black, 1);
                                                                            newPdfPage.Add(pdfLineBrk1);
                                                                        }
                                                                    }
                                                                    cellcnt++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        //Notes DT
                        if (NotesDT.Rows.Count > 0)
                        {
                            if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                            {
                                int rowsInNotesDT = NotesDT.Rows.Count;
                                int colsInNotesDT = NotesDT.Columns.Count;
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                                myPdfTable1.ImportDataTable(NotesDT);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;// +25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY - 10));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                        newPdfPage.SaveToDocument();
                    }
                }
                if (dataPrinted)
                {
                    //SaveToResponse("PDFReport");
                    if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                    else
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region OldReport Style 501
        public void OldReportStyle501(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                DataTable pNotesDT = new DataTable();
                DataTable pDT = new DataTable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                Font FontRegular = new Font("Verdana", 6, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                int pageCnt = 0;
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                //Import DT to PDF table
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                myHeaderPdfTable.VisibleHeaders = false;
                //myHeaderPdfTable.SetBackgroundColor(Color.White);
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 155, 55 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                if (myHeaderPdfTable.Rows.Length > 2)
                {
                    int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                    if (dateLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                }
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                //Adding new page and adding Header table,logo image and pageNo 
                PdfPage newPdfPage = myPdfDocument.NewPage();
                //Adding Header table
                newPdfPage.Add(myHeaderPdfTablePage);
                //Adding logo
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                foreach (DataRow dRow in dt.Rows)
                {
                    if (!NotesDT.Columns.Contains("New"))
                    {
                        NotesDT.Columns.Add("New");
                    }
                    NotesDT.Columns["New"].SetOrdinal(0);
                    //if (!parentDT.Columns.Contains("New"))
                    //{
                    //    parentDT.Columns.Add("New");
                    //}
                    //parentDT.Columns["New"].SetOrdinal(0);

                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        if (dt.Columns[col].ColumnName == "Payment Terms")
                        {
                            if (!parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                            {
                                parentDT.Columns.Add(dt.Columns[col].ColumnName);
                                parentDT.Columns[dt.Columns[col].ColumnName].SetOrdinal(col);
                            }
                        }
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Pivoting the tables
                    pNotesDT = reportsBO.PivotTable(NotesDT);
                    //pDT = reportsBO.PivotTable(parentDT);
                    pDT = parentDT;
                    DataTable dtNew = new DataTable();
                    int colCnts = pDT.Columns.Count;
                    for (int cols = 0; cols < (colCnts * 2); cols++)
                    {
                        DataColumn dc = new DataColumn();
                        dtNew.Columns.Add("Column" + cols);
                    }
                    DataRow dnRow = dtNew.NewRow();
                    for (int kl = 0; kl < dtNew.Columns.Count; kl++)
                    {
                        if (kl == 0)
                        {
                            dnRow[kl] = pDT.Columns[0].ColumnName;
                        }
                        else
                        {
                            if (kl % 2 == 0)
                            {
                                dnRow[kl] = pDT.Columns[kl / 2].ColumnName;
                            }
                            else
                            {
                                if (kl > pDT.Columns.Count)
                                {
                                    dnRow[kl] = pDT.Rows[0][kl / 2].ToString();
                                }
                                else
                                {
                                    dnRow[kl] = pDT.Rows[0][0].ToString();
                                }
                            }
                        }
                    }
                    dtNew.Rows.Add(dnRow);
                    // Varaible to get the Row and Column count of three tables
                    //int rowsInTab = pDT.Rows.Count;
                    //int colsInTab;
                    //if (pDT.Columns.Count > 1)
                    //{
                    //    colsInTab = pDT.Columns.Count * 2;
                    //}
                    //else
                    //{
                    //    colsInTab = pDT.Columns.Count;
                    //}
                    //int[] Arraywidth = new int[colsInTab];
                    ////Setting columns width based on the No of columns
                    //for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                    //{
                    //    Arraywidth[colCnt] = 40;
                    //}
                    int rowsInTab = dtNew.Rows.Count;
                    int colsInTab;
                    colsInTab = dtNew.Columns.Count;
                    int[] Arraywidth = new int[colsInTab];
                    //Setting columns width based on the No of columns
                    for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                    {
                        Arraywidth[colCnt] = 40;
                    }
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    //pDT = WrapFullViewLength(pDT, Arraywidth);
                    dtNew = objclsrpt.WrapFullViewLength(dtNew, Arraywidth);
                    //myPdfTable.ImportDataTable(pDT);
                    myPdfTable.ImportDataTable(dtNew);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    for (int columns = 0; columns < myPdfTable.Cells.Count; columns++)
                    {
                        if (columns % 2 == 0)
                        {
                            myPdfTable.Columns[columns].SetFont(HeaderFont);
                            myPdfTable.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        else
                        {
                            myPdfTable.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        }
                    }
                    // myPdfTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 10;
                        }
                        if (myPdfDocument.PageHeight - posY < 200)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 10;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Getting the dataset to be bound to the grid.
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            //if (nodeBranch.Attributes["ControlType"] == null)//Need to check
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                //BranchDT = GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.GetReportStyle501DataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 7, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                if (Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5) > Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value))
                                                {
                                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5);
                                                }
                                                else
                                                {
                                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                                }
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                        for (int drw = 0; drw < BranchDT.Rows.Count; drw++)
                                        {
                                            for (int dcl = 0; dcl < BranchDT.Columns.Count; dcl++)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[dcl].Content.ToString()))
                                                {
                                                    if (BranchDT.Rows[drw][0].ToString() == string.Empty)
                                                    {
                                                        myPdfTable1.Rows[drw][dcl].SetFont(SumRowFont);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos + 10;
                                        }
                                        if (myPdfDocument.PageHeight - posY < 200)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                    }
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "PIVOT")
                    {
                        if (pDT.Columns.Count > 1)
                        {
                            pDT.Columns.RemoveAt(1);
                        }
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                string branchName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches/Branch/Node").InnerText;
                DataTable dtTotals = new DataTable();
                dtTotals = objclsrpt.GetReportStyle501AllTotalsToPrint(strOutXml, branchName);
                dtTotals = objclsrpt.ChangeDateAndAmountFormats(dtTotals, strOutXml, branchName);
                if (dtTotals.Columns.Contains("Description"))
                {
                    dtTotals.Rows[0]["Description"] = "Grand Totals";
                }
                else
                {
                    dtTotals.Rows[0][1] = "Grand Totals";
                }
                Hashtable m_htBranchRightAlign1 = new Hashtable();
                Font SumRowFont1 = new Font("Verdana", 7, FontStyle.Bold);
                bool sumExists1 = false;
                int rowsInBranchDT1 = dtTotals.Rows.Count;
                int colsInBranchDT1 = dtTotals.Columns.Count;
                if (dtTotals.Rows.Count > 0)
                {
                    //Getting the columns to be displayed in grid
                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/GridHeading/Columns");
                    int[] BranchArraywidth = new int[colsInBranchDT1];
                    foreach (DataColumn dBranchCol in dtTotals.Columns)
                    {
                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                        //Checking for isSummed value for that column
                        if (nodeBranchCol != null)
                        {
                            //Getting the cols having Issummed=1 
                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                            {
                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                {
                                    if (!sumExists1)
                                        sumExists1 = true;
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                }
                            }
                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                            if (nodeBranchCol.Attributes["ControlType"] != null)
                            {
                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                {
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                }
                            }
                        }
                        //Setting the column width of branch table
                        int dcPos = dBranchCol.Ordinal;
                        int colFVL = 0;
                        if (nodeBranchCol != null)
                        {
                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                            {
                                if (Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5) > Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value))
                                {
                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5);
                                }
                                else
                                {
                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                }
                            }
                        }
                        if (colFVL != 0)
                        {
                            BranchArraywidth[dcPos] = colFVL;
                        }
                        else
                        {
                            BranchArraywidth[dcPos] = 15;
                        }
                    }
                    foreach (DataColumn dBranchCol in dtTotals.Columns)
                    {
                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                        //Checking for isSummed value for that column
                        if (nodeBranchCol != null)
                        {
                            //Getting the cols having Issummed=1 
                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                            {
                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                {
                                    if (!sumExists1)
                                        sumExists1 = true;
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                }
                            }
                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                            if (nodeBranchCol.Attributes["ControlType"] != null)
                            {
                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                {
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                }
                            }
                        }
                    }
                }
                PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, 1, dtTotals.Columns.Count, 1);
                Font myHeaderFont1 = new Font("Verdana", 8, FontStyle.Bold);
                myPdfTable2.ImportDataTable(dtTotals);
                myPdfTable2.HeadersRow.SetFont(myHeaderFont1);
                myPdfTable2.VisibleHeaders = false;
                myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);

                if (m_htBranchRightAlign1.Count > 0)
                {
                    if (sumExists1)
                    {
                        //Right justifying Summed row content
                        myPdfTable2.Rows[dtTotals.Rows.Count - 1].SetFont(SumRowFont1);
                        myPdfTable2.Rows[dtTotals.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                    }
                    //Right justifying Summed column content and IsNumeric column content
                    for (int pdfcol = 0; pdfcol < colsInBranchDT1; pdfcol++)
                    {

                        if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                        {
                            if (m_htBranchRightAlign1.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                            {
                                myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                            }
                        }
                        foreach (PdfCell pcll in myPdfTable2.Columns[pdfcol].Cells)
                        {
                            if (pcll.Content.ToString().Trim().ToUpper() == "GRAND TOTALS")
                            {
                                pcll.SetContentAlignment(ContentAlignment.MiddleLeft);
                            }
                            if (pcll.Content.ToString().Trim().ToUpper() == "0.00")
                            {
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    for (int drw = 0; drw < dtTotals.Rows.Count; drw++)
                    {
                        for (int dcl = 0; dcl < dtTotals.Columns.Count; dcl++)
                        {
                            if (m_htBranchRightAlign1.Contains(myPdfTable2.HeadersRow[dcl].Content.ToString()))
                            {
                                if (dtTotals.Rows[drw][0].ToString() == string.Empty)
                                {
                                    myPdfTable2.Rows[drw][dcl].SetFont(SumRowFont1);
                                }
                            }
                        }
                    }
                }
                while (!myPdfTable2.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    else
                    {
                        posY = currentYPos + 10;
                    }
                    if (myPdfDocument.PageHeight - posY < 200)
                    {
                        posY = 70;
                        currentYPos = 70;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);
                        //Adding logo
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    PdfTablePage newPdfTablePage1 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage1);
                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                }
                newPdfPage.SaveToDocument();
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldReport Style 502
        public void OldReportStyle502(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                DataTable pNotesDT = new DataTable();
                DataTable pDT = new DataTable();
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                foreach (XmlNode node in nodeColumns)
                {
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                Font SumRowFont = new Font("Verdana", 7, FontStyle.Bold);
                int pageCnt = 0;
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                myHeaderPdfTable.VisibleHeaders = false;
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 155, 55 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                if (myHeaderPdfTable.Rows.Length > 2)
                {
                    int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                    if (dateLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                }
                Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                PdfPage newPdfPage = myPdfDocument.NewPage();
                newPdfPage.Add(myHeaderPdfTablePage);
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                if (dt.Rows.Count > 0)
                {
                    Font myChildGridHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                    string parentTrxID = string.Empty;
                    parentTrxID = dt.Rows[0]["TrxID"].ToString();
                    DataTable dtParentHeader = new DataTable();
                    for (int cols = 0; cols < ((dt.Columns.Count - 1) * 2); cols++)
                    {
                        DataColumn dc = new DataColumn();
                        dtParentHeader.Columns.Add("Column" + cols);
                    }
                    DataRow drPntHeaRw = dtParentHeader.NewRow();
                    for (int rw = 0; rw < dtParentHeader.Columns.Count; rw++)
                    {
                        if (rw == 0)
                        {
                            drPntHeaRw[rw] = dt.Columns[0].ColumnName + ":";
                        }
                        else
                        {
                            if (rw % 2 == 0)
                            {
                                drPntHeaRw[rw] = dt.Columns[rw / 2].ColumnName + ":";
                            }
                            else
                            {
                                if (rw > dt.Columns.Count)
                                {
                                    drPntHeaRw[rw] = null;
                                }
                                else
                                {
                                    drPntHeaRw[rw] = null;
                                }
                            }
                        }
                    }
                    dtParentHeader.Rows.Add(drPntHeaRw);
                    int rowsInTab = dtParentHeader.Rows.Count;
                    int colsInTab;
                    colsInTab = dtParentHeader.Columns.Count;
                    int[] Arraywidth = new int[colsInTab];
                    for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                    {
                        Arraywidth[colCnt] = 40;
                    }
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    dtParentHeader = objclsrpt.WrapFullViewLength(dtParentHeader, Arraywidth);
                    myPdfTable.ImportDataTable(dtParentHeader);
                    myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    for (int columns = 0; columns < myPdfTable.Cells.Count; columns++)
                    {
                        if (columns % 2 == 0)
                        {
                            myPdfTable.Columns[columns].SetFont(HeaderFont);
                            myPdfTable.Columns[columns].SetWidth(dtParentHeader.Rows[0][columns].ToString().Length + 2);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        else
                        {
                            myPdfTable.Columns[columns].SetWidth(dtParentHeader.Rows[0][columns].ToString().Length + 2);
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        }
                    }
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos - 10;
                        }
                        if (myPdfDocument.PageHeight - posY < 200)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    XmlNode nodeBranches1 = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches1 != null)
                    {
                        string branchNodeName = string.Empty;
                        foreach (XmlNode nodeBranch in nodeBranches1.ChildNodes)
                        {
                            branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                        }
                        DataTable dtChildHeader = new DataTable();
                        int colsInTab2 = 0;
                        int rowsInTab2 = 0;
                        dtChildHeader = objclsrpt.GetReportStyle501DataToPrint(strOutXml, parentTrxID, branchNodeName);
                        dtChildHeader = objclsrpt.ChangeDateAndAmountFormats(dtChildHeader, strOutXml, branchNodeName);
                        if (dtChildHeader.Columns["Description"] != null)
                        {
                            dtChildHeader.Columns.Remove("Description");
                        }
                        if (dtChildHeader.Rows.Count > 0)
                        {
                            colsInTab2 = dtChildHeader.Columns.Count;
                            for (int rws = 0; rws <= dtChildHeader.Rows.Count; rws++)
                            {
                                if (dtChildHeader.Rows.Count > 0)
                                {
                                    dtChildHeader.Rows[rws].Delete();
                                    rws--;
                                }
                            }
                            DataRow drChildEmptyRow = dtChildHeader.NewRow();
                            for (int colCnt = 0; colCnt < colsInTab2; colCnt++)
                            {
                                drChildEmptyRow[colCnt] = "EMPTY";
                            }
                            dtChildHeader.Rows.Add(drChildEmptyRow);
                            rowsInTab2 = dtChildHeader.Rows.Count;
                            int[] Arraywidth2 = new int[colsInTab2];
                            XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                            Hashtable htRiteAlign = new Hashtable();
                            bool sumExists = false;
                            foreach (DataColumn dBranchCol in dtChildHeader.Columns)
                            {
                                int colFVL = 0;
                                XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                //Checking for isSummed value for that column
                                if (nodeBranchCol != null)
                                {
                                    //Getting the cols having Issummed=1 
                                    if (nodeBranchCol.Attributes["IsSummed"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                        {
                                            if (!sumExists)
                                                sumExists = true;
                                            if (!htRiteAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                htRiteAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                        }
                                    }
                                    //Getting the cols having ControlType="Amount"//Isnumeric=1
                                    if (nodeBranchCol.Attributes["ControlType"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                        {
                                            if (!htRiteAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                htRiteAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                        }
                                    }
                                    colFVL = 60;
                                    if (colFVL != 0)
                                    {
                                        Arraywidth2[dBranchCol.Ordinal] = colFVL;
                                    }
                                    else
                                    {
                                        Arraywidth2[dBranchCol.Ordinal] = 15;
                                    }
                                }
                            }
                            //
                            dtChildHeader = objclsrpt.WrapFullViewLength(dtChildHeader, Arraywidth2);
                            PdfTable myPdfChildHeader = myPdfDocument.NewTable(myChildGridHeaderFont, rowsInTab2, colsInTab2, 1);
                            myPdfChildHeader.ImportDataTable(dtChildHeader);
                            myPdfChildHeader.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfChildHeader.SetColumnsWidth(Arraywidth2);
                            foreach (PdfCell childPcell in myPdfChildHeader.Cells)
                            {
                                if (childPcell.Content.ToString().Contains("EMPTY"))
                                {
                                    childPcell.SetBackgroundColor(Color.White);
                                    childPcell.SetForegroundColor(Color.White);
                                }
                            }
                            if (htRiteAlign.Count > 0)
                            {
                                //Right justifying Summed column content and IsNumeric column content
                                for (int pdfcol = 0; pdfcol < dtChildHeader.Columns.Count; pdfcol++)
                                {
                                    if (myPdfChildHeader.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                    {
                                        if (htRiteAlign.Contains(myPdfChildHeader.HeadersRow[pdfcol].Content.ToString()))
                                        {
                                            myPdfChildHeader.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        else
                                        {
                                            myPdfChildHeader.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleLeft);
                                        }
                                    }
                                }
                            }
                            while (!myPdfChildHeader.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 5;
                                }
                                if (myPdfDocument.PageHeight - posY < 200)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage = myPdfChildHeader.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, myPdfDocument.PageWidth - 50, height));
                                newPdfPage.Add(newPdfTablePage);
                                currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                //
                                Point pStart = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 575), Convert.ToInt32(posY + 20));
                                Point pEnd = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 20));
                                PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                newPdfPage.Add(pdfLineBrk);
                            }
                        }
                    }
                    foreach (DataRow dRow in dt.Rows)
                    {
                        string m_VendorName = string.Empty;
                        if (!NotesDT.Columns.Contains("New"))
                        {
                            NotesDT.Columns.Add("New");
                        }
                        NotesDT.Columns["New"].SetOrdinal(0);
                        //Adding each row at a time
                        DataRow dNewRow = parentDT.NewRow();
                        for (int col = 0; col < dt.Columns.Count; col++)
                        {
                            if (dt.Columns[col].ColumnName == "Payment Terms")
                            {
                                if (!parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                                {
                                    parentDT.Columns.Add(dt.Columns[col].ColumnName);
                                    parentDT.Columns[dt.Columns[col].ColumnName].SetOrdinal(col);
                                }
                            }
                            else
                            {
                                if (parentDT.Columns.Contains(dt.Columns[col].ColumnName))
                                {
                                    dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                                }
                                else
                                {
                                    parentDT.Columns.Add(dt.Columns[col].ColumnName);
                                    dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                                }
                            }
                        }
                        parentDT.Rows.Add(dNewRow);
                        parentTrxID = string.Empty;
                        parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                        //Removing TrxID column
                        if (parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Remove("TrxID");
                        }
                        //Pivoting the tables
                        pNotesDT = reportsBO.PivotTable(NotesDT);
                        pDT = parentDT;
                        DataTable dtNew = new DataTable();
                        int colCnts = pDT.Columns.Count;
                        for (int cols = 0; cols < (colCnts * 2); cols++)
                        {
                            DataColumn dc = new DataColumn();
                            dtNew.Columns.Add("Column" + cols);
                        }
                        DataRow dnRow = dtNew.NewRow();
                        for (int kl = 0; kl < dtNew.Columns.Count; kl++)
                        {
                            if (kl == 0)
                            {
                                dnRow[kl] = pDT.Rows[0][0].ToString();
                            }
                            else
                            {
                                if (kl % 2 == 0)
                                {
                                    dnRow[kl] = pDT.Rows[0][kl / 2].ToString();
                                }
                                else
                                {
                                    if (kl > pDT.Columns.Count)
                                    {
                                        dnRow[kl] = null;
                                    }
                                    else
                                    {
                                        dnRow[kl] = null;
                                    }
                                }
                            }
                        }
                        dtNew.Rows.Add(dnRow);
                        int rowsInTab1 = dtNew.Rows.Count;
                        int colsInTab1;
                        colsInTab1 = dtNew.Columns.Count;
                        int[] Arraywidth1 = new int[colsInTab];
                        //Setting columns width based on the No of columns
                        for (int colCnt = 0; colCnt < colsInTab1; colCnt++)
                        {
                            Arraywidth1[colCnt] = 40;
                        }
                        m_VendorName = dtNew.Rows[0][0].ToString();
                        //
                        PdfTable myPdfTableVal = myPdfDocument.NewTable(FontRegular, rowsInTab1, colsInTab1, 1);
                        dtNew = objclsrpt.WrapFullViewLength(dtNew, Arraywidth1);
                        myPdfTableVal.ImportDataTable(dtNew);
                        myPdfTableVal.HeadersRow.SetForegroundColor(Color.White);
                        myPdfTableVal.SetBorders(Color.Black, 1, BorderType.None);
                        for (int columns = 0; columns < myPdfTableVal.Cells.Count; columns++)
                        {
                            if (columns % 2 == 0)
                            {
                                myPdfTableVal.Columns[columns].SetFont(SumRowFont);
                                myPdfTableVal.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            else
                            {
                                myPdfTableVal.Columns[columns].SetWidth(dtNew.Rows[0][columns].ToString().Length + 2);
                                myPdfTableVal.SetContentAlignment(ContentAlignment.MiddleLeft);
                            }
                        }
                        while (!myPdfTableVal.AllTablePagesCreated)
                        {
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos;
                            }
                            if (myPdfDocument.PageHeight - posY < 200)
                            {
                                posY = 60;
                                currentYPos = 60;
                                newPdfPage.SaveToDocument();
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            PdfTablePage newPdfTablePage = myPdfTableVal.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                            newPdfPage.Add(newPdfTablePage);
                            currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                        }
                        //Notes DT
                        if (NotesDT.Rows.Count > 0)
                        {
                            if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                            {
                                int rowsInNotesDT = NotesDT.Rows.Count;
                                int colsInNotesDT = NotesDT.Columns.Count;
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                                myPdfTable1.ImportDataTable(NotesDT);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        //Adding logo
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos + 10;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                        XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                        if (nodeBranches != null)
                        {
                            foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetReportStyle501DataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                if (BranchDT.Columns["Description"] != null)
                                {
                                    BranchDT.Columns.Remove("Description");
                                }
                                if (BranchDT.Rows.Count > 0)
                                {
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    bool sumExists = false;
                                    int rowsInBranchDT = 0;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null || nodeBranchCol.Attributes["Label"].Value != "Description")
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            colFVL = 60;
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(Convert.ToString(BranchDT.Rows[BranchDT.Rows.Count - 1][1])))
                                    {
                                        DataRow drBranch = BranchDT.NewRow();
                                        BranchDT.Rows.Add(drBranch);
                                    }
                                    rowsInBranchDT = BranchDT.Rows.Count;
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][0] = "Total ";
                                    BranchDT = objclsrpt.WrapFullViewLength(BranchDT, BranchArraywidth);
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.HeadersRow.SetForegroundColor(Color.White);
                                    myPdfTable1.HeadersRow.SetBackgroundColor(Color.White);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                        for (int drw = 0; drw < BranchDT.Rows.Count; drw++)
                                        {
                                            for (int dcl = 0; dcl < BranchDT.Columns.Count; dcl++)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[dcl].Content.ToString()))
                                                {
                                                    if (BranchDT.Rows[drw][0].ToString() == string.Empty)
                                                    {
                                                        myPdfTable1.Rows[drw][dcl].SetFont(SumRowFont);
                                                    }
                                                }
                                            }
                                        }
                                        foreach (PdfCell pcl in myPdfTable1.Rows[BranchDT.Rows.Count - 1].Cells)
                                        {
                                            if (pcl.Content.ToString().Trim().ToUpper().Contains("TOTAL"))
                                            {
                                                pcl.SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 60;
                                            currentYPos = 60;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);

                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos - 10;
                                        }
                                        if (myPdfDocument.PageHeight - posY < 200)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo

                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                        //Deleting the printed row from parentDT
                        if (tableLayout.ToUpper().Trim() == "PIVOT")
                        {
                            if (pDT.Columns.Count > 1)
                            {
                                pDT.Columns.RemoveAt(1);
                            }
                            parentDT.Rows[0].Delete();
                            //Adding TrxID column
                            if (!parentDT.Columns.Contains("TrxID"))
                            {
                                parentDT.Columns.Add("TrxID");
                            }
                        }
                    }
                }
                string branchName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches/Branch/Node").InnerText;
                DataTable dtTotals = new DataTable();
                dtTotals = objclsrpt.GetReportStyle501AllTotalsToPrint(strOutXml, branchName);
                dtTotals = objclsrpt.ChangeDateAndAmountFormats(dtTotals, strOutXml, branchName);
                dtTotals.Rows[0][0] = "Grand Totals";
                //
                Hashtable m_htBranchRightAlign1 = new Hashtable();
                Font SumRowFont1 = new Font("Verdana", 7, FontStyle.Bold);
                bool sumExists1 = false;
                if (dtTotals.Columns["Description"] != null)
                {
                    dtTotals.Columns.Remove("Description");
                }
                int rowsInBranchDT1 = dtTotals.Rows.Count;
                int colsInBranchDT1 = dtTotals.Columns.Count;
                if (dtTotals.Rows.Count > 0)
                {
                    //Getting the columns to be displayed in grid
                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/GridHeading/Columns");
                    int[] BranchArraywidth = new int[colsInBranchDT1];
                    foreach (DataColumn dBranchCol in dtTotals.Columns)
                    {
                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                        //Checking for isSummed value for that column
                        if (nodeBranchCol != null)
                        {
                            //Getting the cols having Issummed=1 
                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                            {
                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                {
                                    if (!sumExists1)
                                        sumExists1 = true;
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                }
                            }
                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                            if (nodeBranchCol.Attributes["ControlType"] != null)
                            {
                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                {
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                }
                            }
                        }
                        //Setting the column width of branch table
                        int dcPos = dBranchCol.Ordinal;
                        int colFVL = 0;
                        if (nodeBranchCol != null)
                        {
                            //if (nodeBranchCol.Attributes["FullViewLength"] != null)
                            //{
                            //    if (Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5) > Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value))
                            //    {
                            //        colFVL = Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5);
                            //    }
                            //    else
                            //    {
                            //        colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                            //    }
                            //}
                            colFVL = 60;
                        }
                        if (colFVL != 0)
                        {
                            BranchArraywidth[dcPos] = colFVL;
                        }
                        else
                        {
                            BranchArraywidth[dcPos] = 15;
                        }
                    }
                    foreach (DataColumn dBranchCol in dtTotals.Columns)
                    {
                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                        //Checking for isSummed value for that column
                        if (nodeBranchCol != null)
                        {
                            //Getting the cols having Issummed=1 
                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                            {
                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                {
                                    if (!sumExists1)
                                        sumExists1 = true;
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                }
                            }
                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                            if (nodeBranchCol.Attributes["ControlType"] != null)
                            {
                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                {
                                    if (!m_htBranchRightAlign1.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                        m_htBranchRightAlign1.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                }
                            }
                        }
                    }
                }

                PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, 1, dtTotals.Columns.Count, 1);
                Font myHeaderFont1 = new Font("Verdana", 8, FontStyle.Bold);
                myPdfTable2.ImportDataTable(dtTotals);
                myPdfTable2.HeadersRow.SetFont(myHeaderFont1);
                myPdfTable2.VisibleHeaders = false;
                myPdfTable2.SetBorders(Color.Black, 1, BorderType.None);
                myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (m_htBranchRightAlign1.Count > 0)
                {
                    if (sumExists1)
                    {
                        //Right justifying Summed row content
                        myPdfTable2.Rows[dtTotals.Rows.Count - 1].SetFont(SumRowFont1);
                        myPdfTable2.Rows[dtTotals.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                    }
                    //Right justifying Summed column content and IsNumeric column content
                    for (int pdfcol = 0; pdfcol < colsInBranchDT1; pdfcol++)
                    {

                        if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                        {
                            if (m_htBranchRightAlign1.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                            {
                                myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                            }
                        }
                        foreach (PdfCell pcll in myPdfTable2.Columns[pdfcol].Cells)
                        {
                            if (pcll.Content.ToString().Trim().ToUpper() == "GRAND TOTALS")
                            {
                                pcll.SetContentAlignment(ContentAlignment.MiddleLeft);
                            }
                            if (pcll.Content.ToString().Trim().ToUpper() == "0.00")
                            {
                                pcll.SetForegroundColor(Color.White);
                            }
                        }
                    }
                    for (int drw = 0; drw < dtTotals.Rows.Count; drw++)
                    {
                        for (int dcl = 0; dcl < dtTotals.Columns.Count; dcl++)
                        {
                            if (m_htBranchRightAlign1.Contains(myPdfTable2.HeadersRow[dcl].Content.ToString()))
                            {
                                if (dtTotals.Rows[drw][0].ToString() == string.Empty)
                                {
                                    myPdfTable2.Rows[drw][dcl].SetFont(SumRowFont1);
                                }
                            }
                        }
                    }
                }
                while (!myPdfTable2.AllTablePagesCreated)
                {
                    //Setting the Y position and if required creating new page
                    if (currentYPos > myPdfDocument.PageHeight - 50)
                    {
                        posY = 60;
                        currentYPos = 60;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);

                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    else
                    {
                        posY = currentYPos;
                    }
                    if (myPdfDocument.PageHeight - posY < 200)
                    {
                        posY = 60;
                        currentYPos = 60;
                        newPdfPage.SaveToDocument();
                        //Adding new page and adding Header table,logo image and pageNo 
                        newPdfPage = myPdfDocument.NewPage();
                        newPdfPage.Add(myHeaderPdfTablePage);

                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }

                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 75, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    }
                    PdfTablePage newPdfTablePage1 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                    newPdfPage.Add(newPdfTablePage1);
                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                    //
                    Point pStartTotal = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 575), Convert.ToInt32(posY + 10));
                    Point pEndTotal = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 10));
                    PdfLine pdfLineBrkTotal = new PdfLine(myPdfDocument, pStartTotal, pEndTotal, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrkTotal);
                    Point pStartTotal1 = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 575), Convert.ToInt32(posY + 20));
                    Point pEndTotal1 = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 20));
                    PdfLine pdfLineBrkTotal1 = new PdfLine(myPdfDocument, pStartTotal1, pEndTotal1, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrkTotal1);
                    Point pStartTotal2 = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 575), Convert.ToInt32(posY + 23));
                    Point pEndTotal2 = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 23));
                    PdfLine pdfLineBrkTotal2 = new PdfLine(myPdfDocument, pStartTotal2, pEndTotal2, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrkTotal2);
                }
                newPdfPage.SaveToDocument();
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region  OldGVPivotParentNewPgExpToPDF



        /// <summary>
        /// Exports the data to PDF
        /// </summary>
        /// <param name="dt">Data table to be printed</param>
        /// <param name="dt">Filename to be printed</param>
        private void OldGVPivotParentNewPgExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            myPdfDocument = new PdfDocument();
            try
            {
                DataTable pNotesDT = new DataTable();
                DataTable pDT = new DataTable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }

                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                int pageCnt = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 70;
                    currentYPos = 70;
                    if (!NotesDT.Columns.Contains("New"))
                    {
                        NotesDT.Columns.Add("New");
                    }
                    NotesDT.Columns["New"].SetOrdinal(0);
                    if (!parentDT.Columns.Contains("New"))
                    {
                        parentDT.Columns.Add("New");
                    }
                    parentDT.Columns["New"].SetOrdinal(0);
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Pivoting the tables
                    pNotesDT = reportsBO.PivotTable(NotesDT);
                    pDT = reportsBO.PivotTable(parentDT);
                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = pDT.Rows.Count;
                    int colsInTab = pDT.Columns.Count;
                    //Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                    Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                    Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                    Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                    Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                    Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                    Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                    Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                    int[] Arraywidth = new int[colsInTab];
                    //Setting columns width based on the No of columns
                    for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                    {
                        Arraywidth[colCnt] = 30;
                    }
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    pDT = objclsrpt.WrapFullViewLength(pDT, Arraywidth);
                    myPdfTable.ImportDataTable(pDT);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                    //myPdfTable.HeadersRow.SetFont(HeaderFont);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.Columns[0].SetFont(HeaderFont);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    //myPdfTable.SetRowHeight(15);                
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    //Getting Header table
                    string title = string.Empty;
                    XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                    if (nodeTitle != null)
                    {
                        title = nodeTitle.InnerText.Trim().ToString();
                    }
                    string subTitle = string.Empty;
                    XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                    if (nodeSubTitle != null)
                    {
                        subTitle = nodeSubTitle.InnerText.Trim().ToString();
                    }
                    DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                    myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                    //Import DT to PDF table
                    myHeaderPdfTable.ImportDataTable(HeaderDT);
                    //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                    myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                    myHeaderPdfTable.VisibleHeaders = false;
                    //myHeaderPdfTable.SetBackgroundColor(Color.White);
                    myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 155, 55 });
                    int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                    myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (titleLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                    int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                    if (subTitleLength < 75)
                    {
                        myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                    if (myHeaderPdfTable.Rows.Length > 2)
                    {
                        int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                        if (dateLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    }
                    PdfArea pdfArea = new PdfArea(myPdfDocument, posX, 70, width, 60);
                    PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                    imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                    imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                    newPdfPage.Add(myHeaderPdfTablePage);
                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            //Setting the Y position and if required creating new page
                            if (currentYPos > myPdfDocument.PageHeight - 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            else
                            {
                                posY = currentYPos;
                            }
                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                            {
                                posY = 70;
                                currentYPos = 70;
                                newPdfPage.SaveToDocument();
                                //Adding new page and adding Header table,logo image and pageNo 
                                newPdfPage = myPdfDocument.NewPage();
                                newPdfPage.Add(myHeaderPdfTablePage);
                                //Adding logo
                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                            }
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Getting the dataset to be bound to the grid.
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                BranchDT = SetColumnsWidths(BranchDT);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    ArrayList m_alCalendarControls = new ArrayList();
                                    Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    int dcindex = 0;
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                }
                                                //getting columns having ControlType="Cal"
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Cal")
                                                {
                                                    m_alCalendarControls.Add(dcindex);
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        foreach (DataRow dBrancRw in BranchDT.Rows)
                                        {
                                            if (nodeBranchCol != null)
                                            {
                                                if (dBrancRw[dcPos].ToString().Length > 0)
                                                {
                                                    if (dBrancRw[dcPos].ToString() != null)
                                                    {
                                                        if (dBrancRw[dcPos].ToString().Length > Convert.ToInt32(BranchArraywidth[dcPos].ToString()))
                                                        {
                                                            BranchArraywidth[dcPos] = Convert.ToInt32(dBrancRw[dcPos].ToString().Length + 5);
                                                        }
                                                    }
                                                }
                                            }
                                            //increment column index
                                            dcindex++;
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                    BranchDT = objclsrpt.WrapFullViewLength(BranchDT, BranchArraywidth);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetBackgroundColor(Color.White);
                                    myPdfTable1.HeadersRow.SetForegroundColor(Color.White);
                                    myPdfTable1.HeadersRow.SetCellPadding(0);
                                    myPdfTable1.HeadersRow.SetTransparent();
                                    myPdfTable1.Rows[0].SetColors(Color.Black, Color.Gainsboro);
                                    //DateTime dateTime;
                                    //for (int i = 0; i <= m_alCalendarControls.Count - 1; i++)
                                    //{
                                    //    myPdfTable1.Columns[int.Parse(m_alCalendarControls[i].ToString())].SetContentFormat("{0:MM/DD/YYYY}");
                                    //}
                                    myPdfTable1.SetBorders(Color.White, 1, BorderType.None);
                                    myPdfTable1.HeadersRow.MergeCells();
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleLeft);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            //posY = currentYPos + 25;
                                            posY = currentYPos;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 250, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 250, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "PIVOT")
                    {
                        pDT.Columns.RemoveAt(1);
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                XmlNode xnodes = xDoc.SelectSingleNode("//PrintOption");
                string PrintOption = string.Empty;
                if (xnodes != null)
                {
                    PrintOption = xDoc.SelectSingleNode("//PrintOption").InnerText;
                }
                if (PrintOption == "BPP" || PrintOption == "PE" || PrintOption == "PopUp")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                    else
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion
            }
        }
        #endregion

        #region OldGVPivotParentCntPgExpToPDF
        /// <summary>
        /// Exports the data to PDF
        /// </summary>
        /// <param name="dt">Data table to be printed</param>
        /// <param name="dt">Filename to be printed</param>
        private void OldGVPivotParentCntPgExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                DataTable pNotesDT = new DataTable();
                DataTable pDT = new DataTable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }

                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                int pageCnt = 0;
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                //Import DT to PDF table
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                myHeaderPdfTable.VisibleHeaders = false;
                //myHeaderPdfTable.SetBackgroundColor(Color.White);
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 155, 55 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                if (myHeaderPdfTable.Rows.Length > 2)
                {
                    int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                    if (dateLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    if (myHeaderPdfTable.Rows[2][1].Content.ToString() != string.Empty)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                }
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                //Adding new page and adding Header table,logo image and pageNo 
                PdfPage newPdfPage = myPdfDocument.NewPage();
                //Adding Header table
                newPdfPage.Add(myHeaderPdfTablePage);
                //Adding logo
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                foreach (DataRow dRow in dt.Rows)
                {
                    if (!NotesDT.Columns.Contains("New"))
                    {
                        NotesDT.Columns.Add("New");
                    }
                    NotesDT.Columns["New"].SetOrdinal(0);
                    if (!parentDT.Columns.Contains("New"))
                    {
                        parentDT.Columns.Add("New");
                    }
                    parentDT.Columns["New"].SetOrdinal(0);
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Pivoting the tables
                    pNotesDT = reportsBO.PivotTable(NotesDT);
                    pDT = reportsBO.PivotTable(parentDT);
                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = pDT.Rows.Count;
                    int colsInTab = pDT.Columns.Count;
                    int[] Arraywidth = new int[colsInTab];
                    //Setting columns width based on the No of columns
                    for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                    {
                        Arraywidth[colCnt] = 20;
                    }
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    pDT = objclsrpt.WrapFullViewLength(pDT, Arraywidth);
                    myPdfTable.ImportDataTable(pDT);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.Columns[0].SetFont(HeaderFont);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 10;
                        }
                        if (myPdfDocument.PageHeight - posY < 200)
                        {
                            posY = 60;
                            currentYPos = 60;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, 300, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 10;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 60;
                                    currentYPos = 60;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Getting the dataset to be bound to the grid.
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            //if (nodeBranch.Attributes["ControlType"] == null)//Need to check
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                //BranchDT = GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.GetReportStyle501DataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 7, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                if (Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5) > Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value))
                                                {
                                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["Caption"].Value.Length + 5);
                                                }
                                                else
                                                {
                                                    colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                                }
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                        for (int drw = 0; drw < BranchDT.Rows.Count; drw++)
                                        {
                                            for (int dcl = 0; dcl < BranchDT.Columns.Count; dcl++)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[dcl].Content.ToString()))
                                                {
                                                    if (BranchDT.Rows[drw][0].ToString() == string.Empty)
                                                    {
                                                        myPdfTable1.Rows[drw][dcl].SetFont(SumRowFont);
                                                    }
                                                }
                                            }
                                        }
                                        //for (int prw = 0; prw < rowsInBranchDT; prw++)
                                        //{
                                        //    int cnts = 0;
                                        //    foreach (PdfCell pcll in myPdfTable1.Rows[prw].Cells)
                                        //    {
                                        //        if (pcll.Content.ToString() != string.Empty)
                                        //        {
                                        //            if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[cnts].Content.ToString()))
                                        //            {
                                        //                pcll.SetFont(SumRowFont);
                                        //                pcll.SetContentAlignment(ContentAlignment.MiddleRight);
                                        //                pcll.SetContentAlignment(ContentAlignment.MiddleRight);
                                        //            }
                                        //        }
                                        //        cnts++;
                                        //    }
                                        //}
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos + 10;
                                        }
                                        if (myPdfDocument.PageHeight - posY < 200)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                    }
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "PIVOT")
                    {
                        pDT.Columns.RemoveAt(1);
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                newPdfPage.SaveToDocument();
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }



        }



        #endregion

        #region OldGVNormalParentNewPgExpToPDF
        public void OldGVNormalParentNewPgExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")//Landscape
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                int[] Arraywidth = new int[dt.Columns.Count - 1];//not considering trxid col whose ordinal is 0
                //Storing the column width based on FVL in an array
                //Storing the captions of cols having IsSummed and IsNumeric as 1 in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    if (node.Attributes["Caption"] != null)
                    {
                        {
                            DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                            if (dc != null)
                            {
                                //Set the column width based on FVL
                                if (node.Attributes["FullViewLength"] != null)
                                {
                                    if (node.Attributes["FullViewLength"].Value != "0")
                                    {
                                        Arraywidth[dc.Ordinal] = Convert.ToInt32(node.Attributes["FullViewLength"].Value);
                                    }
                                    else
                                    {
                                        Arraywidth[dc.Ordinal] = 15;
                                    }
                                }
                                //Getting the cols having Issummed=1 
                                if (node.Attributes["IsSummed"] != null)
                                {
                                    if (node.Attributes["IsSummed"].Value == "1")
                                    {
                                        if (!isSumExists)
                                            isSumExists = true;
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                    }
                                }
                                //Getting the cols having ControlType="Amount"//Isnumeric=1
                                if (node.Attributes["ControlType"] != null)
                                {
                                    if (node.Attributes["ControlType"].Value == "Amount")
                                    {
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                    }
                                }
                            }
                        }
                    }
                }
                //Setting columns width for cols not present in node columns
                for (int colCnt = 0; colCnt < dt.Columns.Count - 1; colCnt++)
                {
                    if (Arraywidth[colCnt].ToString() == string.Empty)
                        Arraywidth[colCnt] = 15;
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }

                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                int pageCnt = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 70;
                    currentYPos = 70;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = parentDT.Rows.Count;
                    int colsInTab = parentDT.Columns.Count;
                    Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                    Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                    Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                    Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                    Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                    Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                    Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    parentDT = objclsrpt.WrapFullViewLength(parentDT, Arraywidth);
                    myPdfTable.ImportDataTable(parentDT);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (m_htRightAlign.Count > 0)
                    {
                        //Right justifying Summed column content and IsNumeric column content
                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                        {
                            if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                            {
                                if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                {
                                    myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                            }
                        }
                    }
                    //Getting Header table
                    string title = string.Empty;
                    XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                    if (nodeTitle != null)
                    {
                        title = nodeTitle.InnerText.Trim().ToString();
                    }
                    string subTitle = string.Empty;
                    XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                    if (nodeSubTitle != null)
                    {
                        subTitle = nodeSubTitle.InnerText.Trim().ToString();
                    }
                    DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                    //
                    myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                    //Import DT to PDF table
                    myHeaderPdfTable.ImportDataTable(HeaderDT);
                    //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                    myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                    myHeaderPdfTable.VisibleHeaders = false;
                    //myHeaderPdfTable.SetBackgroundColor(Color.White);
                    myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 145, 55 });
                    int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                    myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (titleLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                    int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                    if (subTitleLength < 75)
                    {
                        myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle             
                    if (myHeaderPdfTable.Rows.Length > 2)
                    {
                        int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                        if (dateLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    }
                    PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                    imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                    imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                    newPdfPage.Add(myHeaderPdfTablePage);
                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos;// +25;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos;// +25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //
                    //Getting the dataset to be bound to the grid.
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos + 25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            //Adding logo
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldGVNormalParentCntPgExpToPDF
        public void OldGVNormalParentCntPgExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                //Getting the rows to print
                XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                ////Default portrait pLayout="0"
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                dt = objclsrpt.ChangeDateAndAmountFormats(dt, strOutXml, treeNodeName);
                //Considering the PLayout only for the first treenode
                if (nodeRowList != null)
                {
                    if (myPdfDocument.PageCount == 0)
                    {
                        if (nodeRowList.FirstChild != null)
                        {
                            if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                            {
                                string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                if (pLayout == "1")
                                {
                                    myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                }
                            }
                        }
                    }
                }
                bool isSumExists = false;
                int[] Arraywidth = new int[dt.Columns.Count - 1];
                foreach (XmlNode node in nodeColumns)
                {
                    if (node.Attributes["Caption"] != null)
                    {
                        {
                            DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                            if (dc != null)
                            {
                                //Set the column width based on FVL
                                if (node.Attributes["FullViewLength"] != null)
                                {
                                    if (node.Attributes["FullViewLength"].Value != "0")
                                    {
                                        Arraywidth[dc.Ordinal] = Convert.ToInt32(node.Attributes["FullViewLength"].Value);
                                    }
                                    else
                                    {
                                        Arraywidth[dc.Ordinal] = 15;
                                    }
                                }
                                //Getting the cols having Issummed=1 
                                if (node.Attributes["IsSummed"] != null)
                                {
                                    if (node.Attributes["IsSummed"].Value == "1")
                                    {
                                        if (!isSumExists)
                                            isSumExists = true;
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                    }
                                }
                                //Getting the cols having ControlType="Amount"//Isnumeric=1
                                if (node.Attributes["ControlType"] != null)
                                {
                                    if (node.Attributes["ControlType"].Value == "Amount")
                                    {
                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                    }
                                }
                            }
                        }
                    }
                }
                //Setting columns width for cols not present in node columns
                for (int colCnt = 0; colCnt < dt.Columns.Count - 1; colCnt++)
                {
                    if (Arraywidth[colCnt].ToString() == string.Empty)
                        Arraywidth[colCnt] = 15;
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }


                string imgpath = PDFImagePath();
                PdfImage LogoImage = null;
                if (!string.IsNullOrEmpty(imgpath))
                {
                    LogoImage = myPdfDocument.NewImage(imgpath);
                }
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                //Setting the different font styles
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderFont1 = new Font("Verdana", 7, FontStyle.Bold);
                Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
                Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
                int pageCnt = 0;
                #region Header
                //Getting Header table
                string title = string.Empty;
                XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                if (nodeTitle != null)
                {
                    title = nodeTitle.InnerText.Trim().ToString();
                }
                string subTitle = string.Empty;
                XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                if (nodeSubTitle != null)
                {
                    subTitle = nodeSubTitle.InnerText.Trim().ToString();
                }
                DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                //Import DT to PDF table
                myHeaderPdfTable.ImportDataTable(HeaderDT);
                //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                myHeaderPdfTable.VisibleHeaders = false;
                //myHeaderPdfTable.SetBackgroundColor(Color.White);
                myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 145, 55 });
                int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                if (titleLength < 75)
                {
                    myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                if (subTitleLength < 75)
                {
                    myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                }
                myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);//Page subTitle
                if (myHeaderPdfTable.Rows.Length > 2)
                {
                    int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                    if (dateLength < 75)
                    {
                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);//Page subTitle
                    int periodLength = myHeaderPdfTable.Rows[2][1].Content.ToString().Length;
                    if (periodLength < 75)
                    {
                        myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                    }
                    myHeaderPdfTable.Rows[2][1].SetFont(HeaderPageTitleFont3);//Page subTitle
                }
                PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                //Adding new page and adding Header table,logo image and pageNo 
                PdfPage newPdfPage = myPdfDocument.NewPage();
                //Adding Header table
                newPdfPage.Add(myHeaderPdfTablePage);
                //Adding logo
                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                #endregion


                #region Fill Branch DataTables
                DataTable dtChild = null;
                DataTable dtCGbranch = null;

                int[] colWidths = null;
                int[] arrWidths = null;
                bool PLayout = new bool();
                //
                Hashtable htPFormats = new Hashtable();
                Hashtable htColFormats = new Hashtable();
                Hashtable htColNameValues = new Hashtable();
                DataTable dtParentAll = new DataTable();
                //Set Branch DataTable
                string branchName = string.Empty;
                string CGbranchName = string.Empty;
                XmlNode nodeBranch = null;
                // Set branch Table
                int[] colBranchWidths = null;
                int[] arrBranchWidths = null;
                bool bPLayout = false;
                //
                Hashtable htBFormats = new Hashtable();
                Hashtable htBColFormats = new Hashtable();
                Hashtable htBColNameValues = new Hashtable();
                //
                //Set Branch CGrid DataTable
                int[] colCGbranchWidths = null;
                int[] arrCGbranchWidths = null;
                bool CGbPLayout = false;
                //
                Hashtable htCGbFormats = new Hashtable();
                Hashtable htCGbColFormats = new Hashtable();
                Hashtable htCGbColNameValues = new Hashtable();
                //
                if (xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches/Branch") != null)
                {
                    nodeBranch = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranch != null)
                    {
                        foreach (XmlNode nodeBranchName in nodeBranch.ChildNodes)
                        {
                            XmlAttribute attrCntrlType = nodeBranchName.Attributes["ControlType"];
                            if (attrCntrlType != null && attrCntrlType.Value.Trim() == "GView")
                            {
                                CGbranchName = nodeBranchName.SelectSingleNode("Node").InnerText;
                            }
                            else
                            {
                                branchName = nodeBranchName.SelectSingleNode("Node").InnerText;
                            }
                        }
                    }
                }
                if (branchName != string.Empty)
                {
                    XmlNode nodeBranchColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/GridHeading/Columns");
                    XmlNode nodeBranchRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchName + "/RowList");
                    if (nodeBranchRowList != null)
                    {
                        dtChild = clsReportsUICore.ConvertToArrayColumns(nodeBranchColumns, "Branch", branchName, treeNodeName, out htBColFormats, out htBColNameValues, out colBranchWidths);
                        dtChild = clsReportsUICore.ConvertToDataTable(dtChild, "Branch", nodeBranchRowList, htBColFormats, htBColNameValues, colBranchWidths, true, out arrBranchWidths, out htBFormats, out bPLayout);
                    }
                }
                if (CGbranchName != string.Empty)
                {
                    XmlNode nodeCGbranchColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + CGbranchName + "/GridHeading/Columns");
                    XmlNode nodeCGbranchRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + CGbranchName + "/RowList");
                    if (nodeCGbranchRowList != null)
                    {
                        dtCGbranch = clsReportsUICore.ConvertToArrayColumns(nodeCGbranchColumns, "GView", CGbranchName, treeNodeName, out htCGbColFormats, out htCGbColNameValues, out colCGbranchWidths);
                        dtCGbranch = clsReportsUICore.ConvertToDataTable(dtCGbranch, "GView", nodeCGbranchRowList, htCGbColFormats, htCGbColNameValues, colCGbranchWidths, true, out arrCGbranchWidths, out htCGbFormats, out CGbPLayout);
                    }
                }
                #endregion
                #region ParentDT
                foreach (DataRow dRow in dt.Rows)
                {
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    Hashtable htGrandTotals = new Hashtable();
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    // Varaible to get the Row and Column count of three tables
                    int rowsInTab = parentDT.Rows.Count;
                    int colsInTab = parentDT.Columns.Count;
                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                    //Import DT to PDF table
                    parentDT = objclsrpt.WrapFullViewLength(parentDT, Arraywidth);
                    myPdfTable.ImportDataTable(parentDT);
                    //Setting the header row text color as white
                    myPdfTable.HeadersRow.SetFont(HeaderFont1);
                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                    myPdfTable.SetColumnsWidth(Arraywidth);
                    //Now we set some alignment... for the whole table and then, for a column:
                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                    if (m_htRightAlign.Count > 0)
                    {
                        //Right justifying Summed column content and IsNumeric column content
                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                        {
                            if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                            {
                                if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                {
                                    myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                    myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                            }
                        }
                    }
                    while (!myPdfTable.AllTablePagesCreated)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        else
                        {
                            posY = currentYPos + 25;
                        }
                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                        {
                            posY = 70;
                            currentYPos = 70;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo 
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage.Add(myHeaderPdfTablePage);
                            //Adding logo
                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        }
                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                        newPdfPage.Add(newPdfTablePage);
                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                    }
                    //Notes DT
                    if (NotesDT.Rows.Count > 0)
                    {
                        if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                        {
                            int rowsInNotesDT = NotesDT.Rows.Count;
                            int colsInNotesDT = NotesDT.Columns.Count;
                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                            myPdfTable1.ImportDataTable(NotesDT);
                            myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont1);
                            myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                newPdfPage.Add(newPdfTablePage1);
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                            }
                        }
                    }
                    //Branch dt start
                    #region Branch DT
                    DataRow[] drFiltered = null;
                    DataTable BranchDT = new DataTable();
                    string branchNodeName = nodeBranch.SelectSingleNode("//Node").InnerText;
                    //drFiltered = dtCGbranch.Select(branchNodeName + "_TrxID=" + parentTrxID);
                    //Partha - Made changes to accomodate Branch without control type Gview
                    if (dtChild != null)
                    {
                        drFiltered = dtChild.Select(branchNodeName + "_TrxID='" + parentTrxID + "'");
                    }
                    else if (dtCGbranch != null)
                    {
                        drFiltered = dtCGbranch.Select(branchNodeName + "_TrxID='" + parentTrxID + "'");
                    }
                    if (drFiltered.Length > 0)
                    {
                        int[] childIndexes = new int[drFiltered.Length];
                        int childRowIndex = 0;
                        string strCustom = string.Empty;
                        string strTotalAmount = string.Empty;
                        double TotalAmount = 0;

                        for (int drFoundRws = 0; drFoundRws < drFiltered.Length; drFoundRws++)
                        {
                            DataRow dtChRow = BranchDT.NewRow();
                            int rowIndex = 0;
                            //if (BranchDT.Columns.Count == 0)
                            //{
                            if (dtChild != null)
                            {
                                if (BranchDT.Columns.Count == 0)
                                {
                                    for (int x = 0; x < dtChild.Columns.Count; x++)
                                    {
                                        BranchDT.Columns.Add(dtChild.Columns[x].ColumnName);
                                    }
                                }
                                for (int i = 0; i < BranchDT.Columns.Count; i++)
                                {
                                    dtChRow[i] = drFiltered[drFoundRws].ItemArray[i].ToString();
                                }
                                BranchDT.Rows.Add(dtChRow);
                                //
                                rowIndex = dtChild.Rows.IndexOf(drFiltered[drFoundRws]);
                                string[] grandFormats = (string[])htBFormats[childRowIndex];
                                foreach (string val in grandFormats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "RAlign":
                                            {
                                                if (strvalues.Length > 2)
                                                {
                                                    strCustom = string.Empty;
                                                    decimal amount;
                                                    TotalAmount = 0;
                                                    string amt = string.Empty;
                                                    int colNo = Convert.ToInt32(strvalues[1].ToString());
                                                    string colName = BranchDT.Columns[colNo].ColumnName.Trim().ToString();
                                                    if (!htGrandTotals.ContainsKey(colName))
                                                    {
                                                        Decimal.TryParse(dtChRow[colNo].ToString(), out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals.Add(colName, amt);
                                                    }
                                                    else
                                                    {
                                                        TotalAmount = Convert.ToDouble(htGrandTotals[colName].ToString());
                                                        if (!string.IsNullOrEmpty(dtChRow[colNo].ToString()))
                                                        {
                                                            TotalAmount = TotalAmount + Convert.ToDouble(dtChRow[colNo].ToString());
                                                        }
                                                        strTotalAmount = Convert.ToString(TotalAmount);
                                                        Decimal.TryParse(strTotalAmount, out amount);
                                                        amt = string.Format("{0:N}", amount);
                                                        htGrandTotals[colName] = amt;
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                                //
                            }
                            else if (dtCGbranch != null)
                            {
                                if (BranchDT.Columns.Count == 0)
                                {
                                    for (int x = 0; x < dtCGbranch.Columns.Count; x++)
                                    {
                                        BranchDT.Columns.Add(dtCGbranch.Columns[x].ColumnName);
                                    }
                                }
                                for (int i = 0; i < BranchDT.Columns.Count; i++)
                                {
                                    dtChRow[i] = drFiltered[drFoundRws].ItemArray[i].ToString();
                                }
                                BranchDT.Rows.Add(dtChRow);
                            }
                            if (dtChild != null)
                            {
                                dtChild.Rows[rowIndex].Delete();
                                BranchDT.AcceptChanges();
                                BranchDT.TableName = dtChild.TableName;
                            }
                            if (childIndexes[0] != 0)
                            {
                                childIndexes[drFoundRws] = childRowIndex + drFoundRws;
                            }
                            else
                            {
                                childIndexes[drFoundRws] = childRowIndex;
                            }
                        }
                        //}
                        if (BranchDT.Columns.Contains("TrxID"))
                        {
                            BranchDT.Columns.Remove("TrxID");
                        }
                        if (BranchDT.Columns.Contains(branchNodeName + "_TrxID"))
                        {
                            BranchDT.Columns.Remove(branchNodeName + "_TrxID");
                        }

                        IDictionaryEnumerator enumTot = htGrandTotals.GetEnumerator();
                        if (htGrandTotals.Keys.Count > 0)
                        {
                            BranchDT.Rows.Add(BranchDT.NewRow());
                        }
                        while (enumTot.MoveNext())
                        {
                            BranchDT.Rows[BranchDT.Rows.Count - 1][enumTot.Key.ToString()] = enumTot.Value.ToString();
                        }
                        if (BranchDT.Rows.Count > 0)
                        {
                            Hashtable m_htBranchRightAlign = new Hashtable();
                            Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                            bool sumExists = false;
                            int rowsInBranchDT = BranchDT.Rows.Count;
                            int colsInBranchDT = BranchDT.Columns.Count;
                            //Getting the columns to be displayed in grid
                            XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                            int branchColPos = 0;
                            int[] BranchArraywidth = new int[colsInBranchDT];
                            foreach (DataColumn dBranchCol in BranchDT.Columns)
                            {
                                string strcolumname = dBranchCol.ColumnName;
                                XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption =\"" + strcolumname + "\"]");
                                //Checking for isSummed value for that column
                                if (nodeBranchCol != null)
                                {
                                    //Getting the cols having Issummed=1 
                                    if (nodeBranchCol.Attributes["IsSummed"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                        {
                                            if (!sumExists)
                                                sumExists = true;
                                            if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                        }
                                    }
                                    //Getting the cols having ControlType="Amount"//Isnumeric=1
                                    if (nodeBranchCol.Attributes["ControlType"] != null)
                                    {
                                        if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                        {
                                            if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                        }
                                    }
                                }
                                //Setting the column width of branch table
                                int dcPos = dBranchCol.Ordinal;
                                int colFVL = 0;
                                if (nodeBranchCol != null)
                                {
                                    if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                    {
                                        colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                    }
                                }
                                if (colFVL != 0)
                                {
                                    BranchArraywidth[dcPos] = colFVL;
                                }
                                else
                                {
                                    BranchArraywidth[dcPos] = 15;
                                }
                            }

                            PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                            Font myHeaderFont = new Font("Verdana", 10, FontStyle.Bold);
                            myPdfTable1.ImportDataTable(BranchDT);
                            myPdfTable1.HeadersRow.SetFont(HeaderFont1);
                            myPdfTable1.SetBorders(Color.Black, 0.01, BorderType.None);
                            myPdfTable1.SetColumnsWidth(BranchArraywidth);
                            myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                            for (int i = 0; i < childIndexes.Length; i++)
                            {
                                string[] arrformats = null;
                                if (dtChild != null)
                                {
                                    arrformats = (string[])htBFormats[childIndexes[i]];
                                }
                                else if (dtCGbranch != null)
                                {
                                    arrformats = (string[])htCGbFormats[childIndexes[i]];
                                }
                                foreach (string val in arrformats)
                                {
                                    string[] strvalues = val.Split('~');
                                    string strformat = string.Empty;
                                    if (strvalues.Length > 1)
                                    {
                                        strformat = strvalues[0];
                                    }
                                    else
                                    {
                                        strformat = strvalues[0];
                                    }
                                    switch (strformat)
                                    {
                                        case "pFont":
                                            {
                                                myPdfTable1.Rows[i].SetFont(SumRowFont);
                                                break;
                                            }
                                        case "pUnderLine":
                                            {
                                                myPdfTable1.Rows[i].SetFont(FontUnderline);
                                                break;
                                            }
                                        case "pBox":
                                            {
                                                for (int clCnt = 1; clCnt < myPdfTable1.Rows[i].Cells.Count; clCnt++)
                                                {
                                                    PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    PdfRectangle pr = newPdfTablePage.CellArea(i, clCnt).ToRectangle(Color.Black, 1, Color.White);
                                                    pr.StrokeWidth = 1;
                                                    newPdfPage.Add(pr);
                                                }
                                                break;
                                            }
                                        case "pLnSkip":
                                            {
                                                foreach (PdfCell pcll in myPdfTable.Cells)
                                                {
                                                    if (pcll.Content.ToString() == "SKIP")
                                                    {
                                                        pcll.SetBackgroundColor(Color.White);
                                                        pcll.SetForegroundColor(Color.White);
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                        case "RAlign":
                                            {
                                                myPdfTable1.HeadersRow[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable1.Columns[Convert.ToInt32(strvalues[1].ToString()) - 2].SetContentAlignment(ContentAlignment.MiddleRight);
                                                if (strvalues.Length > 2)
                                                {
                                                    myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont1);
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            while (!myPdfTable1.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos + 5;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    //Adding logo
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY));
                                newPdfPage.Add(newPdfTablePage1);
                                // DRAW LINE AT END OF EACH CHILD TABLE
                                double xPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.X;
                                double yPos = newPdfTablePage1.CellArea(newPdfTablePage1.LastRow, 0).TopLeftVertex.Y;
                                if (height > yPos)
                                {
                                    if (myPdfTable1.Rows.Length == (newPdfTablePage1.LastRow + 1))
                                    {
                                        //Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(yPos + 15));
                                        //Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(yPos + 15));
                                        Point pStart = new Point(Convert.ToInt32(xPos), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) + 5);
                                        Point pEnd = new Point(Convert.ToInt32(xPos + (myPdfDocument.PageWidth - 50)), Convert.ToInt32(newPdfTablePage1.Area.BottomLeftVertex.Y.ToString()) + 5);

                                        pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                    }
                                }
                                currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y + 15;
                            }
                        }
                    }
                    #endregion
                    //Branch dt end
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                #endregion
                //Parent dt end
                newPdfPage.SaveToDocument();
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region Old Report Style 11
        /// <summary>
        /// Report Style 11
        /// </summary>
        /// <param name="dt">Data table to be printed</param>
        /// <param name="dt">Filename to be printed</param>
        public void OldReportStyle11(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string GVXml, string tableLayout)
        {
            try
            {
                bool dataPrinted = false;
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                int pageCnt = 0;
                Hashtable m_htPagebrk = new Hashtable();
                Hashtable m_htRightAlign = new Hashtable();
                Hashtable m_htDateFormat = new Hashtable();
                string m_AmountNodes = string.Empty;
                string m_DateFormats = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(GVXml);
                XmlNode nodeGridLayout = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout");
                foreach (XmlNode nodetreenode in nodeGridLayout.ChildNodes)
                {
                    //Get the treeNodeName
                    string treeNodeName = nodetreenode.SelectSingleNode("Node").InnerText;
                    dt = XMLToDataTable(GVXml, treeNodeName, "");
                    dt = objclsrpt.ChangeDateAndAmountFormats(dt, GVXml, treeNodeName);
                    if (dt.Rows.Count > 0)
                    {
                        if (!dataPrinted)
                            dataPrinted = true;
                        if (dt.Columns.Contains("Notes"))
                        {
                            NotesDT = reportsBO.GenerateNotesDatatable(dt);
                            dt.Columns.Remove("Notes");
                        }
                        //Getting the columns to be displayed in grid
                        XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                        //Getting the rows to print
                        XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                        int pageBreaks = 0;
                        //Considering the PLayout only for the first treenode
                        if (myPdfDocument.PageCount == 0)
                        {
                            if (nodeRowList != null)
                            {
                                if (nodeRowList.FirstChild != null)
                                {
                                    if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                                    {
                                        string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                        if (pLayout == "1")//Landscape
                                        {
                                            myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                        }
                                    }
                                }
                            }
                        }
                        if (nodeRowList != null)
                        {
                            if (nodeRowList.ChildNodes != null)
                            {
                                foreach (XmlNode nodeRow in nodeRowList.ChildNodes)
                                {
                                    if (nodeRow.Attributes["TrxID"] != null)
                                    {
                                        string trxID = nodeRow.Attributes["TrxID"].Value;
                                        DataRow[] foundRows;
                                        foundRows = dt.Select("TrxID ='" + trxID + "'");
                                        if (foundRows.Length > 0)
                                        {
                                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                                            if (nodeRow.Attributes["pLnSkip"] != null)
                                            {
                                                if (nodeRow.Attributes["pLnSkip"].Value.ToString().Trim() != "0")
                                                {
                                                    for (int skipCnt = 0; skipCnt < Convert.ToInt32(nodeRow.Attributes["pLnSkip"].Value.Trim()); skipCnt++)
                                                    {
                                                        // Adding each row at a time
                                                        DataRow dSkipRow = dt.NewRow();
                                                        for (int col = 0; col < dt.Columns.Count; col++)
                                                        {
                                                            dSkipRow[dt.Columns[col].ColumnName] = "SKIP";
                                                        }
                                                        dt.Rows.InsertAt(dSkipRow, rowIndex + 1);
                                                        dt.AcceptChanges();
                                                    }
                                                }
                                            }
                                            if (nodeRow.Attributes["pPgBreak"] != null)
                                            {
                                                if (nodeRow.Attributes["pPgBreak"].Value.ToString().Trim() == "1")
                                                {
                                                    pageBreaks++;
                                                    m_htPagebrk.Add(pageBreaks, rowIndex);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // Variable to get the Column count of the parent table
                        int colsInTab = dt.Columns.Count - 1;
                        int[] Arraywidth = new int[colsInTab];
                        bool isSumExists = false;
                        if (tableLayout.ToUpper().Trim() == "NORMAL")
                        {
                            foreach (XmlNode node in nodeCols)
                            {
                                if (node.Attributes["Caption"] != null)
                                {
                                    DataColumn dc = dt.Columns[node.Attributes["Caption"].Value];
                                    if (dc != null)
                                    {
                                        //Set the column width based on FVL
                                        if (node.Attributes["IsDisplayOnly"] != null)
                                        {
                                            if (node.Attributes["IsDisplayOnly"].Value != "0")
                                            {
                                                Arraywidth[dc.Ordinal] = Convert.ToInt32(node.Attributes["IsDisplayOnly"].Value);
                                            }
                                            else
                                            {
                                                Arraywidth[dc.Ordinal] = 15;
                                            }
                                        }
                                        //Getting the cols having Issummed=1 
                                        if (node.Attributes["IsSummed"] != null)
                                        {
                                            if (node.Attributes["IsSummed"].Value == "1")
                                            {
                                                if (!isSumExists)
                                                    isSumExists = true;
                                                if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                    m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                            }
                                        }
                                        //Getting the cols having ControlType="Amount"//Isnumeric=1
                                        if (node.Attributes["ControlType"] != null)
                                        {
                                            if (node.Attributes["ControlType"].Value == "Cal")
                                            {
                                                m_DateFormats = node.Attributes["Caption"].Value;
                                                if (!m_htDateFormat.Contains(node.Attributes["Caption"].Value))
                                                {
                                                    m_htDateFormat.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                }
                                            }
                                            if (node.Attributes["ControlType"].Value == "Amount")
                                            {
                                                m_AmountNodes = node.Attributes["Caption"].Value;
                                                if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                {
                                                    m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //Setting columns width for cols not present in node columns
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                if (Arraywidth[colCnt].ToString() == string.Empty)
                                    Arraywidth[colCnt] = 15;
                            }
                        }
                        else
                        {
                            //Setting columns width based on No of cols
                            for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                            {
                                Arraywidth[colCnt] = 20;
                            }
                        }
                        //Setting the X and Y positons, width and height of the tables
                        double posX = 20;
                        double posY = 70;
                        double width = myPdfDocument.PageWidth - 50;
                        double height = myPdfDocument.PageHeight - 50;
                        double currentYPos = 70;

                        string imgpath = PDFImagePath();
                        PdfImage LogoImage = null;
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            LogoImage = myPdfDocument.NewImage(imgpath);
                        }
                        Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                        Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                        Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                        Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                        Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                        Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                        Font SumRowFont = new Font("Verdana", 7, FontStyle.Bold);
                        Font RowFontBold = new Font("Verdana", 7, FontStyle.Bold);
                        Font FontUnderline = new Font("Verdana", 7, FontStyle.Underline | FontStyle.Bold);
                        Font RowBoxFontBold = new Font("Verdana", 7, FontStyle.Bold);
                        //Getting Header table
                        string title = string.Empty;
                        XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Title");
                        if (nodeTitle != null)
                        {
                            title = nodeTitle.InnerText.Trim().ToString();
                        }
                        string subTitle = string.Empty;
                        XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/SubTitle");
                        if (nodeSubTitle != null)
                        {
                            subTitle = nodeSubTitle.InnerText.Trim().ToString();
                        }
                        //Getting header DT for this treenode
                        DataTable HeaderDT = objclsrpt.GetHeaderDT(title, subTitle);
                        myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 2);
                        //Import HeaderDT to PDF table
                        myHeaderPdfTable.ImportDataTable(HeaderDT);
                        //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                        myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                        //myHeaderPdfTable.SetBackgroundColor(Color.White);
                        myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                        //myHeaderPdfTable.SetColumnsWidth(new int[] { 100, 300, 100,100 })
                        //myHeaderPdfTable.SetColumnsWidth(new int[] { 100, 350, 100, 50 });
                        myHeaderPdfTable.SetColumnsWidth(new int[] { 140, 300, 145, 55 });
                        int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (titleLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);//Page Title
                        int subTitleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                        if (subTitleLength < 75)
                        {
                            myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);
                        int dateLength = myHeaderPdfTable.Rows[1][1].Content.ToString().Length;
                        if (dateLength < 75)
                        {
                            myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                        }
                        myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);
                        PdfTablePage myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 20, width, 70));
                        imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                        imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                        //Adding New page for the first time
                        PdfPage newPdfPage = myPdfDocument.NewPage();
                        //Adding header table in the first page
                        newPdfPage.Add(myHeaderPdfTablePage);
                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                        if (pageBreaks != 0)
                        {
                            for (int pgbrk = 1; pgbrk <= pageBreaks + 1; pgbrk++)
                            {
                                posY = 70;
                                currentYPos = 70;
                                //if (m_htPagebrk.Contains(pgbrk))
                                {
                                    int dtStRow = 0;
                                    int dtEndRow = 0;
                                    if (pgbrk == 1)
                                    {
                                        dtStRow = 0;
                                    }
                                    else
                                    {
                                        dtStRow = Convert.ToInt32(m_htPagebrk[pgbrk - 1].ToString()) + 1;
                                    }
                                    if (pgbrk == pageBreaks + 1)
                                    {
                                        dtEndRow = dt.Rows.Count - 1;
                                    }
                                    else
                                    {
                                        dtEndRow = Convert.ToInt32(m_htPagebrk[pgbrk].ToString());
                                    }
                                    int rowsInTab = dtEndRow - dtStRow + 1;//dt.Rows.Count;
                                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                    dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                                    myPdfTable.ImportDataTable(dt, 0, 0, dtStRow, dtEndRow);
                                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                    myPdfTable.SetColumnsWidth(Arraywidth);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htRightAlign.Count > 0)
                                    {
                                        if (pgbrk == pageBreaks + 1)
                                        {
                                            if (isSumExists)
                                            {
                                                myPdfTable.Rows[rowsInTab - 1].SetFont(SumRowFont);
                                                myPdfTable.Rows[rowsInTab - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                        {
                                            if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                            {
                                                if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                {
                                                    if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                                    {
                                                        myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //Setting Row font
                                    int pdftableRow = 0;
                                    for (int pdfRow = dtStRow; pdfRow <= dtEndRow; pdfRow++)
                                    {
                                        string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                        XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                        if (nodeRow != null)
                                        {
                                            if (nodeRow.Attributes["pFont"] != null)
                                            {
                                                if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowFontBold);
                                                }
                                            }
                                            if (nodeRow.Attributes["pBox"] != null)
                                            {
                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                {
                                                    myPdfTable.Rows[pdftableRow].SetFont(RowBoxFontBold);
                                                }
                                            }
                                        }
                                        if (trxID.ToUpper().Trim() == "SKIP")
                                        {
                                            myPdfTable.Rows[pdftableRow].SetForegroundColor(Color.White);
                                        }
                                        pdftableRow++;
                                    }
                                    if (pgbrk != 1)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    while (!myPdfTable.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        else
                                        {
                                            posY = currentYPos;// +25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                        }
                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                        //Printing Row boxes
                                        for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                        {
                                            string trxID = dt.Rows[index]["TrxID"].ToString();
                                            XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                            if (nodeRow != null)
                                            {
                                                if (nodeRow.Attributes["pBox"] != null)
                                                {
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                            pr.StrokeWidth = 1;
                                                            newPdfPage.Add(pr);
                                                        }
                                                    }
                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                                    {
                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                        {
                                                            if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                            {
                                                                PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                pr.StrokeWidth = 1;
                                                                newPdfPage.Add(pr);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Rows content
                                        newPdfPage.Add(newPdfTablePage);
                                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                    }
                                }
                            }
                        }
                        else
                        {
                            int rowsInTab = dt.Rows.Count;
                            PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                            dt = objclsrpt.WrapFullViewLength(dt, Arraywidth);
                            myPdfTable.ImportDataTable(dt, 0, 0, 0, rowsInTab);
                            myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                            myPdfTable.SetColumnsWidth(Arraywidth);
                            //Now we set some alignment... for the whole table and then, for a column:
                            myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                            //myPdfTable.HeadersRow.SetFont(HeaderFont);
                            myPdfTable.HeadersRow.SetFont(FontUnderline);
                            ////myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                            myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                            if (m_htRightAlign.Count > 0)
                            {
                                if (isSumExists)
                                {
                                    //Right justifying Summed row content
                                    myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                    myPdfTable.Rows[dt.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                }
                                //Right justifying Summed column content and IsNumeric column content
                                for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                {
                                    //if (myPdfTable.Rows[dt.Rows.Count - 1][pdfcol].Content.ToString() != string.Empty)
                                    if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                    {
                                        if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                        {
                                            if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                            {
                                                myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                            }
                                        }
                                    }
                                }
                            }
                            //Setting Row font
                            for (int pdfRow = 0; pdfRow < rowsInTab; pdfRow++)
                            {
                                string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                if (nodeRow != null)
                                {
                                    if (nodeRow.Attributes["pFont"] != null)
                                    {
                                        if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                        {
                                            myPdfTable.Rows[pdfRow].SetFont(RowFontBold);
                                        }
                                    }
                                    if (nodeRow.Attributes["pBox"] != null)
                                    {
                                        if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                        {
                                            myPdfTable.Rows[pdfRow].SetFont(RowBoxFontBold);
                                        }
                                    }
                                }
                                if (trxID.ToUpper().Trim() == "SKIP")
                                {
                                    myPdfTable.Rows[pdfRow].SetForegroundColor(Color.White);
                                }
                            }
                            while (!myPdfTable.AllTablePagesCreated)
                            {
                                //Setting the Y position and if required creating new page
                                if (currentYPos > myPdfDocument.PageHeight - 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                else
                                {
                                    posY = currentYPos;// +25;
                                }
                                if (myPdfDocument.PageHeight - 50 - posY < 50)
                                {
                                    posY = 70;
                                    currentYPos = 70;
                                    newPdfPage.SaveToDocument();
                                    //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                    newPdfPage = myPdfDocument.NewPage();
                                    newPdfPage.Add(myHeaderPdfTablePage);
                                    if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                    newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                }
                                PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                //Printing Row boxes
                                for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                {
                                    string trxID = dt.Rows[index]["TrxID"].ToString();
                                    XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                    if (nodeRow != null)
                                    {
                                        if (nodeRow.Attributes["pBox"] != null)
                                        {
                                            if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                            {
                                                int cellcnt = 0;
                                                foreach (PdfCell pcell in myPdfTable.Rows[index].Cells)
                                                {
                                                    cellcnt++;
                                                    if (pcell.Content.ToString() != string.Empty)
                                                    {
                                                        if (pcell.Content.ToString().Trim().ToUpper() != dt.Rows[index]["Description"].ToString().Trim().ToUpper())
                                                        {
                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt - 1).ToRectangle(Color.Black, 2, Color.White);
                                                            pr.StrokeWidth = 1;
                                                            newPdfPage.Add(pr);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //Adding Rows content
                                newPdfPage.Add(newPdfTablePage);
                                currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                            }
                        }
                        //Notes DT
                        if (NotesDT.Rows.Count > 0)
                        {
                            if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                            {
                                int rowsInNotesDT = NotesDT.Rows.Count;
                                int colsInNotesDT = NotesDT.Columns.Count;
                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                                myPdfTable1.ImportDataTable(NotesDT);
                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                while (!myPdfTable1.AllTablePagesCreated)
                                {
                                    //Setting the Y position and if required creating new page
                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    else
                                    {
                                        posY = currentYPos;// +25;
                                    }
                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                    {
                                        posY = 70;
                                        currentYPos = 70;
                                        newPdfPage.SaveToDocument();
                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                        newPdfPage = myPdfDocument.NewPage();
                                        newPdfPage.Add(myHeaderPdfTablePage);
                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                    }
                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY - 10));
                                    newPdfPage.Add(newPdfTablePage1);
                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                }
                            }
                        }
                        newPdfPage.SaveToDocument();
                    }
                }
                if (dataPrinted)
                {
                    // SaveToResponse("PDFReport");
                    if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                    else
                    {
                        HttpContext.Current.Response.ClearHeaders();
                        HttpContext.Current.Response.ClearContent();
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.Buffer = true;
                        HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                        HttpContext.Current.Response.ContentType = "application/pdf";
                        myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.Flush();
                        HttpContext.Current.Response.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion

        #region OldChecksExpToPDF
        public void OldChecksExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //
                string invoiceAmounts = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                PdfDocument myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                double posX = 20;
                double posY = 30;
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 30;
                    currentYPos = 30;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    //Removing the Rows if greater than 25 and adding a row with ...
                                    if (BranchDT.Rows.Count > 25)
                                    {
                                        for (int rwCnt = 26; rwCnt < BranchDT.Rows.Count; rwCnt++)
                                        {
                                            BranchDT.Rows.RemoveAt(rwCnt - 1);
                                            BranchDT.AcceptChanges();
                                        }
                                        // Adding last row with ...
                                        DataRow dLastRow = BranchDT.NewRow();
                                        for (int col = 0; col < BranchDT.Columns.Count; col++)
                                        {
                                            dLastRow[BranchDT.Columns[col].ColumnName] = "...";
                                        }
                                        BranchDT.Rows.InsertAt(dLastRow, BranchDT.Rows.Count);
                                        BranchDT.AcceptChanges();
                                    }
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                    invoiceAmounts = BranchDT.Rows[0][nodeBranchCol.Attributes["Caption"].Value].ToString();
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                        //Setting amount col width
                                        if (dBranchCol.ColumnName.ToString().Trim() == "Amount Entered")
                                        {
                                            amountColPos = dcPos;
                                            amountColWidth = BranchArraywidth[dcPos];
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    Font myHeaderFont = new Font("Verdana", 10, FontStyle.Underline);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = currentYPos + 25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                }
                            }
                        }
                    }
                    if (parentDT.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 350;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "Check Amount":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, amtColPosX + posX + 70, posY, 100, 50),
                                                                    ContentAlignment.MiddleLeft, "Check Total : " + parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "(Pay To) Name":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, posX, posY + 15, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "Vendor":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, posX + 200, posY + 15, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 300, posY + 15, 100, 50),
                                                                    ContentAlignment.MiddleLeft, dcol.ColumnName.Trim() + " : " + parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 350, posY + 45, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = (width - amountColWidth - 115) - (500);
                                            string star = " ";
                                            for (int strCnt = 0; strCnt < Convert.ToInt32(chkNoWidth / 4) - (parentDT.Rows[0][dcol].ToString().Length); strCnt++)
                                            {
                                                //star += "*";
                                            }
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 500, posY + 45, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                       Color.Black, new PdfArea(myPdfDocument, 500 + (parentDT.Rows[0][dcol].ToString().Length * 5), posY + 45, 100, 50),
                                                                       ContentAlignment.MiddleLeft, parentDT.Rows[0]["Check Number"].ToString());
                                            newPdfPage.Add(pta1);


                                        }
                                        break;
                                    }
                                case "Written Amount":
                                    {
                                        if (parentDT.Rows[0]["Check Amount"] != null)
                                        {
                                            //Converting the amount into decimal
                                            Decimal decimalNo = Convert.ToDecimal(parentDT.Rows[0]["Check Amount"]);
                                            long wholeNumber = Convert.ToInt64(decimalNo);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(decimalNo - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            //if (decimalPortion != 0)
                                            {
                                                decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            }
                                            //Converting the number into words
                                            //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                            string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 300, posY + 60, 500, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            if (parentDT.Rows[0]["(Pay To) Name"] != null)
                                            {
                                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX + 40, posY + 75, 150, 100),
                                                                        ContentAlignment.MiddleLeft, parentDT.Rows[0]["(Pay To) Name"].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 75;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX + 40, addPosY, 150, 100),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                                else
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                       Color.Black, new PdfArea(myPdfDocument, posX + 40, addPosY, 150, 100),
                                                                       ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                        //Printing the Check total in words if column is not being sent
                        if (!parentDT.Columns.Contains("Written Amount"))
                        {
                            if (parentDT.Columns.Contains("Check Amount"))
                            {
                                if (parentDT.Rows[0]["Check Amount"] != null)
                                {
                                    //Converting the amount into decimal
                                    Decimal decimalNo = Convert.ToDecimal(parentDT.Rows[0]["Check Amount"]);
                                    long wholeNumber = Convert.ToInt64(decimalNo);//Getting the whole no portion of the number
                                    double decimalPortion = Convert.ToDouble(decimalNo - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                    string decimalPart = string.Empty;
                                    //Formatting the decimal portion
                                    //if (decimalPortion != 0)
                                    {
                                        decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                    }
                                    //Converting the number into words
                                    //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                    string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                    PdfTextArea pta = new PdfTextArea(FontRegular,
                                                            Color.Black, new PdfArea(myPdfDocument, 300, posY + 60, 500, 100),
                                                            ContentAlignment.MiddleLeft, noInWords);
                                    newPdfPage.Add(pta);
                                }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldReport Style 101
        private void OldReportStyle101(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //
                string invoiceAmounts = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                PdfDocument myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                double posX = 20;
                double posY = 30;
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 20;
                    currentYPos = 20;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                if (BranchDT.Rows.Count > 1 && BranchDT.Columns.Count > 1)
                                {
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 2] = "Check  Total";
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1] = "$" + BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString();
                                }
                                if (BranchDT.Rows.Count > 0)
                                {
                                    //Removing the Rows if greater than 25 and adding a row with ...
                                    if (BranchDT.Rows.Count > 25)
                                    {
                                        for (int rwCnt = 26; rwCnt < BranchDT.Rows.Count; rwCnt++)
                                        {
                                            BranchDT.Rows.RemoveAt(rwCnt - 1);
                                            BranchDT.AcceptChanges();
                                        }
                                        // Adding last row with ...
                                        DataRow dLastRow = BranchDT.NewRow();
                                        for (int col = 0; col < BranchDT.Columns.Count; col++)
                                        {
                                            dLastRow[BranchDT.Columns[col].ColumnName] = "...";
                                        }
                                        BranchDT.Rows.InsertAt(dLastRow, BranchDT.Rows.Count);
                                        BranchDT.AcceptChanges();
                                    }
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];

                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                    invoiceAmounts = BranchDT.Rows[0][nodeBranchCol.Attributes["Caption"].Value].ToString();
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                        //Setting amount col width
                                        if (dBranchCol.ColumnName.ToString().Trim() == "Amount Entered")
                                        {
                                            amountColPos = dcPos;
                                            amountColWidth = BranchArraywidth[dcPos];
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = currentYPos + 25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable2.ImportDataTable(BranchDT);
                                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable2.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable2.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = 535 + 25;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage2);
                                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                }
                            }
                        }
                    }
                    if (parentDT.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        posY = posY - 150;
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 240, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 70, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe1);
                                            PdfTextArea ptaPayToDupe2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 600, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe2);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 240;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                       Color.Black, new PdfArea(myPdfDocument, width - 10, posY + 70, 100, 50),
                                                                       ContentAlignment.MiddleLeft, parentDT.Rows[0]["Check Number"].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea ptaChkDupe2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, width - 10, posY + 600, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0]["Check Number"].ToString());
                                            newPdfPage.Add(ptaChkDupe2);
                                        }
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, width - 104, posY + 175, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = (width - amountColWidth) - (500);
                                            string star = " ";
                                            for (int strCnt = 0; strCnt < Convert.ToInt32(chkNoWidth / 4) - (parentDT.Rows[0][dcol].ToString().Length); strCnt++)
                                            {
                                                star += "*";
                                            }
                                            star += parentDT.Rows[0][dcol.ColumnName.ToString()].ToString();
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, width - 50 + (parentDT.Rows[0][dcol].ToString().Length * 5) + 12, posY + 175, 100, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = parentDT.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = parentDT.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(parentDT.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            //Converting the number into words
                                            //string noInWords = ConvertNumberToWord(wholeNumber).Trim().ToUpper() + decimalPart + " DOLLARS";
                                            string noInWords = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper() + decimalPart + " DOLLARS"; 
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 575, posY + 170, 500, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldReport Style 102
        private void OldReportStyle102(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                string invoiceAmounts = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                PdfDocument myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                double posX = 20;
                double posY = 20;
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    PdfPage newPdfPage1 = myPdfDocument.NewPage();
                    posY = 24;
                    currentYPos = 20;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    decimal amount;
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                if (BranchDT.Rows.Count > 1 && BranchDT.Columns.Count > 1)
                                {
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 2] = "Check  Total";
                                    if (Decimal.TryParse(BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString(), out amount))
                                    {
                                        string amt = string.Format("{0:N}", amount);
                                        BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1] = amt;
                                    }
                                }
                                if (BranchDT.Rows.Count > 0)
                                {
                                    //Removing the Rows if greater than 25 and adding a row with ...
                                    if (BranchDT.Rows.Count > 25)
                                    {
                                        for (int rwCnt = 26; rwCnt < BranchDT.Rows.Count; rwCnt++)
                                        {
                                            BranchDT.Rows.RemoveAt(rwCnt - 1);
                                            BranchDT.AcceptChanges();
                                        }
                                        // Adding last row with ...
                                        DataRow dLastRow = BranchDT.NewRow();
                                        for (int col = 0; col < BranchDT.Columns.Count; col++)
                                        {
                                            dLastRow[BranchDT.Columns[col].ColumnName] = "...";
                                        }
                                        BranchDT.Rows.InsertAt(dLastRow, BranchDT.Rows.Count);
                                        BranchDT.AcceptChanges();
                                    }
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];

                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                    invoiceAmounts = BranchDT.Rows[0][nodeBranchCol.Attributes["Caption"].Value].ToString();
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                        //Setting amount col width
                                        if (dBranchCol.ColumnName.ToString().Trim() == "Amount Entered")
                                        {
                                            amountColPos = dcPos;
                                            amountColWidth = BranchArraywidth[dcPos];
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                    //myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            newPdfPage1.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage1 = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            posY = 20;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage1 = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        newPdfPage1.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;

                                        //For UndeLine
                                        Point pStart = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 595), Convert.ToInt32(posY + 17));
                                        Point pEnd = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 17));
                                        PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage1.Add(pdfLineBrk);
                                        //
                                    }
                                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable2.ImportDataTable(BranchDT);
                                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                                    //myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable2.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable2.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 36;
                                            currentYPos = 36;
                                            newPdfPage.SaveToDocument();
                                            newPdfPage1.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage1 = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = 540;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 36;
                                            currentYPos = 36;
                                            newPdfPage.SaveToDocument();
                                            newPdfPage1.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage1 = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage2);
                                        newPdfPage1.Add(newPdfTablePage2);
                                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;

                                        //For UndeLine
                                        Point pStart = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 595), Convert.ToInt32(posY + 26));
                                        Point pEnd = new Point(Convert.ToInt32(myPdfDocument.PageWidth - 30), Convert.ToInt32(posY + 26));
                                        PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                                        newPdfPage.Add(pdfLineBrk);
                                        newPdfPage1.Add(pdfLineBrk);
                                    }
                                }
                            }
                        }
                    }
                    if (parentDT.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 374;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            newPdfPage1.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                            newPdfPage1 = myPdfDocument.NewPage();
                        }
                        posY = 374;
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, 380, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);


                                            //To display (Pay To) along with check number added on 271009
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                  Color.Black, new PdfArea(myPdfDocument, posX, 195, 200, 50),
                                                                       ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);

                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                              Color.Black, new PdfArea(myPdfDocument, posX, 740, 200, 50),
                                                              ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                            newPdfPage1.Add(pta2);


                                        }
                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        //To display (Pay To Info ) along with check number added on 271009

                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            //old code
                                            //PdfTextArea pta1 = new PdfTextArea(FontBold,
                                            //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, 195, 500, 50),
                                            //                            ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());

                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX + 300, 195, 200, 50),
                                                                        ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());

                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                            //old code
                                            //PdfTextArea pta2 = new PdfTextArea(FontBold,
                                            //                       Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, 740, 500, 50),
                                            //                       ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());

                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX + 300, 740, 200, 50),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());

                                            newPdfPage.Add(pta2);
                                            newPdfPage1.Add(pta2);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 380;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                    newPdfPage1.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 195, 200, 50),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        newPdfPage1.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 60, 740, 200, 50),
                                                               ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        newPdfPage1.Add(pta2);
                                        //Check number to display before amount in words added on 28/10/09

                                        PdfTextArea pta3 = new PdfTextArea(FontRegular,
                                                         Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 340, 260.03, 200, 80),
                                                         ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());

                                        newPdfPage.Add(pta3);
                                        newPdfPage1.Add(pta3);


                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 402, 351, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (parentDT.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(parentDT.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 540, 351, 100, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            newPdfPage1.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = parentDT.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = parentDT.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(parentDT.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart;
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < 36; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            //old values myPdfDocument, myPdfDocument.PageWidth - 580, 309, 600, 100
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, 306, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                            newPdfPage1.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                    }
                    newPdfPage.SaveToDocument();
                    newPdfPage1.SaveToDocument();
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldReport Style 103
        private void OldReportStyle103(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //
                string invoiceAmounts = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                PdfDocument myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                double posX = 20;
                double posY = 39;//Added 1/8th inch to ycoord by Danny on 23/09/09
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 20 + 12;
                    currentYPos = 20;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    decimal amount;
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                if (BranchDT.Rows.Count > 1 && BranchDT.Columns.Count > 1)
                                {
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 2] = "Check  Amount";
                                    if (Decimal.TryParse(BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString(), out amount))
                                    {
                                        string amt = string.Format("{0:N}", amount);
                                        BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1] = amt;
                                    }
                                }
                                if (BranchDT.Rows.Count > 0)
                                {
                                    //Removing the Rows if greater than 25 and adding a row with ...
                                    if (BranchDT.Rows.Count > 25)
                                    {
                                        for (int rwCnt = 26; rwCnt < BranchDT.Rows.Count; rwCnt++)
                                        {
                                            BranchDT.Rows.RemoveAt(rwCnt - 1);
                                            BranchDT.AcceptChanges();
                                        }
                                        // Adding last row with ...
                                        DataRow dLastRow = BranchDT.NewRow();
                                        for (int col = 0; col < BranchDT.Columns.Count; col++)
                                        {
                                            dLastRow[BranchDT.Columns[col].ColumnName] = "...";
                                        }
                                        BranchDT.Rows.InsertAt(dLastRow, BranchDT.Rows.Count);
                                        BranchDT.AcceptChanges();
                                    }
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];

                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                    invoiceAmounts = BranchDT.Rows[0][nodeBranchCol.Attributes["Caption"].Value].ToString();
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                        //Setting amount col width
                                        if (dBranchCol.ColumnName.ToString().Trim() == "Amount Entered")
                                        {
                                            amountColPos = dcPos;
                                            amountColWidth = BranchArraywidth[dcPos];
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    //PdfTextArea pta1 = new PdfTextArea(FontBold,
                                    //                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 500, 100),
                                    //                               ContentAlignment.MiddleLeft, BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString());
                                    //newPdfPage.Add(pta1);
                                    //PdfTextArea pta2 = new PdfTextArea(FontBold,
                                    //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 490, 100),
                                    //                            ContentAlignment.MiddleLeft, BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString());
                                    //newPdfPage.Add(pta2);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                            {
                                                currentYPos = 290;
                                            }
                                            posY = 305;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable2.ImportDataTable(BranchDT);
                                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable2.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable2.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = 555;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage2);
                                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                }
                            }
                        }
                    }
                    if (parentDT.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        posY = 23;
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            string m_PayOrder = string.Empty;
                                            m_PayOrder = parentDT.Rows[0][dcol].ToString();
                                            PdfTextArea ptaPayTo = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 505, posY + 37, 200, 50),
                                                                    ContentAlignment.MiddleLeft, m_PayOrder);
                                            newPdfPage.Add(ptaPayTo);
                                            PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 95, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 236, 200, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe1);
                                            PdfTextArea ptaPayToDupe3 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 498, 200, 50),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(ptaPayToDupe3);
                                        }
                                        break;
                                    }
                                case "Sent To:":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 95;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 500, 100),
                                                             ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 490, 100),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 90, posY + 3, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 236, 100, 50),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 498, 100, 50),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);

                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (parentDT.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(parentDT.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                //Color.Black, new PdfArea(myPdfDocument, width - 68 + (parentDT.Rows[0][dcol].ToString().Length * 5) + 12, posY + 43, 20, 50),
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 110, posY + 36, 20, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            //Converting the amount into decimal
                                            int deciNo = parentDT.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = parentDT.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(parentDT.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart;
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < strLength; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            string noInWords = decimalNo + str;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 580, posY + 38, 600, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }

                    }
                    newPdfPage.SaveToDocument();
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldReport Style 104
        private void OldReportStyle104(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                Hashtable m_htRightAlign = new Hashtable();
                //
                string invoiceAmounts = string.Empty;
                //Storing the fullview length of cols in hashtable                    
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                //Get the treeNodeName
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                //Getting the columns to be displayed in grid
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                //Storing the columns names and captions in the HashTable
                foreach (XmlNode node in nodeColumns)
                {
                    //Checking for IsSummed attribute value
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                //Removing the Summed row from parent table
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                PdfDocument myPdfDocument = new PdfDocument(PdfDocumentFormat.Letter_8_5x11);
                double posX = 20;
                double posY = 39;//Added 1/8th inch to ycoord by Danny on 23/09/09
                double width = myPdfDocument.PageWidth - 50;
                double height = myPdfDocument.PageHeight - 50;
                double currentYPos = 30;
                Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 8, FontStyle.Regular);
                Font FontBold = new Font("Verdana", 8, FontStyle.Bold);
                int amountColPos = 0;
                double amtColPosX = 0;
                double amountColWidth = 0;
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 20 + 12;
                    currentYPos = 20;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    decimal amount;
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                if (BranchDT.Rows.Count > 1 && BranchDT.Columns.Count > 1)
                                {
                                    BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 2] = "Check  Amount";
                                    if (Decimal.TryParse(BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString(), out amount))
                                    {
                                        string amt = string.Format("{0:N}", amount);
                                        BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1] = amt;
                                    }
                                }
                                if (BranchDT.Rows.Count > 0)
                                {
                                    //Removing the Rows if greater than 25 and adding a row with ...
                                    if (BranchDT.Rows.Count > 25)
                                    {
                                        for (int rwCnt = 26; rwCnt < BranchDT.Rows.Count; rwCnt++)
                                        {
                                            BranchDT.Rows.RemoveAt(rwCnt - 1);
                                            BranchDT.AcceptChanges();
                                        }
                                        // Adding last row with ...
                                        DataRow dLastRow = BranchDT.NewRow();
                                        for (int col = 0; col < BranchDT.Columns.Count; col++)
                                        {
                                            dLastRow[BranchDT.Columns[col].ColumnName] = "...";
                                        }
                                        BranchDT.Rows.InsertAt(dLastRow, BranchDT.Rows.Count);
                                        BranchDT.AcceptChanges();
                                    }
                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                    Font SumRowFont = new Font("Verdana", 8, FontStyle.Bold);
                                    bool sumExists = false;
                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                    int colsInBranchDT = BranchDT.Columns.Count;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    int[] BranchArraywidth = new int[colsInBranchDT];

                                    //Storing the columns names and captions in the HashTable
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            //Getting the cols having Issummed=1 
                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                {
                                                    if (!sumExists)
                                                        sumExists = true;
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                }
                                            }
                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                {
                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                    invoiceAmounts = BranchDT.Rows[0][nodeBranchCol.Attributes["Caption"].Value].ToString();
                                                }
                                            }
                                        }
                                        //Setting the column width of branch table
                                        int dcPos = dBranchCol.Ordinal;
                                        int colFVL = 0;
                                        if (nodeBranchCol != null)
                                        {
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                        }
                                        if (colFVL != 0)
                                        {
                                            BranchArraywidth[dcPos] = colFVL;
                                        }
                                        else
                                        {
                                            BranchArraywidth[dcPos] = 15;
                                        }
                                        //Setting amount col width
                                        if (dBranchCol.ColumnName.ToString().Trim() == "Amount Entered")
                                        {
                                            amountColPos = dcPos;
                                            amountColWidth = BranchArraywidth[dcPos];
                                        }
                                    }
                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable1.ImportDataTable(BranchDT);
                                    myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                    //PdfTextArea pta1 = new PdfTextArea(FontBold,
                                    //                               Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 500, 100),
                                    //                               ContentAlignment.MiddleLeft, BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString());
                                    //newPdfPage.Add(pta1);
                                    //PdfTextArea pta2 = new PdfTextArea(FontBold,
                                    //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 490, 100),
                                    //                            ContentAlignment.MiddleLeft, BranchDT.Rows[BranchDT.Rows.Count - 1][BranchDT.Columns.Count - 1].ToString());
                                    //newPdfPage.Add(pta2);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable1.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                            {
                                                currentYPos = 290;
                                            }
                                            posY = 305;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 290;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height));
                                        newPdfPage.Add(newPdfTablePage1);
                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage1.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                    PdfTable myPdfTable2 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                    myPdfTable2.ImportDataTable(BranchDT);
                                    myPdfTable2.HeadersRow.SetFont(HeaderFont);
                                    myPdfTable2.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                    myPdfTable2.SetColumnsWidth(BranchArraywidth);
                                    myPdfTable2.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable2.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (m_htBranchRightAlign.Count > 0)
                                    {
                                        if (sumExists)
                                        {
                                            //Right justifying Summed row content
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                            myPdfTable2.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                        }
                                        //Right justifying Summed column content and IsNumeric column content
                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                        {
                                            if (myPdfTable2.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                            {
                                                if (m_htBranchRightAlign.Contains(myPdfTable2.HeadersRow[pdfcol].Content.ToString()))
                                                {
                                                    myPdfTable2.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    myPdfTable2.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable2.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = 555;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 30;
                                            currentYPos = 30;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        PdfTablePage newPdfTablePage2 = myPdfTable2.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                        newPdfPage.Add(newPdfTablePage2);
                                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                        amtColPosX = newPdfTablePage2.CellArea(0, amountColPos).TopLeftVertex.X;
                                    }
                                }
                            }
                        }
                    }
                    if (parentDT.Rows.Count > 0)
                    {
                        //Setting the Y position and if required creating new page
                        if (currentYPos > myPdfDocument.PageHeight - 50)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        else
                        {
                            if (posY != currentYPos)
                                posY = 300;// currentYPos + 150;
                        }
                        if (myPdfDocument.PageHeight - posY < 150)
                        {
                            posY = 30;
                            currentYPos = 30;
                            newPdfPage.SaveToDocument();
                            //Adding new page and adding Header table,logo image and pageNo
                            newPdfPage = myPdfDocument.NewPage();
                        }
                        posY = 23;
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            switch (dcol.ColumnName.Trim())
                            {
                                case "(Pay To) Name":
                                    {

                                        //To display (Pay To) along with check number added on 271009
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, posX, posY + 428, 500, 100),
                                                             ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX, posY + 700, 490, 100),
                                                                        ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                        }




                                        //if (parentDT.Rows[0][dcol] != null)
                                        //{
                                        //    string m_PayOrder = string.Empty;
                                        //    m_PayOrder = parentDT.Rows[0][dcol].ToString();
                                        //    PdfTextArea ptaPayTo = new PdfTextArea(FontRegular,
                                        //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 505, posY + 37, 200, 50),
                                        //                            ContentAlignment.MiddleLeft, m_PayOrder);
                                        //    newPdfPage.Add(ptaPayTo);
                                        //    PdfTextArea pta = new PdfTextArea(FontRegular,
                                        //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 95, 200, 50),
                                        //                            ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        //    newPdfPage.Add(pta);
                                        //    PdfTextArea ptaPayToDupe1 = new PdfTextArea(FontBold,
                                        //                            Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 236, 200, 50),
                                        //                            ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        //    newPdfPage.Add(ptaPayToDupe1);
                                        //    PdfTextArea ptaPayToDupe3 = new PdfTextArea(FontBold,
                                        //                           Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 542, posY + 498, 200, 50),
                                        //                           ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        //    newPdfPage.Add(ptaPayToDupe3);
                                        //}





                                        break;
                                    }
                                case "PayToInfo":
                                    {
                                        //To display PayToInfo along with check number added on 271009
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, posX + 300, posY + 428, 500, 100),
                                                                        ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta1);
                                            PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                   Color.Black, new PdfArea(myPdfDocument, posX + 300, posY + 700, 490, 100),
                                                                   ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta2);
                                        }
                                        break;
                                    }

                                case "Sent To:":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = 148.5;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                if (strarr[arrLgh].ToString() != string.Empty)
                                                {
                                                    PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, 90, addPosY, 200, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                    newPdfPage.Add(pta1);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Check Number":
                                    {
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                             Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 428, 500, 100),
                                                             ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        PdfTextArea pta2 = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 75, posY + 700, 490, 100),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta2);
                                        break;
                                    }
                                case "Check Date":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {

                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                    Color.Black, new PdfArea(myPdfDocument, 378, 126, 100, 50),
                                                                    ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            newPdfPage.Add(pta);
                                            //PdfTextArea pta1 = new PdfTextArea(FontBold,
                                            //                       Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 236, 100, 50),
                                            //                       ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            //newPdfPage.Add(pta1);
                                            //PdfTextArea pta2 = new PdfTextArea(FontBold,
                                            //                       Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 150, posY + 498, 100, 50),
                                            //                       ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                            //newPdfPage.Add(pta2);

                                        }
                                        break;
                                    }
                                case "Check Amount":
                                    {
                                        if (parentDT.Rows[0][dcol] != null)
                                        {
                                            double chkNoWidth = 60;
                                            string star = " ";
                                            string m_FormatValue = string.Empty;
                                            int starLen = Convert.ToInt32(chkNoWidth / 4) - (parentDT.Rows[0][dcol].ToString().Length);
                                            for (int strCnt = 0; strCnt < 4; strCnt++)
                                            {
                                                star += "*";
                                            }
                                            if (Decimal.TryParse(parentDT.Rows[0][dcol.ColumnName.ToString()].ToString(), out amount))
                                            {
                                                string amt = string.Format("{0:N}", amount);
                                                m_FormatValue = amt;
                                            }
                                            star += m_FormatValue;
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                //Color.Black, new PdfArea(myPdfDocument, width - 68 + (parentDT.Rows[0][dcol].ToString().Length * 5) + 12, posY + 43, 20, 50),
                                                                    Color.Black, new PdfArea(myPdfDocument, 504, 126, 20, 50),
                                                                    ContentAlignment.MiddleLeft, star);
                                            newPdfPage.Add(pta);
                                            //Check Amount in Words
                                            //Converting the amount into decimal
                                            int deciNo = parentDT.Rows[0][dcol.ColumnName.ToString()].ToString().IndexOf(".");
                                            string numb = string.Empty;
                                            if (deciNo > 0)
                                            {
                                                numb = parentDT.Rows[0][dcol.ColumnName].ToString().Substring(0, deciNo);
                                            }
                                            long wholeNumber = Convert.ToInt32(numb);//Getting the whole no portion of the number
                                            double decimalPortion = Convert.ToDouble(Convert.ToDecimal(parentDT.Rows[0][dcol.ColumnName].ToString()) - Convert.ToDecimal(wholeNumber));//getting the decimal portion of the number
                                            string decimalPart = string.Empty;
                                            //Formatting the decimal portion
                                            decimalPart = " AND " + decimalPortion.ToString().Trim() + "/100";
                                            string str = string.Empty;
                                            //string strWholeNo = ConvertNumberToWord(wholeNumber).Trim().ToUpper();
                                            string strWholeNo = commonObjUI.SpellDecimal(Convert.ToDecimal(wholeNumber)).Trim().ToUpper();
                                            string decimalNo = strWholeNo + decimalPart;
                                            int strLength = (500 - ((decimalNo.Length) * 4)) / 4 - 10;
                                            for (int i = 0; i < strLength; i++)
                                            {
                                                str += "*";
                                            }
                                            //Converting the number into words
                                            //string noInWords = decimalNo + str;
                                            string noInWords = decimalNo;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                    Color.Black, new PdfArea(myPdfDocument, 90, 100, 500, 100),
                                                                    ContentAlignment.MiddleLeft, noInWords);
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }

                    }
                    newPdfPage.SaveToDocument();
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                //throw ex;
            }
        }
        #endregion

        #region OldARInvoiceExpToPDF
        public void OldARInvoiceExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                bool pLogo = false;
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                dt = ChangeDateAndAmountFormats1(dt, strOutXml, treeNodeName);
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                foreach (XmlNode node in nodeColumns)
                {
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                //
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                //
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 9, FontStyle.Regular);
                Font FontSmall = new Font("Verdana", 7, FontStyle.Regular);
                //
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 70;
                    currentYPos = 70;
                    bool overnightStatus = false;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    double footerWidth = 0;
                    //Printing Parent DT                   
                    if (parentDT.Rows.Count > 0)
                    {
                        #region Columns
                        #region Print Logo
                        if (parentDT.Columns.Contains("Print Logo"))
                        {
                            pLogo = true;
                            PdfImage LogoImage = null;
                            if (parentDT.Rows[0]["Print Logo"].ToString() == "1")
                            {
                                string appDir = System.AppDomain.CurrentDomain.BaseDirectory;
                                string imgpath = string.Empty;

                                //SET cdn image path
                                //HttpApplication ctx = (HttpApplication)HttpContext.Current.ApplicationInstance;
                                //string m_strImagesCDNPath = (String)ctx.Application["ImagesCDNPath"];
                                string m_strImagesCDNPath = ConfigurationManager.AppSettings["ImagesPath"].ToString() + "/" + HttpContext.Current.Session["MyTheme"] + "/";  //(String)ctx.Application["ImagesCDNPath"];

                                XmlNode xImgSrc = xDoc.SelectSingleNode("//" + treeNodeName + "/RowList/Rows");
                                if (xImgSrc != null)
                                {
                                    XmlAttribute ximgAttr = xImgSrc.Attributes["ImgSrc"];
                                    if (ximgAttr != null)
                                    {
                                        imgpath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/" + ximgAttr.InnerText.ToString();
                                        //imgpath = appDir + "App_Themes\\" + HttpContext.Current.Session["MyTheme"].ToString() + "\\Images\\" + ximgAttr.InnerText;
                                        if ((!ximgAttr.InnerText.ToString().ToUpper().Contains("JPG")) && (!ximgAttr.InnerText.ToString().ToUpper().Contains("JPEG")))
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                        }
                                        if (File.Exists(imgpath))
                                        {
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 510, 35, 100);
                                        }
                                        else
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 510, 35, 100);
                                        }
                                    }
                                    else
                                    {
                                        XmlDocument xDocUserInfo = new XmlDocument();
                                        XDocUserInfo = commonObjUI.loadXmlFile(Convert.ToString(HttpContext.Current.Session["USERINFOXML"]));
                                        XmlNode m_CompanyWhiteNode = XDocUserInfo.SelectSingleNode("Root/bpe/companyinfo/WhiteReportLogo");
                                        string m_PhysicalImgPath = string.Empty;
                                        if (m_CompanyWhiteNode != null)
                                        {
                                            imgpath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/" + m_CompanyWhiteNode.InnerXml.ToString();
                                            if (File.Exists(imgpath))
                                            {
                                                LogoImage = myPdfDocument.NewImage(imgpath);
                                                newPdfPage.Add(LogoImage, width - 510, 35, 100);
                                            }
                                            else
                                            {
                                                imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                                LogoImage = myPdfDocument.NewImage(imgpath);
                                                newPdfPage.Add(LogoImage, width - 510, 35, 100);
                                            }
                                        }
                                        else
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 510, 35, 100);
                                        }
                                    }
                                }
                            }
                            posY = LogoImage.Height + 4;
                        }
                        #endregion
                        #region Caption/Address
                        if (parentDT.Columns.Contains("Caption/Address"))
                        {
                            string[] strarr = parentDT.Rows[0]["Caption/Address"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                addPosY += 10;
                                PdfTextArea pta = new PdfTextArea(FontSmall,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 350, 50),
                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                newPdfPage.Add(pta);
                            }
                            if (strarr.Length < 4)
                            {
                                //allocate 4 lines space...
                                posY = 109;
                            }
                            else
                            {
                                posY = addPosY;
                            }
                        }
                        #endregion
                        #region Invoice Date
                        if (parentDT.Columns.Contains("Invoice Date"))
                        {
                            string[] dateArr = parentDT.Rows[0]["Invoice Date"].ToString().Split('/');
                            int month = 0;
                            int day = 0;
                            int year = 0;
                            month = Convert.ToInt32(dateArr[0].ToString());
                            day = Convert.ToInt32(dateArr[1].ToString());
                            year = Convert.ToInt32(dateArr[2].ToString());
                            DateTime dtnow = new DateTime(year, month, day);
                            string fordate = dtnow.ToString("MMMM dd, yyyy");
                            PdfTextArea pta = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 15, 200, 50),
                                                    ContentAlignment.MiddleLeft, fordate);
                            newPdfPage.Add(pta);
                            //posY = posY + 24;
                            posY = posY + 15;
                        }
                        if (parentDT.Columns.Contains("Customer"))
                        {
                            string[] strarr = parentDT.Rows[0]["Customer"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                addPosY += 10;
                                PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 50),
                                                    ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                newPdfPage.Add(pta1);
                            }
                            //posY = addPosY + 24;
                            posY = addPosY + 12;
                        }
                        #endregion
                        #region Address
                        if (parentDT.Columns.Contains("Address"))
                        {
                            string[] strarr = parentDT.Rows[0]["Address"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                addPosY += 10;
                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 50),
                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                newPdfPage.Add(pta);
                            }
                            //posY = addPosY + 15;
                            posY = addPosY + 10;
                        }
                        #endregion
                        #endregion
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            posY = 70;
                            if (dcol.ColumnName.Trim().ToUpper().ToString() == "PRINT LOGO")
                            {
                                pLogo = true;
                            }
                            if (dcol.ColumnName.Trim().ToUpper().ToString() == "OVERNIGHT MESSAGE")
                            {
                                overnightStatus = true;
                            }
                            switch (dcol.ColumnName.Trim())
                            {
                                case "Agency No:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 90, posY + 40, 200, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 30, posY + 40, 200, 50),
                                                                ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Agency PO#:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 90, posY + 50, 200, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 30, posY + 50, 200, 50),
                                                                ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Attention":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 70;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (arrLgh == 0)
                                            {    //510
                                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 410, addPosY, 300, 50),
                                                                            ContentAlignment.MiddleLeft, "Attn :     " + strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                            else
                                            {  //475
                                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                               Color.Black, new PdfArea(myPdfDocument, width - 376, addPosY, 300, 50),
                                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                        }
                                        break;
                                    }
                                case "Invoice#":
                                case "Invoice #":
                                    {

                                        /*posY = 70;

                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                            Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 113, 200, 50),
                                                            ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " : ");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 465, posY + 113, 200, 50),
                                                               ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);*/

                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                              Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 125, 200, 50),
                                                              ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " : ");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 465, posY + 125, 200, 50),
                                                               ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);

                                        break;
                                    }
                                case "Client:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 145, 300, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " " + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        break;
                                    }
                                case "Our Job#":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 155, 300, 50),
                                                               ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":  " + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        break;
                                    }
                                case "For Production Of:":
                                    {
                                        if (parentDT.Rows[0][dcol].ToString() != null)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                      Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 190, 500, 50),
                                                                      ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString());
                                            newPdfPage.Add(pta);
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 200;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 10;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 100, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                        break;
                                    }
                                case "Length":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 200;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, width - 360, addPosY, 100, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                case "Description":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 260;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            if (strarr[arrLgh] != string.Empty)
                                            {
                                                addPosY += 10;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY - 30, 500, 100),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                        break;
                                    }
                                case "Terms:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                         Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 420, 500, 50),
                                                                         ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                         Color.Black, new PdfArea(myPdfDocument, width - 470, posY + 420, 500, 50),
                                                                         ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Overnight Message":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 450, 500, 50),
                                                                        ContentAlignment.MiddleLeft, "Overnight To:");
                                        newPdfPage.Add(pta);
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 460;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 350, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        footerWidth = addPosY;
                                        break;
                                    }
                                case "Wiring Instructions":
                                    {
                                        if ((bool)overnightStatus)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                                Color.Black, new PdfArea(myPdfDocument, width - 100, posY + 450, 500, 50),
                                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":");
                                            newPdfPage.Add(pta);
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 460;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 15;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 100, addPosY, 135, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                            if (parentDT.Columns.Contains("Overnight Message"))
                                            {
                                                if (parentDT.Rows[0]["Overnight Message"].ToString() != null && parentDT.Rows[0]["Wiring Instructions"].ToString() != null)
                                                {
                                                    PdfTextArea pta2 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 240, posY + 450, 500, 50),
                                                                                        ContentAlignment.MiddleLeft, "OR");
                                                    newPdfPage.Add(pta2);
                                                }
                                            }
                                            footerWidth = addPosY;
                                        }
                                        else
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                               Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 450, 300, 50),
                                                                               ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":");
                                            newPdfPage.Add(pta);
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 460;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 15;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                            if (parentDT.Columns.Contains("Overnight Message"))
                                            {
                                                if (parentDT.Rows[0]["Overnight Message"].ToString() != null && parentDT.Rows[0]["Wiring Instructions"].ToString() != null)
                                                {
                                                    PdfTextArea pta2 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 240, posY + 450, 500, 50),
                                                                                        ContentAlignment.MiddleLeft, "OR");
                                                    newPdfPage.Add(pta2);
                                                }
                                            }
                                            footerWidth = addPosY;
                                        }
                                        break;
                                    }
                                case "Footer":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY;
                                        if (footerWidth != 0)
                                        {
                                            addPosY = posY + footerWidth;
                                        }
                                        else
                                        {
                                            addPosY = posY + 530;
                                        }
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (arrLgh == 0)
                                            {
                                                PdfTextArea ptafooter = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 500, 50),
                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(ptafooter);
                                            }
                                            else
                                            {
                                                PdfTextArea ptafooter = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 50),
                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(ptafooter);
                                            }
                                        }
                                        break;
                                    }
                                case "Total Due":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontBold, Color.Black, new PdfArea(myPdfDocument, width - 150, posY + 330, 100, 50),
                                                                                                         ContentAlignment.MiddleCenter, dcol.ColumnName.Trim().ToString() + ":");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 80, posY + 330, 100, 50),
                                                                                                           ContentAlignment.MiddleCenter, "$" + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Invoice Instructions":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 340;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 100, 50),
                                                                                                                ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                    }
                    //Printing Line Break
                    Point pStart = new Point(30, Convert.ToInt32(posY + 185));
                    Point pEnd = new Point(Convert.ToInt32(width + 35), Convert.ToInt32(posY + 185));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    currentYPos = posY + 200;
                    //Printing PLogo
                    if ((bool)pLogo == false)
                    {
                        string imgpath = PDFImagePath();
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            PdfImage LogoImage = myPdfDocument.NewImage(imgpath);
                            newPdfPage.Add(LogoImage, width - 510, 40, 100);
                        }
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                BranchDT = objclsrpt.GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                if (BranchDT.Rows.Count > 0)
                                {
                                    bool sumExists = false;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            if (!sumExists)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"] != null)
                                                {
                                                    if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                    {
                                                        sumExists = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //Removing the Summed row from branch table
                                    if (sumExists)
                                    {
                                        BranchDT.Rows.RemoveAt(BranchDT.Rows.Count - 1);
                                    }
                                    foreach (DataRow dBranchRow in BranchDT.Rows)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            if (posY != currentYPos)
                                                posY = currentYPos + 20;
                                        }
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;
                                            currentYPos = 70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        foreach (DataColumn dcol in BranchDT.Columns)
                                        {
                                            switch (dcol.ColumnName.Trim())
                                            {
                                                case "Description":
                                                    {
                                                        if (BranchDT.Rows[0][dcol].ToString().Length > 0)
                                                        {
                                                            if (BranchDT.Rows[0][dcol].ToString().Length > 40)
                                                            {
                                                                if (BranchDT.Rows[0][dcol].ToString().Contains("~"))
                                                                {
                                                                    string[] strarr = BranchDT.Rows[0][dcol].ToString().Split('~');
                                                                    double addPosY = posY + 60;
                                                                    for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                                                    {
                                                                        if (strarr[arrLgh].ToString() != "")
                                                                        {
                                                                            if (strarr[arrLgh].ToString().Contains("\n"))
                                                                            {
                                                                                strarr[arrLgh] = strarr[arrLgh].Replace("\n", "");
                                                                            }
                                                                            if (strarr[arrLgh].ToString().Contains("\t"))
                                                                            {
                                                                                strarr[arrLgh] = strarr[arrLgh].Replace("\t", "");
                                                                            }
                                                                            addPosY += 10;
                                                                            PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 200, 50),
                                                                                                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                            newPdfPage.Add(pta1);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    string TotString = string.Empty;
                                                                    TotString = BranchDT.Rows[0][dcol].ToString();
                                                                    double i = Convert.ToDouble(BranchDT.Rows[0][dcol].ToString().Length);
                                                                    double j = Convert.ToDouble(40);
                                                                    double k = Math.Ceiling(i / j);
                                                                    string[] strarr = new string[Convert.ToInt32(k)];
                                                                    for (int ct = 0; ct < Convert.ToInt32(k); ct++)
                                                                    {
                                                                        int cnt;
                                                                        cnt = Convert.ToInt32(i) - (ct * 40);
                                                                        if (cnt < Convert.ToInt32(j))
                                                                        {
                                                                            strarr[ct] = TotString.Substring(0, cnt);
                                                                        }
                                                                        else
                                                                        {
                                                                            strarr[ct] = TotString.Substring(0, Convert.ToInt32(j));
                                                                            TotString = TotString.Remove(0, Convert.ToInt32(j));
                                                                        }
                                                                    }
                                                                    double addPosY = posY + 60;
                                                                    for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                                                    {
                                                                        addPosY += 10;
                                                                        if (arrLgh == 0)
                                                                        {
                                                                            PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 55),
                                                                                                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                            newPdfPage.Add(pta1);
                                                                        }
                                                                        else
                                                                        {
                                                                            PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 300, 55),
                                                                                                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                            newPdfPage.Add(pta1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                string[] strarr = BranchDT.Rows[0][dcol].ToString().Split('~');
                                                                double addPosY = posY + 60;
                                                                for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                                                {
                                                                    addPosY += 10;
                                                                    if (arrLgh == 0)
                                                                    {
                                                                        PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 510, addPosY, 200, 50),
                                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                        newPdfPage.Add(pta1);
                                                                    }
                                                                    else
                                                                    {
                                                                        PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 475, addPosY, 200, 50),
                                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                                        newPdfPage.Add(pta1);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        break;
                                                    }
                                                case "Invoice Instructions":
                                                    {
                                                        break;
                                                    }
                                                case "Invoice Amount":
                                                    {
                                                        PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 130, posY + 70, 200, 50),
                                                                                                                           ContentAlignment.MiddleCenter, "$" + BranchDT.Rows[0][dcol].ToString());
                                                        newPdfPage.Add(pta1);
                                                        break;
                                                    }
                                                default:
                                                    {
                                                        break;
                                                    }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //Printing Parent Invoice Amount
                    if (parentDT.Columns.Contains("Invoice Amount"))
                    {
                        PdfTextArea ptainvoice = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, posX + 600, posY + 90, 100, 50),
                                                                                                     ContentAlignment.MiddleLeft, "$" + parentDT.Rows[0]["Invoice Amount"].ToString());
                        newPdfPage.Add(ptainvoice);
                    }
                    newPdfPage.SaveToDocument();
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {

            }
        }
        #endregion


        #region ARInvoice201ExpToPDF
        /// <summary>
        /// This report is similiar to report style200
        /// </summary>
        public void ARInvoice201ExpToPDF(DataTable dt, string fileName, DataTable NotesDT, string rptPrintNotes, string strOutXml, string tableLayout)
        {
            try
            {
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(strOutXml);
                bool pLogo = false;
                string treeNodeName = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Node").InnerText;
                dt = ChangeDateAndAmountFormats1(dt, strOutXml, treeNodeName);
                XmlNode nodeColumns = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                bool isSumExists = false;
                foreach (XmlNode node in nodeColumns)
                {
                    if (!isSumExists)
                    {
                        if (node.Attributes["IsSummed"] != null)
                        {
                            if (node.Attributes["IsSummed"].Value == "1")
                            {
                                isSumExists = true;
                            }
                        }
                    }
                }
                if (isSumExists)
                {
                    dt.Rows.RemoveAt(dt.Rows.Count - 1);
                }
                //Creating Data table containing the column names
                DataTable parentDT = new DataTable();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    DataColumn colNames = new DataColumn();
                    colNames.ColumnName = dt.Columns[col].ColumnName;
                    colNames.DataType = dt.Columns[col].DataType;
                    parentDT.Columns.Add(colNames);
                }
                //
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                double posX = 20;//50
                double posY = 70;//90
                double width = myPdfDocument.PageWidth - 50;// 690; 
                double height = myPdfDocument.PageHeight - 50;// 250;
                double currentYPos = 70;
                //
                Font FontBold = new Font("Verdana", 9, FontStyle.Bold);
                Font FontRegular = new Font("Verdana", 9, FontStyle.Regular);
                Font FontUnderLine = new Font("Verdana", 9, FontStyle.Underline);
                Font FontSmall = new Font("Verdana", 6, FontStyle.Regular);
                //
                foreach (DataRow dRow in dt.Rows)
                {
                    PdfPage newPdfPage = myPdfDocument.NewPage();
                    posY = 70;
                    currentYPos = 70;
                    bool overnightStatus = false;
                    //Adding each row at a time
                    DataRow dNewRow = parentDT.NewRow();
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        dNewRow[dt.Columns[col].ColumnName] = dRow[dt.Columns[col].ColumnName];
                    }
                    parentDT.Rows.Add(dNewRow);
                    string parentTrxID = string.Empty;
                    parentTrxID = parentDT.Rows[0]["TrxID"].ToString();
                    //Removing TrxID column
                    if (parentDT.Columns.Contains("TrxID"))
                    {
                        parentDT.Columns.Remove("TrxID");
                    }
                    double footerWidth = 0;
                    //Printing Parent DT                   
                    if (parentDT.Rows.Count > 0)
                    {
                        #region Columns
                        #region Print Logo
                        if (parentDT.Columns.Contains("Print Logo"))
                        {
                            pLogo = true;
                            PdfImage LogoImage = null;
                            if (parentDT.Rows[0]["Print Logo"].ToString() == "1")
                            {
                                string appDir = System.AppDomain.CurrentDomain.BaseDirectory;
                                string imgpath = string.Empty;

                                //SET cdn image path
                                //HttpApplication ctx = (HttpApplication)HttpContext.Current.ApplicationInstance;
                                //string m_strImagesCDNPath = (String)ctx.Application["ImagesCDNPath"];
                                string m_strImagesCDNPath = ConfigurationManager.AppSettings["ImagesPath"].ToString() + "/" + HttpContext.Current.Session["MyTheme"] + "/";  //(String)ctx.Application["ImagesCDNPath"];

                                XmlNode xImgSrc = xDoc.SelectSingleNode("//" + treeNodeName + "/RowList/Rows");
                                if (xImgSrc != null)
                                {
                                    XmlAttribute ximgAttr = xImgSrc.Attributes["ImgSrc"];
                                    if (ximgAttr != null)
                                    {
                                        imgpath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/" + ximgAttr.InnerText.ToString();
                                        //imgpath = appDir + "App_Themes\\" + HttpContext.Current.Session["MyTheme"].ToString() + "\\Images\\" + ximgAttr.InnerText;
                                        if ((!ximgAttr.InnerText.ToString().ToUpper().Contains("JPG")) && (!ximgAttr.InnerText.ToString().ToUpper().Contains("JPEG")))
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                        }
                                        if (File.Exists(imgpath))
                                        {
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 514, 35, 100);
                                        }
                                        else
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 514, 35, 100);
                                        }
                                    }
                                    else
                                    {
                                        XmlDocument xDocUserInfo = new XmlDocument();
                                        XDocUserInfo = commonObjUI.loadXmlFile(Convert.ToString(HttpContext.Current.Session["USERINFOXML"]));
                                        XmlNode m_CompanyWhiteNode = XDocUserInfo.SelectSingleNode("Root/bpe/companyinfo/WhiteReportLogo");
                                        string m_PhysicalImgPath = string.Empty;
                                        if (m_CompanyWhiteNode != null)
                                        {
                                            imgpath = Convert.ToString(ConfigurationSettings.AppSettings["AttachmentsPath"]) + "/" + HttpContext.Current.Session["CompanyEntityID"].ToString() + "/" + m_CompanyWhiteNode.InnerXml.ToString();
                                            if (File.Exists(imgpath))
                                            {
                                                LogoImage = myPdfDocument.NewImage(imgpath);
                                                newPdfPage.Add(LogoImage, width - 514, 35, 100);
                                            }
                                            else
                                            {
                                                imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                                LogoImage = myPdfDocument.NewImage(imgpath);
                                                newPdfPage.Add(LogoImage, width - 514, 35, 100);
                                            }
                                        }
                                        else
                                        {
                                            imgpath = m_strImagesCDNPath + "Images/lajit-logos.JPG";
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                            newPdfPage.Add(LogoImage, width - 514, 35, 100);
                                        }
                                    }
                                }
                            }
                            if (LogoImage != null)
                            {
                                posY = LogoImage.Height + 2; //4;
                            }
                        }
                        #endregion
                        #region Caption/Address
                        if (parentDT.Columns.Contains("Caption/Address"))
                        {
                            string[] strarr = parentDT.Rows[0]["Caption/Address"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                //addPosY += 10;
                                PdfTextArea pta = new PdfTextArea(FontSmall,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 350, 50),
                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());

                                newPdfPage.Add(pta);
                                addPosY += 8;
                            }
                            if (strarr.Length < 4)
                            {
                                //allocate 4 lines space...
                                posY = 109;
                            }
                            else
                            {
                                posY = addPosY;
                            }
                        }
                        #endregion
                        #region Invoice Date
                        if (parentDT.Columns.Contains("Invoice Date"))
                        {
                            string[] dateArr = parentDT.Rows[0]["Invoice Date"].ToString().Split('/');
                            int month = 0;
                            int day = 0;
                            int year = 0;
                            month = Convert.ToInt32(dateArr[0].ToString());
                            day = Convert.ToInt32(dateArr[1].ToString());
                            year = Convert.ToInt32(dateArr[2].ToString());
                            DateTime dtnow = new DateTime(year, month, day);
                            string fordate = dtnow.ToString("MMMM dd, yyyy");
                            //posY + 15
                            PdfTextArea pta = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 5, 200, 50),
                                                    ContentAlignment.MiddleLeft, fordate);
                            newPdfPage.Add(pta);
                            //posY = posY + 24;
                            posY = posY + 15;
                        }
                        if (parentDT.Columns.Contains("Customer"))
                        {
                            string[] strarr = parentDT.Rows[0]["Customer"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                addPosY += 10;
                                PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 300, 50),
                                                    ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                newPdfPage.Add(pta1);
                            }
                            //posY = addPosY + 24;
                            posY = addPosY + 12;
                        }
                        #endregion
                        #region Address
                        if (parentDT.Columns.Contains("Address"))
                        {
                            string[] strarr = parentDT.Rows[0]["Address"].ToString().Split('~');
                            double addPosY = posY;
                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                            {
                                addPosY += 10;
                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 300, 50),
                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                newPdfPage.Add(pta);
                            }
                            //posY = addPosY + 15;
                            posY = addPosY + 10;
                        }
                        #endregion
                        #endregion
                        foreach (DataColumn dcol in parentDT.Columns)
                        {
                            posY = 70;
                            if (dcol.ColumnName.Trim().ToUpper().ToString() == "PRINT LOGO")
                            {
                                pLogo = true;
                            }
                            if (dcol.ColumnName.Trim().ToUpper().ToString() == "OVERNIGHT MESSAGE")
                            {
                                overnightStatus = true;
                            }
                            switch (dcol.ColumnName.Trim())
                            {
                                case "Agency No:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 90, posY + 40, 200, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 30, posY + 40, 200, 50),
                                                                ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Agency PO#:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 90, posY + 50, 200, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 30, posY + 50, 200, 50),
                                                                ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Attention":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 70;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (arrLgh == 0)
                                            {    //510
                                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 410, addPosY, 300, 50),
                                                                            ContentAlignment.MiddleLeft, "Attn :     " + strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                            else
                                            {  //475
                                                PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                               Color.Black, new PdfArea(myPdfDocument, width - 376, addPosY, 300, 50),
                                                                               ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta);
                                            }
                                        }
                                        break;
                                    }
                                case "Invoice#":
                                case "Invoice #":
                                    {

                                        /*posY = 70;

                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                            Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 113, 200, 50),
                                                            ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " : ");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 465, posY + 113, 200, 50),
                                                               ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);*/

                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                              Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 125, 200, 50),
                                                              ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " : ");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 465, posY + 125, 200, 50),
                                                               ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);

                                        break;
                                    }
                                case "Client:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 145, 300, 50),
                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + " " + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        break;
                                    }
                                case "Our Job#":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                               Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 155, 300, 50),
                                                               ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":  " + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta);
                                        break;
                                    }
                                /* case "For Production Of:":
                                     {
                                         if (parentDT.Rows[0][dcol].ToString() != null)
                                         {
                                             PdfTextArea pta = new PdfTextArea(FontBold,
                                                                       Color.Black, new PdfArea(myPdfDocument, width - 510, posY + 190, 500, 50),
                                                                       ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString());
                                             newPdfPage.Add(pta);
                                             string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                             double addPosY = posY + 200;
                                             for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                             {
                                                 addPosY += 10;
                                                 PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                             Color.Black, new PdfArea(myPdfDocument, width - 513, addPosY, 100, 50),
                                                                             ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                 newPdfPage.Add(pta1);
                                             }
                                         }
                                         break;
                                     }
                                 case "Length":
                                     {
                                         string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                         double addPosY = posY + 200;
                                         for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                         {
                                             addPosY += 10;
                                             PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                         Color.Black, new PdfArea(myPdfDocument, width - 360, addPosY, 100, 50),
                                                                         ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                             newPdfPage.Add(pta1);
                                         }
                                         break;
                                     }*/
                                case "Description":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 260;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            if (strarr[arrLgh] != string.Empty)
                                            {
                                                addPosY += 10;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY - 30, 500, 100),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                        }
                                        break;
                                    }
                                case "Terms:":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontRegular,
                                                                         Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 420, 500, 50),
                                                                         ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString());
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontBold,
                                                                         Color.Black, new PdfArea(myPdfDocument, width - 470, posY + 420, 500, 50),
                                                                         ContentAlignment.MiddleLeft, parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }
                                case "Overnight Message":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontBold,
                                                                        Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 450, 500, 50),
                                                                        ContentAlignment.MiddleLeft, "Overnight To:");
                                        newPdfPage.Add(pta);
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 460;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                        Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 350, 50),
                                                                        ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        footerWidth = addPosY;
                                        break;
                                    }
                                case "Wiring Instructions":
                                    {
                                        if ((bool)overnightStatus)
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                                Color.Black, new PdfArea(myPdfDocument, width - 100, posY + 450, 500, 50),
                                                                                ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":");
                                            newPdfPage.Add(pta);
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 460;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 15;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 100, addPosY, 135, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                            if (parentDT.Columns.Contains("Overnight Message"))
                                            {
                                                if (parentDT.Rows[0]["Overnight Message"].ToString() != null && parentDT.Rows[0]["Wiring Instructions"].ToString() != null)
                                                {
                                                    PdfTextArea pta2 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 240, posY + 450, 500, 50),
                                                                                        ContentAlignment.MiddleLeft, "OR");
                                                    newPdfPage.Add(pta2);
                                                }
                                            }
                                            footerWidth = addPosY;
                                        }
                                        else
                                        {
                                            PdfTextArea pta = new PdfTextArea(FontBold,
                                                                               Color.Black, new PdfArea(myPdfDocument, width - 514, posY + 450, 300, 50),
                                                                               ContentAlignment.MiddleLeft, dcol.ColumnName.Trim().ToString() + ":");
                                            newPdfPage.Add(pta);
                                            string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                            double addPosY = posY + 460;
                                            for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                            {
                                                addPosY += 15;
                                                PdfTextArea pta1 = new PdfTextArea(FontRegular,
                                                                            Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 300, 50),
                                                                            ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(pta1);
                                            }
                                            if (parentDT.Columns.Contains("Overnight Message"))
                                            {
                                                if (parentDT.Rows[0]["Overnight Message"].ToString() != null && parentDT.Rows[0]["Wiring Instructions"].ToString() != null)
                                                {
                                                    PdfTextArea pta2 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 240, posY + 450, 500, 50),
                                                                                        ContentAlignment.MiddleLeft, "OR");
                                                    newPdfPage.Add(pta2);
                                                }
                                            }
                                            footerWidth = addPosY;
                                        }
                                        break;
                                    }
                                case "Footer":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY;
                                        if (footerWidth != 0)
                                        {
                                            addPosY = posY + footerWidth;
                                        }
                                        else
                                        {
                                            addPosY = posY + 530;
                                        }
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            if (arrLgh == 0)
                                            {
                                                PdfTextArea ptafooter = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 500, 50),
                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(ptafooter);
                                            }
                                            else
                                            {
                                                PdfTextArea ptafooter = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 300, 50),
                                                                                                                           ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                                newPdfPage.Add(ptafooter);
                                            }
                                        }
                                        break;
                                    }
                                /*case "Total Due":
                                    {
                                        PdfTextArea pta = new PdfTextArea(FontBold, Color.Green, new PdfArea(myPdfDocument, width - 150, posY + 330, 100, 50),
                                                                                                         ContentAlignment.MiddleCenter, dcol.ColumnName.Trim().ToString() + ":");
                                        newPdfPage.Add(pta);
                                        PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Green, new PdfArea(myPdfDocument, width - 80, posY + 330, 100, 50),
                                                                                                           ContentAlignment.MiddleCenter, "$" + parentDT.Rows[0][dcol].ToString());
                                        newPdfPage.Add(pta1);
                                        break;
                                    }*/
                                case "Invoice Instructions":
                                    {
                                        string[] strarr = parentDT.Rows[0][dcol].ToString().Split('~');
                                        double addPosY = posY + 340;
                                        for (int arrLgh = 0; arrLgh < strarr.Length; arrLgh++)
                                        {
                                            addPosY += 10;
                                            PdfTextArea pta1 = new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, width - 514, addPosY, 100, 50),
                                                                                                                ContentAlignment.MiddleLeft, strarr[arrLgh].ToString());
                                            newPdfPage.Add(pta1);
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                    }
                    //Printing Line Break
                    Point pStart = new Point(30, Convert.ToInt32(posY + 185));
                    Point pEnd = new Point(Convert.ToInt32(width + 35), Convert.ToInt32(posY + 185));
                    PdfLine pdfLineBrk = new PdfLine(myPdfDocument, pStart, pEnd, Color.Black, 1);
                    newPdfPage.Add(pdfLineBrk);
                    currentYPos = posY + 200;
                    //Printing PLogo
                    if ((bool)pLogo == false)
                    {
                        string imgpath = PDFImagePath();
                        if (!string.IsNullOrEmpty(imgpath))
                        {
                            PdfImage LogoImage = myPdfDocument.NewImage(imgpath);
                            newPdfPage.Add(LogoImage, width - 514, 40, 100);
                        }
                    }
                    //Printing BranchDT
                    XmlNode nodeBranches = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout/Tree/Branches");
                    double branchPosY = 0;
                    ArrayList alBranchWidths = new ArrayList();
                    ArrayList alAmountColumns = new ArrayList();
                    int columncount = 0;
                    if (nodeBranches != null)
                    {
                        foreach (XmlNode nodeBranch in nodeBranches.ChildNodes)
                        {
                            {
                                string branchNodeName = nodeBranch.SelectSingleNode("Node").InnerText;
                                DataTable BranchDT = new DataTable();
                                Hashtable htFontFormats = new Hashtable();
                                BranchDT = objclsrpt.RP201GetBranchDataToPrint(strOutXml, parentTrxID, branchNodeName, htFontFormats);
                                BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);

                                if (BranchDT.Rows.Count > 0)
                                {
                                    bool sumExists = false;
                                    //Getting the columns to be displayed in grid
                                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                    {
                                        XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                        //Checking for isSummed value for that column
                                        if (nodeBranchCol != null)
                                        {
                                            if (!sumExists)
                                            {
                                                if (nodeBranchCol.Attributes["IsSummed"] != null)
                                                {
                                                    if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                    {
                                                        sumExists = true;
                                                    }
                                                }
                                            }
                                            //
                                            if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                            {
                                                alBranchWidths.Add(nodeBranchCol.Attributes["FullViewLength"].Value);
                                            }
                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                            {
                                                if (nodeBranchCol.Attributes["ControlType"].Value.ToUpper() == "AMOUNT")
                                                {
                                                    alAmountColumns.Add(columncount);
                                                }

                                            }
                                            columncount++;
                                        }
                                    }
                                    //Removing the Summed row from branch table
                                    if (sumExists)
                                    {
                                        BranchDT.Rows.RemoveAt(BranchDT.Rows.Count - 1);
                                    }
                                    int branchRowCnt = 0;
                                    //Branch Data
                                    // Table start
                                    //ADD Total colum
                                    if (BranchDT.Rows.Count > 0)
                                    {
                                        //Add Empty rows
                                        BranchDT.Rows.Add(BranchDT.NewRow());
                                        BranchDT.Rows.Add(BranchDT.NewRow());
                                        for (int i = 0; i < BranchDT.Columns.Count; i++)
                                        {
                                            BranchDT.Rows[BranchDT.Rows.Count - 2][i] = "EMPTY";
                                            BranchDT.Rows[BranchDT.Rows.Count - 1][i] = "EMPTY";
                                        }

                                        //Add Total Due
                                        BranchDT.Rows.Add(BranchDT.NewRow());
                                        if (parentDT.Columns.Contains("Total Due"))
                                        {
                                            for (int i = 0; i < BranchDT.Columns.Count; i++)
                                            {
                                                if (i == 0)
                                                {
                                                    BranchDT.Rows[BranchDT.Rows.Count - 1][0] = "Total Due :";
                                                }
                                                if (i == 1)
                                                {
                                                    BranchDT.Rows[BranchDT.Rows.Count - 1][1] = parentDT.Rows[0]["Total Due"].ToString();
                                                }
                                            }
                                        }
                                    }

                                    int rowsInTab = BranchDT.Rows.Count;
                                    int colsInTab = BranchDT.Columns.Count;


                                    int[] Arraywidth = new int[colsInTab];
                                    for (int i = 0; i < alBranchWidths.Count; i++)
                                    {
                                        if (Convert.ToInt32(alBranchWidths[i]) < 100)
                                        {
                                            Arraywidth[i] = Convert.ToInt32(alBranchWidths[i]);
                                        }
                                        else
                                        {
                                            Arraywidth[i] = 90;
                                        }
                                    }


                                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                    BranchDT = objclsrpt.WrapFullViewLength(BranchDT, Arraywidth);
                                    BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, strOutXml, branchNodeName);
                                    //
                                    myPdfTable.ImportDataTable(BranchDT, 0, 0, 0, rowsInTab);
                                    myPdfTable.SetColumnsWidth(Arraywidth);
                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                    myPdfTable.HeadersRow.SetTransparent();
                                    myPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                                    myPdfTable.HeadersRow.SetForegroundColor(Color.White);
                                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);

                                    for (int rcnt = 0; rcnt < myPdfTable.Rows.Length; rcnt++)
                                    {
                                        for (int i = 0; i < alAmountColumns.Count; i++)
                                        {

                                            myPdfTable.Rows[rcnt][Convert.ToInt32(alAmountColumns[i])].SetContentAlignment(ContentAlignment.MiddleRight);
                                            if (myPdfTable.Rows[rcnt][Convert.ToInt32(alAmountColumns[i])].Content != null)
                                            {
                                                int columnCnt = Convert.ToInt32(alAmountColumns[i].ToString());

                                                if (myPdfTable.Rows[rcnt][columnCnt].Content.ToString().Length > 0)
                                                {
                                                    if (myPdfTable.Rows[rcnt][columnCnt].Content.ToString() != "EMPTY")
                                                    {
                                                        myPdfTable.Rows[rcnt][columnCnt].SetContent("$" + myPdfTable.Rows[rcnt][columnCnt].Content.ToString());
                                                    }
                                                }
                                            }
                                        }
                                        //Empty Cells Set background white
                                        for (int j = 0; j < colsInTab; j++)
                                        {
                                            if (myPdfTable.Rows[rcnt][j].Content.ToString() == "EMPTY")
                                            {
                                                myPdfTable.Rows[rcnt][j].SetBackgroundColor(Color.White);
                                                myPdfTable.Rows[rcnt][j].SetForegroundColor(Color.White);
                                            }
                                        }
                                        //Total Amount
                                        if (rcnt == myPdfTable.Rows.Length - 1)
                                        {
                                            myPdfTable.Rows[rcnt][0].SetContentAlignment(ContentAlignment.MiddleRight);
                                            myPdfTable.Rows[rcnt][0].SetFont(FontBold);
                                            myPdfTable.Rows[rcnt].SetBackgroundColor(Color.White);
                                        }
                                        //Format the rows
                                        if (htFontFormats.Count > 0)
                                        {
                                            if (htFontFormats[rcnt] != null)
                                            {
                                                string[] strFormats = htFontFormats[rcnt].ToString().Split(';');

                                                for (int k = 0; k < strFormats.Length; k++)
                                                {
                                                    string[] strFonts = strFormats[k].Split('~');

                                                    switch (strFonts[0].ToString())
                                                    {
                                                        case "LF":
                                                            {   //LargeFont
                                                                if (strFonts[1].ToString() == "1")
                                                                {
                                                                    myPdfTable.Rows[rcnt].SetFont(FontRegular);
                                                                }
                                                                break;
                                                            }
                                                        case "SF":
                                                            {   //SmallFont
                                                                if (strFonts[1].ToString() == "1")
                                                                {
                                                                    myPdfTable.Rows[rcnt].SetFont(FontSmall);
                                                                }
                                                                break;
                                                            }
                                                        case "UL":
                                                            {   //UnderLine
                                                                if (strFonts[1].ToString() == "1")
                                                                {
                                                                    myPdfTable.Rows[rcnt].SetFont(FontUnderline);
                                                                }
                                                                break;
                                                            }
                                                        case "SH":
                                                            { //Shade
                                                                if (strFonts[1].ToString() == "1")
                                                                {
                                                                    myPdfTable.Rows[rcnt].SetBackgroundColor(Color.Gainsboro);
                                                                    //Change backgroupd of EMPTY cells
                                                                    for (int c = 0; c < colsInTab; c++)
                                                                    {
                                                                        if (myPdfTable.Rows[rcnt][c].Content.ToString() == "EMPTY")
                                                                        {
                                                                            myPdfTable.Rows[rcnt][c].SetForegroundColor(Color.Gainsboro);
                                                                        }
                                                                    }
                                                                }
                                                                break;
                                                            }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    while (!myPdfTable.AllTablePagesCreated)
                                    {
                                        //Setting the Y position and if required creating new page
                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                        {
                                            posY = 70; //200;//70;
                                            currentYPos = 70; //200; //70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                        }
                                        else
                                        {
                                            posY = currentYPos; //+25;
                                        }
                                        //myPdfDocument.PageHeight - 50 - posY
                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                        {
                                            posY = 70;  // 200;//70;
                                            currentYPos = 70; //200; //70;
                                            newPdfPage.SaveToDocument();
                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                            newPdfPage = myPdfDocument.NewPage();
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                        }
                                        // posX, posY, width,
                                        //height - posY
                                        PdfTablePage newPdfTablePage2 = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, width - 514, posY, width, height - posY));
                                        newPdfPage.Add(newPdfTablePage2);
                                        currentYPos = newPdfTablePage2.Area.BottomLeftVertex.Y;
                                        branchPosY = currentYPos;
                                    }

                                    // Table End
                                }
                            }
                        }
                    }
                   
                    newPdfPage.SaveToDocument();
                    //Deleting the printed row from parentDT
                    if (tableLayout.ToUpper().Trim() == "NORMAL")
                    {
                        parentDT.Rows[0].Delete();
                        //Adding TrxID column
                        if (!parentDT.Columns.Contains("TrxID"))
                        {
                            parentDT.Columns.Add("TrxID");
                        }
                    }
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }

            }
            catch (Exception ex)
            {

            }
        }
        #endregion



        #region OLD JOB COSTING EXPORT TO PDF -REPORT STYLE 400

        /// <summary>

        /// Exports the grid view to PDF
        /// </summary>
        /// <param name="dt">Data table to be printed</param>
        /// <param name="dt">Filename to be printed</param>
        public void OldGVJobExportToPDF2(DataSet dsAll, string fileName, DataTable NotesDT, string rptPrintNotes, string GVXml, string tableLayout)
        {
            try
            {
                myPdfDocument = new PdfDocument(PdfDocumentFormat.A4);
                bool _budgetTotal = false;
                int pageCnt = 0;
                Hashtable m_htPagebrk = new Hashtable();
                Hashtable m_htFont = new Hashtable();
                Hashtable m_htBold = new Hashtable();
                Hashtable m_htRightAlign = new Hashtable();
                Hashtable m_htDateFormat = new Hashtable();
                //
                DataTable dtBudgetGroup = new DataTable();
                //
                string m_AmountNodes = string.Empty;
                string m_DateFormats = string.Empty;
                //
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(GVXml);
                XmlNode nodeGridLayout = xDoc.SelectSingleNode("Root/bpeout/FormControls/GridLayout");
                for (int drs = 0; drs < dsAll.Tables[0].Rows.Count; drs++)
                {
                    foreach (DataTable dt in dsAll.Tables)
                    {
                        bool dataPrinted = false;
                        bool invPrinted = false;
                        if (dsAll.Tables.Contains("InvoiceInfo"))
                        {
                            invPrinted = true;
                        }
                        if ((dt.TableName.Trim().ToString().ToUpper() == "JOB"))
                        {
                            dataPrinted = false;
                        }
                        else
                        {
                            if (dt.Rows.Count > 0)
                            {
                                dataPrinted = true;
                            }
                        }
                        if ((bool)dataPrinted)
                        {
                            DataTable dtAll = new DataTable();
                            DataTable dtTrxInfo = new DataTable();
                            DataTable dtInvoiceInfo = new DataTable();
                            string treeNodeName = dt.TableName.Trim().ToString();
                            if (dt.Columns.Contains("Notes"))
                            {
                                NotesDT = reportsBO.GenerateNotesDatatable(dt);
                                dt.Columns.Remove("Notes");
                            }
                            //Getting the columns to be displayed in grid
                            XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                            //Getting the rows to print
                            XmlNode nodeRowList = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                            string m_JobID = string.Empty;
                            switch (dt.TableName.Trim().ToUpper().ToString())
                            {
                                #region JOB INFO
                                case "JOBINFO":
                                    {
                                        continue;
                                    }
                                #endregion
                                #region BUDGET GROUP
                                case "BUDGETGROUP":
                                    {
                                        //Adding New page for the first time
                                        PdfPage newPdfPage = null;
                                        PdfTablePage myHeaderPdfTablePage = null;
                                        string imgpath = PDFImagePath();
                                        PdfImage LogoImage = null;
                                        double posX = 0.0;
                                        double posY = 0.0;
                                        double width = 0.0;
                                        double height = 0.0;
                                        if (!string.IsNullOrEmpty(imgpath))
                                        {
                                            LogoImage = myPdfDocument.NewImage(imgpath);
                                        }

                                        int pageBreaks = 0;
                                        //Considering the PLayout only for the first treenode
                                        if (myPdfDocument.PageCount == 0)
                                        {
                                            if (nodeRowList != null)
                                            {
                                                if (nodeRowList.FirstChild != null)
                                                {
                                                    if (nodeRowList.FirstChild.Attributes["pLayout"] != null)
                                                    {
                                                        string pLayout = nodeRowList.FirstChild.Attributes["pLayout"].Value.ToString().Trim();
                                                        if (pLayout == "1")//Landscape
                                                        {
                                                            myPdfDocument = new PdfDocument(PdfDocumentFormat.A4_Horizontal);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (nodeRowList != null)
                                        {
                                            if (nodeRowList.ChildNodes != null)
                                            {
                                                foreach (XmlNode nodeRow in nodeRowList.ChildNodes)
                                                {
                                                    if (nodeRow.Attributes["TrxID"] != null)
                                                    {
                                                        string trxID = nodeRow.Attributes["TrxID"].Value;
                                                        DataRow[] foundRows = null;
                                                        foundRows = dt.Select("TrxID ='" + trxID + "' and JobID='" + dsAll.Tables[0].Rows[drs]["TrxID"].ToString() + "'");
                                                        m_JobID = dsAll.Tables[0].Rows[drs]["TrxID"].ToString();
                                                        if (foundRows.Length > 0)
                                                        {
                                                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                                                            DataRow dt2Row = dtAll.NewRow();
                                                            if (dtAll.Columns.Count == 0)
                                                            {
                                                                for (int x = 0; x < dt.Columns.Count; x++)
                                                                {
                                                                    dtAll.Columns.Add(dt.Columns[x].ColumnName);
                                                                }
                                                            }
                                                            for (int i = 0; i < dtAll.Columns.Count; i++)
                                                            {
                                                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                                                            }
                                                            dtAll.Rows.Add(dt2Row);
                                                            dt.Rows[rowIndex].Delete();
                                                            dtAll.AcceptChanges();
                                                            dtAll.TableName = dt.TableName;
                                                            if (nodeRow.Attributes["pLnSkip"] != null)
                                                            {
                                                                if (nodeRow.Attributes["pLnSkip"].Value.ToString().Trim() != "0")
                                                                {
                                                                    for (int skipCnt = 0; skipCnt < Convert.ToInt32(nodeRow.Attributes["pLnSkip"].Value.Trim()); skipCnt++)
                                                                    {
                                                                        // Adding each row at a time
                                                                        DataRow dSkipRow = dtAll.NewRow();
                                                                        for (int col = 0; col < dtAll.Columns.Count; col++)
                                                                        {
                                                                            dSkipRow[dtAll.Columns[col].ColumnName] = "SKIP";
                                                                        }
                                                                        dtAll.Rows.Add(dSkipRow);
                                                                        dtAll.AcceptChanges();
                                                                    }
                                                                }
                                                            }
                                                            if (nodeRow.Attributes["pPgBreak"] != null)
                                                            {
                                                                if (nodeRow.Attributes["pPgBreak"].Value.ToString().Trim() == "1")
                                                                {
                                                                    pageBreaks++;
                                                                    m_htPagebrk.Add(pageBreaks, rowIndex);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        // Variable to get the Column count of the parent table
                                        int colsInTab = 0;
                                        if (dtAll.Columns.Count > 0)
                                        {
                                            colsInTab = dtAll.Columns.Count - 2;
                                            int[] Arraywidth = new int[colsInTab];
                                            bool isSumExists = false;
                                            if (tableLayout.ToUpper().Trim() == "NORMAL")
                                            {
                                                //Storing the captions of cols having IsSummed and IsNumeric as 1 in the HashTable
                                                int arrayCntr = 0;
                                                foreach (XmlNode node in nodeCols)
                                                {
                                                    if (node.Attributes["Caption"] != null)
                                                    {
                                                        DataColumn dc = dtAll.Columns[node.Attributes["Caption"].Value];
                                                        if (dc != null)
                                                        {
                                                            if (dc.ColumnName == "JobID")
                                                            {
                                                                arrayCntr++;
                                                                continue;
                                                            }
                                                            else
                                                            {
                                                                if (node.Attributes["FullViewLength"] != null)
                                                                {
                                                                    if (node.Attributes["FullViewLength"].Value != "0")
                                                                    {
                                                                        Arraywidth[dc.Ordinal - arrayCntr] = Convert.ToInt32(node.Attributes["FullViewLength"].Value);
                                                                    }
                                                                    else
                                                                    {
                                                                        Arraywidth[dc.Ordinal - arrayCntr] = 15;
                                                                    }
                                                                }
                                                                //Getting the cols having Issummed=1 
                                                                if (node.Attributes["IsSummed"] != null)
                                                                {
                                                                    if (node.Attributes["IsSummed"].Value == "1")
                                                                    {
                                                                        if (!isSumExists)
                                                                            isSumExists = true;
                                                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["IsSummed"].Value);
                                                                    }
                                                                }
                                                                //Getting the cols having ControlType="Amount"//Isnumeric=1
                                                                if (node.Attributes["ControlType"] != null)
                                                                {
                                                                    if (node.Attributes["ControlType"].Value == "Cal")
                                                                    {
                                                                        m_DateFormats = node.Attributes["Caption"].Value;
                                                                        if (!m_htDateFormat.Contains(node.Attributes["Caption"].Value))
                                                                        {
                                                                            m_htDateFormat.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                                        }
                                                                    }
                                                                    if (node.Attributes["ControlType"].Value == "Amount")
                                                                    {
                                                                        m_AmountNodes = node.Attributes["Caption"].Value;
                                                                        if (!m_htRightAlign.Contains(node.Attributes["Caption"].Value))
                                                                        {
                                                                            m_htRightAlign.Add(node.Attributes["Caption"].Value, node.Attributes["ControlType"].Value);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                //Setting columns width for cols not present in node columns
                                                for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                                                {
                                                    if (Arraywidth[colCnt].ToString() == string.Empty)
                                                        Arraywidth[colCnt] = 15;
                                                }
                                            }
                                            else
                                            {
                                                //Setting columns width based on No of cols
                                                for (int colCnt = 0; colCnt < colsInTab; colCnt++)
                                                {
                                                    Arraywidth[colCnt] = 20;
                                                }
                                            }
                                            newPdfPage = myPdfDocument.NewPage();
                                            //Setting the X and Y positons, width and height of the tables
                                            posX = 20;
                                            posY = 70;
                                            width = myPdfDocument.PageWidth - 50;
                                            height = myPdfDocument.PageHeight - 50;
                                            double currentYPos = 70;
                                            Font FontRegular = new Font("Verdana", 7, FontStyle.Regular);
                                            Font HeaderFont = new Font("Verdana", 8, FontStyle.Bold | FontStyle.Underline);
                                            Font HeaderRowFont = new Font("Verdana", 1, FontStyle.Regular, 0);
                                            Font HeaderPageTitleFont = new Font("Verdana", 9, FontStyle.Bold);
                                            Font HeaderPageTitleFont1 = new Font("Verdana", 9, FontStyle.Bold);
                                            Font HeaderPageTitleFont2 = new Font("Verdana", 8, FontStyle.Bold);
                                            Font HeaderPageTitleFont3 = new Font("Verdana", 7, FontStyle.Bold);
                                            Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                                            Font RowFontBold = new Font("Verdana", 8, FontStyle.Bold);
                                            Font FontUnderline = new Font("Verdana", 8, FontStyle.Regular | FontStyle.Underline);
                                            Font RowBoxFontBold = new Font("Verdana", 10, FontStyle.Bold);
                                            Font dateFont = new Font("Verdana", 8, FontStyle.Bold);
                                            //Getting header DT for this treenode
                                            DataTable HeaderDT = new DataTable();
                                            //Getting Header table
                                            string title = string.Empty;
                                            XmlNode nodeTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/Job/GridHeading/Title");
                                            if (nodeTitle != null)
                                            {
                                                title = nodeTitle.InnerText.Trim().ToString();
                                            }
                                            string subTitle = string.Empty;
                                            XmlNode nodeSubTitle = xDoc.SelectSingleNode("Root/bpeout/FormControls/Job/GridHeading/SubTitle");
                                            if (nodeSubTitle != null)
                                            {
                                                subTitle = nodeSubTitle.InnerText.Trim().ToString();
                                            }
                                            //Getting header DT for this treenode
                                            HeaderDT = objclsrpt.GetHeaderJobCostingDT(title, subTitle, xDoc, dsAll.Tables[0].Rows[drs]["TrxID"].ToString());
                                            //
                                            myHeaderPdfTable = myPdfDocument.NewTable(FontRegular, HeaderDT.Rows.Count, HeaderDT.Columns.Count, 1);
                                            //Import HeaderDT to PDF table
                                            myHeaderPdfTable.ImportDataTable(HeaderDT);
                                            //myHeaderPdfTable.HeadersRow.SetColors(Color.White, Color.White);
                                            myHeaderPdfTable.HeadersRow.SetFont(HeaderRowFont);
                                            //myHeaderPdfTable.SetBackgroundColor(Color.White);
                                            myHeaderPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                            myHeaderPdfTable.SetColumnsWidth(new int[] { 190, 300, 135, 35 });
                                            //
                                            myHeaderPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                            int titleLength = myHeaderPdfTable.Rows[0][1].Content.ToString().Length;
                                            if (titleLength < 75)
                                            {
                                                myHeaderPdfTable.Rows[0][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            myHeaderPdfTable.Rows[0][1].SetFont(HeaderPageTitleFont1);
                                            //
                                            int subTitleLength = myHeaderPdfTable.Rows[1][1].Content.ToString().Length;
                                            if (subTitleLength < 75)
                                            {
                                                myHeaderPdfTable.Rows[1][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            myHeaderPdfTable.Rows[1][1].SetFont(HeaderPageTitleFont2);
                                            //
                                            int dateLength = myHeaderPdfTable.Rows[0][2].Content.ToString().Length;
                                            if (dateLength < 75)
                                            {
                                                myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            myHeaderPdfTable.Rows[0][2].SetFont(HeaderPageTitleFont3);
                                            if (HeaderDT.Rows.Count > 2)
                                            {
                                                if (HeaderDT.Rows[2][1].ToString() != string.Empty)
                                                {
                                                    myHeaderPdfTable.Rows[2][1].SetContentAlignment(ContentAlignment.MiddleCenter);
                                                }
                                            }
                                            if (HeaderDT.Columns.Count > 1)
                                            {
                                                if (HeaderDT.Rows.Count > 2)
                                                {
                                                    if (HeaderDT.Rows[2][1].ToString() != string.Empty)
                                                    {
                                                        myHeaderPdfTable.Rows[0][2].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        myHeaderPdfTable.Rows[1][2].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                    }
                                                }
                                            }
                                            //
                                            myHeaderPdfTable.HeadersRow.SetForegroundColor(Color.White);
                                            myHeaderPdfTable.HeadersRow.SetBackgroundColor(Color.White);
                                            myHeaderPdfTablePage = myHeaderPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, 10, width, 100));
                                            imgPosX = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.X;
                                            imgPosY = myHeaderPdfTablePage.CellArea(0, 3).TopLeftVertex.Y;
                                            //Adding header table in the first page
                                            newPdfPage.Add(myHeaderPdfTablePage);
                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                            #region PAGE BREAKS
                                            if (pageBreaks != 0)
                                            {
                                                for (int pgbrk = 1; pgbrk <= pageBreaks + 1; pgbrk++)
                                                {
                                                    posY = 70;
                                                    currentYPos = 70;
                                                    int dtStRow = 0;
                                                    int dtEndRow = 0;
                                                    if (pgbrk == 1)
                                                    {
                                                        dtStRow = 0;
                                                    }
                                                    else
                                                    {
                                                        dtStRow = Convert.ToInt32(m_htPagebrk[pgbrk - 1].ToString()) + 1;
                                                    }
                                                    if (pgbrk == pageBreaks + 1)
                                                    {
                                                        dtEndRow = dtTrxInfo.Rows.Count - 1;
                                                    }
                                                    else
                                                    {
                                                        dtEndRow = dtTrxInfo.Rows.Count;
                                                    }
                                                    int rowsInTab = dtEndRow - dtStRow + 1;//dt.Rows.Count;
                                                    PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                                    //Import DT to PDF table
                                                    dtTrxInfo = objclsrpt.WrapFullViewLength(dtTrxInfo, Arraywidth);
                                                    myPdfTable.ImportDataTable(dtTrxInfo, 0, 0, dtStRow, dtEndRow);
                                                    myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                                    myPdfTable.SetColumnsWidth(Arraywidth);
                                                    //Now we set some alignment... for the whole table and then, for a column:
                                                    myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                    myPdfTable.HeadersRow.SetFont(HeaderFont);
                                                    //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                                    myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                    if (m_htRightAlign.Count > 0)
                                                    {
                                                        if (pgbrk == pageBreaks + 1)
                                                        {
                                                            if (isSumExists)
                                                            {
                                                                //Right justifying Summed row content
                                                                myPdfTable.Rows[rowsInTab - 1].SetFont(SumRowFont);
                                                                myPdfTable.Rows[rowsInTab - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                            }
                                                        }
                                                        //Right justifying Summed column content and IsNumeric column content
                                                        for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                                        {
                                                            if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                                            {
                                                                if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                                {
                                                                    if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                                                    {
                                                                        myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                        myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //Setting Row font
                                                    int pdftableRow = 0;
                                                    for (int pdfRow = dtStRow; pdfRow <= dtEndRow; pdfRow++)
                                                    {
                                                        string trxID = dt.Rows[pdfRow]["TrxID"].ToString();
                                                        XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                                        if (nodeRow != null)
                                                        {
                                                            if (nodeRow.Attributes["pFont"] != null)
                                                            {
                                                                if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                                                {
                                                                    myPdfTable.Rows[pdftableRow].SetFont(RowFontBold);
                                                                }
                                                            }
                                                            if (nodeRow.Attributes["pBox"] != null)
                                                            {
                                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                                {
                                                                    myPdfTable.Rows[pdftableRow].SetFont(RowBoxFontBold);
                                                                }
                                                            }
                                                        }
                                                        if (trxID.ToUpper().Trim() == "SKIP")
                                                        {
                                                            myPdfTable.Rows[pdftableRow].SetForegroundColor(Color.White);
                                                        }
                                                        pdftableRow++;
                                                    }
                                                    //
                                                    if (pgbrk != 1)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNo
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    while (!myPdfTable.AllTablePagesCreated)
                                                    {
                                                        //Setting the Y position and if required creating new page
                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                        {
                                                            posY = 70;
                                                            currentYPos = 70;
                                                            newPdfPage.SaveToDocument();
                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                                            newPdfPage = myPdfDocument.NewPage();
                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                        }
                                                        else
                                                        {
                                                            posY = currentYPos;// +25;
                                                        }
                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                        {
                                                            posY = 70;
                                                            currentYPos = 70;
                                                            newPdfPage.SaveToDocument();
                                                            //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                            newPdfPage = myPdfDocument.NewPage();
                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                        }
                                                        PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                        //Printing Row boxes
                                                        for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                                        {
                                                            string trxID = dtTrxInfo.Rows[index]["TrxID"].ToString();
                                                            string jobID = dtTrxInfo.Rows[index]["JobID"].ToString();
                                                            string accountID = dtTrxInfo.Rows[index]["AccountID"].ToString();
                                                            XmlNode nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID='" + accountID + "' and @JobID = '" + jobID + "' and @AccountID='" + accountID + "']");
                                                            if (nodeRow != null)
                                                            {
                                                                if (nodeRow.Attributes["pBox"] != null)
                                                                {
                                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                                    {
                                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                                        {
                                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                            pr.StrokeWidth = 1;
                                                                            newPdfPage.Add(pr);
                                                                        }
                                                                    }
                                                                    if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                                                    {
                                                                        for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                                        {
                                                                            if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                                            {
                                                                                PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                                pr.StrokeWidth = 1;
                                                                                newPdfPage.Add(pr);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        //Rows content
                                                        newPdfPage.Add(newPdfTablePage);
                                                        currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                                    }
                                                }
                                            }
                                            #endregion
                                            #region WITH OUT PAGE BREAKS
                                            else
                                            {
                                                #region PARENT TABLE
                                                int rowsInTab = dtAll.Rows.Count;
                                                PdfTable myPdfTable = myPdfDocument.NewTable(FontRegular, rowsInTab, colsInTab, 1);
                                                //Import DT to PDF table
                                                foreach (DataRow dr in dtAll.Rows)
                                                {
                                                    foreach (DataColumn dc in dr.Table.Columns)
                                                    {
                                                        foreach (DictionaryEntry item in m_htRightAlign)
                                                        {
                                                            if (dc.ColumnName == item.Key.ToString())
                                                            {
                                                                decimal amount;
                                                                if (Decimal.TryParse(dr[dc.Ordinal].ToString(), out amount))
                                                                {
                                                                    string amt = string.Format("{0:N}", amount);
                                                                    dr[dc.Ordinal] = amt;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (dtAll.Columns.Contains("JobID"))
                                                {
                                                    dtAll.Columns.Remove("JobID");
                                                }
                                                dtAll = objclsrpt.WrapFullViewLength(dtAll, Arraywidth);
                                                myPdfTable.ImportDataTable(dtAll, 0, 0, 0, rowsInTab);
                                                myPdfTable.SetBorders(Color.Black, 1, BorderType.None);
                                                myPdfTable.SetColumnsWidth(Arraywidth);
                                                //Now we set some alignment... for the whole table and then, for a column:
                                                myPdfTable.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                myPdfTable.HeadersRow.SetFont(HeaderFont);
                                                //myPdfTable.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                                myPdfTable.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                if (!dtAll.Columns.Contains("JobID"))
                                                {
                                                    dtAll.Columns.Add("JobID");
                                                }
                                                if (m_htRightAlign.Count > 0)
                                                {
                                                    if (isSumExists)
                                                    {
                                                        //Right justifying Summed row content
                                                        myPdfTable.Rows[dt.Rows.Count - 1].SetFont(SumRowFont);
                                                        myPdfTable.Rows[dt.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                    //Right justifying Summed column content and IsNumeric column content
                                                    for (int pdfcol = 0; pdfcol < colsInTab; pdfcol++)
                                                    {
                                                        if (myPdfTable.HeadersRow[pdfcol].Content != null)
                                                        {
                                                            if (myPdfTable.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                            {
                                                                if (m_htRightAlign.Contains(myPdfTable.HeadersRow[pdfcol].Content.ToString()))
                                                                {
                                                                    myPdfTable.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                    myPdfTable.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                //Setting Row font
                                                int rowtab = 2;
                                                for (int pdfRow = 0; pdfRow < rowsInTab; pdfRow++)
                                                {
                                                    XmlNode nodeRow;
                                                    string trxID = dtAll.Rows[pdfRow]["TrxID"].ToString();
                                                    nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                                    if (trxID.ToUpper().Trim() == "SKIP")
                                                    {
                                                        rowtab = 1;
                                                        myPdfTable.Rows[pdfRow].SetForegroundColor(Color.White);
                                                    }
                                                    if (nodeRow != null)
                                                    {
                                                        if ((rowtab % 2) == 0)
                                                        {
                                                            myPdfTable.Rows[pdfRow].SetBackgroundColor(Color.NavajoWhite);
                                                        }
                                                        else
                                                        {
                                                            myPdfTable.Rows[pdfRow].SetBackgroundColor(Color.White);
                                                        }
                                                        if (nodeRow.Attributes["pFont"] != null)
                                                        {
                                                            if (nodeRow.Attributes["pFont"].Value.ToString().Trim() == "1")
                                                            {
                                                                myPdfTable.Rows[pdfRow].SetFont(RowFontBold);
                                                            }
                                                        }
                                                        if (nodeRow.Attributes["pBox"] != null)
                                                        {
                                                            if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                            {
                                                                myPdfTable.Rows[pdfRow].SetFont(RowBoxFontBold);
                                                            }
                                                        }
                                                        if (nodeRow.Attributes["pBold"] != null)
                                                        {
                                                            if (nodeRow.Attributes["pBold"].Value.ToString().Trim() == "1")
                                                            {
                                                                myPdfTable.Rows[pdfRow].SetFont(RowBoxFontBold);
                                                            }
                                                        }
                                                    }
                                                    rowtab++;
                                                }
                                                while (!myPdfTable.AllTablePagesCreated)
                                                {
                                                    //Setting the Y position and if required creating new page
                                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    else
                                                    {
                                                        posY = currentYPos;// +25;
                                                    }
                                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                    {

                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    PdfTablePage newPdfTablePage = myPdfTable.CreateTablePage(new PdfArea(myPdfDocument, posX, posY, width, height - posY));
                                                    XmlNode nodeRow;
                                                    //Printing Row boxes
                                                    for (int index = newPdfTablePage.FirstRow; index <= newPdfTablePage.LastRow; index++)
                                                    {
                                                        string trxID = dtAll.Rows[index]["TrxID"].ToString();
                                                        nodeRow = nodeRowList.SelectSingleNode("Rows[@TrxID = '" + trxID + "']");
                                                        if (nodeRow != null)
                                                        {
                                                            if (nodeRow.Attributes["pBox"] != null)
                                                            {
                                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "1")
                                                                {
                                                                    for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                                    {

                                                                        PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                        pr.StrokeWidth = 1;
                                                                        newPdfPage.Add(pr);
                                                                    }
                                                                }
                                                                if (nodeRow.Attributes["pBox"].Value.ToString().Trim() == "2")
                                                                {
                                                                    for (int cellcnt = 0; cellcnt < myPdfTable.Rows[index].Cells.Count; cellcnt++)
                                                                    {
                                                                        if (myPdfTable.Rows[index][cellcnt].Content.ToString() != string.Empty)
                                                                        {
                                                                            PdfRectangle pr = newPdfTablePage.CellArea(index, cellcnt).ToRectangle(Color.Black, 1, Color.White);
                                                                            pr.StrokeWidth = 1;
                                                                            newPdfPage.Add(pr);
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }
                                                    //Adding Rows content
                                                    newPdfPage.Add(newPdfTablePage);
                                                    currentYPos = newPdfTablePage.Area.BottomLeftVertex.Y;
                                                }
                                                //Notes DT
                                                if (NotesDT.Rows.Count > 0)
                                                {
                                                    if (rptPrintNotes.Trim().ToUpper().ToString() == "YES")
                                                    {
                                                        int rowsInNotesDT = NotesDT.Rows.Count;
                                                        int colsInNotesDT = NotesDT.Columns.Count;
                                                        PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInNotesDT, colsInNotesDT, 1);
                                                        myPdfTable1.ImportDataTable(NotesDT);
                                                        myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                                        myPdfTable1.SetColumnsWidth(new int[] { 50, 100 });
                                                        myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        myPdfTable1.HeadersRow.SetFont(HeaderFont);
                                                        myPdfTable1.HeadersRow.SetColors(Color.Black, Color.Gainsboro);
                                                        myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        while (!myPdfTable1.AllTablePagesCreated)
                                                        {
                                                            //Setting the Y position and if required creating new page
                                                            if (currentYPos > myPdfDocument.PageHeight - 50)
                                                            {
                                                                posY = 70;
                                                                currentYPos = 70;
                                                                newPdfPage.SaveToDocument();
                                                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo
                                                                newPdfPage = myPdfDocument.NewPage();
                                                                newPdfPage.Add(myHeaderPdfTablePage);
                                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                            }
                                                            else
                                                            {
                                                                posY = currentYPos;// +25;
                                                            }
                                                            if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                            {
                                                                posY = 70;
                                                                currentYPos = 70;
                                                                newPdfPage.SaveToDocument();
                                                                //Adding new page and adding Header table,logo image and pageNoand adding Header table,logo image and pageNo 

                                                                newPdfPage = myPdfDocument.NewPage();
                                                                newPdfPage.Add(myHeaderPdfTablePage);
                                                                if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                                newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                            }
                                                            PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height - posY - 10));
                                                            newPdfPage.Add(newPdfTablePage1);
                                                            currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                                        }
                                                    }
                                                }
                                                #endregion
                                                #region BRANCH
                                                //Getting the columns to be displayed in grid
                                                XmlNode nodeCols1 = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + dsAll.Tables[2].TableName.Trim().ToString() + "/GridHeading/Columns");
                                                //Getting the rows to print
                                                XmlNode nodeRowList1 = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + dsAll.Tables[2].TableName.Trim().ToString() + "/RowList");
                                                if (nodeRowList1 != null)
                                                {
                                                    if (nodeRowList1.ChildNodes != null)
                                                    {
                                                        foreach (XmlNode nodeRow in nodeRowList1.ChildNodes)
                                                        {
                                                            if (nodeRow.Attributes["TrxID"] != null)
                                                            {
                                                                string trxID = nodeRow.Attributes["TrxID"].Value;
                                                                DataRow[] foundRows = null;
                                                                foundRows = dsAll.Tables[2].Select("TrxID ='" + trxID + "' and JobID='" + dsAll.Tables[0].Rows[drs]["TrxID"].ToString() + "'");
                                                                if (foundRows.Length > 0)
                                                                {
                                                                    int rowIndex = dsAll.Tables[2].Rows.IndexOf(foundRows[0]);
                                                                    DataRow dt2Row = dtTrxInfo.NewRow();
                                                                    if (dtTrxInfo.Columns.Count == 0)
                                                                    {
                                                                        for (int x = 0; x < dsAll.Tables[2].Columns.Count; x++)
                                                                        {
                                                                            dtTrxInfo.Columns.Add(dsAll.Tables[2].Columns[x].ColumnName);
                                                                        }
                                                                    }
                                                                    for (int i = 0; i < dtTrxInfo.Columns.Count; i++)
                                                                    {
                                                                        dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                                                                    }
                                                                    dtTrxInfo.Rows.Add(dt2Row);
                                                                    dsAll.Tables[2].Rows[rowIndex].Delete();
                                                                    dtTrxInfo.AcceptChanges();
                                                                    dtTrxInfo.TableName = dsAll.Tables[2].TableName;
                                                                    if (nodeRow.Attributes["pPgBreak"] != null)
                                                                    {
                                                                        if (nodeRow.Attributes["pPgBreak"].Value.ToString().Trim() == "1")
                                                                        {
                                                                            pageBreaks++;
                                                                            m_htPagebrk.Add(pageBreaks, rowIndex);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                DataTable BranchDT = new DataTable();
                                                BranchDT = dtTrxInfo.Copy();
                                                string trxIDS = string.Empty;
                                                trxIDS = BranchDT.Rows[1]["JobID"].ToString();
                                                if (BranchDT.Columns.Contains("TrxID"))
                                                {
                                                    BranchDT.Columns.Remove("TrxID");
                                                }
                                                if (BranchDT.Rows.Count > 0)
                                                {
                                                    DataColumn emptyColumn1 = new DataColumn();
                                                    DataColumn emptyColumn2 = new DataColumn();
                                                    DataColumn emptyColumn3 = new DataColumn();
                                                    DataColumn emptyColumn4 = new DataColumn();
                                                    DataColumn dcAgency = new DataColumn();
                                                    DataColumn dcContact = new DataColumn();
                                                    DataColumn dcTelephone = new DataColumn();
                                                    DataColumn dcJobID = new DataColumn();
                                                    //
                                                    DataRow drReconcillation = BranchDT.NewRow();
                                                    //
                                                    drReconcillation[1] = "Reconciliation";
                                                    BranchDT.Rows.InsertAt(drReconcillation, 0);
                                                    //
                                                    BranchDT.Columns.Add(emptyColumn1);
                                                    BranchDT.Columns.Add(emptyColumn2);
                                                    BranchDT.Columns.Add(emptyColumn3);
                                                    BranchDT.Columns.Add(emptyColumn4);
                                                    //
                                                    BranchDT.AcceptChanges();
                                                    //
                                                    if (dsAll.Tables[0].Rows.Count > 0)
                                                    {

                                                        DataRow[] foundAgencyRows = dsAll.Tables[0].Select(" TrxID='" + trxIDS + "'");
                                                        DataTable dtAgency = new DataTable();
                                                        //
                                                        foreach (DataColumn dc in foundAgencyRows[0].Table.Columns)
                                                        {
                                                            if (dc.ColumnName.Contains("Agency"))
                                                            {
                                                                if (foundAgencyRows[0][dc.ColumnName].ToString() != string.Empty)
                                                                {
                                                                    dtAgency.Columns.Add(dc.ColumnName);
                                                                }
                                                            }
                                                            if (dc.ColumnName.Contains("Contact"))
                                                            {
                                                                if (foundAgencyRows[0][dc.ColumnName].ToString() != string.Empty)
                                                                {
                                                                    dtAgency.Columns.Add(dc.ColumnName);
                                                                }
                                                            }
                                                            if (dc.ColumnName.Contains("Telephone"))
                                                            {
                                                                if (foundAgencyRows[0][dc.ColumnName].ToString() != string.Empty)
                                                                {
                                                                    dtAgency.Columns.Add(dc.ColumnName);
                                                                }
                                                            }
                                                        }
                                                        BranchDT.Rows[0]["Column3"] = "Agency";
                                                        for (int agency = 0; agency < dtAgency.Columns.Count; )
                                                        {
                                                            agency++;
                                                            BranchDT.Rows[agency]["Column3"] = dtAgency.Columns[agency - 1].ColumnName.ToString();
                                                        }
                                                        int rwcntr = 1;
                                                        foreach (DataColumn dcAll in foundAgencyRows[0].Table.Columns)
                                                        {
                                                            if (dtAgency.Columns.Contains(foundAgencyRows[0].Table.Columns[dcAll.Ordinal].ToString()))
                                                            {
                                                                BranchDT.Rows[rwcntr]["Column4"] = foundAgencyRows[0].Table.Rows[0][dcAll.ColumnName].ToString();
                                                                rwcntr++;
                                                            }
                                                        }
                                                        for (int rw = 1; rw <= BranchDT.Rows.Count; rw++)
                                                        {
                                                            foreach (DataColumn dcRwAll in BranchDT.Columns)
                                                            {
                                                                switch (dcRwAll.ColumnName.ToString().Trim().ToUpper())
                                                                {
                                                                    case "COLUMN1":
                                                                    case "COLUMN2":
                                                                        {
                                                                            if (rw != BranchDT.Rows.Count)
                                                                            {
                                                                                BranchDT.Rows[rw][dcRwAll.ColumnName] = "SKIP";
                                                                            }
                                                                            break;
                                                                        }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //
                                                    Hashtable m_htBranchRightAlign = new Hashtable();
                                                    Font SumRowFont1 = new Font("Verdana", 11, FontStyle.Bold);
                                                    bool sumExists = false;
                                                    int rowsInBranchDT = BranchDT.Rows.Count;
                                                    int colsInBranchDT = BranchDT.Columns.Count - 1;
                                                    //Getting the columns to be displayed in grid
                                                    XmlNode nodeCols2 = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + dsAll.Tables[2].TableName + "/GridHeading/Columns");
                                                    int branchColPos = 0;
                                                    int[] BranchArraywidth = new int[colsInBranchDT];
                                                    int[] BranchArraywidth1 = new int[colsInBranchDT];
                                                    int crtr = 0;
                                                    foreach (DataColumn dBranchCol in BranchDT.Columns)
                                                    {

                                                        XmlNode nodeBranchCol = nodeCols2.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                                        //Checking for isSummed value for that column
                                                        if (nodeBranchCol != null)
                                                        {
                                                            //Getting the cols having Issummed=1 
                                                            if (nodeBranchCol.Attributes["IsSummed"] != null)
                                                            {
                                                                if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                                {
                                                                    if (!sumExists)
                                                                        sumExists = true;
                                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                                }
                                                            }
                                                            //Getting the cols having ControlType="Amount"//Isnumeric=1
                                                            if (nodeBranchCol.Attributes["ControlType"] != null)
                                                            {
                                                                if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                                {
                                                                    if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))

                                                                        m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                                }
                                                            }
                                                        }
                                                        if ((dBranchCol.ColumnName.ToString().ToUpper() != "JOBID"))
                                                        {
                                                            int colNos = dBranchCol.Ordinal - 1;
                                                            switch (dBranchCol.ColumnName.ToString().ToUpper())
                                                            {
                                                                case "DESCRIPTION":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 80;
                                                                        break;
                                                                    }
                                                                case "CAPTION 1":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 1":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "CAPTION 2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "CAPTION 3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "CAPTION 4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }

                                                                case "CAPTION 5":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 5":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "COLUMN1":
                                                                case "COLUMN2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 10;
                                                                        break;
                                                                    }
                                                                case "COLUMN3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 40;
                                                                        break;
                                                                    }
                                                                case "COLUMN4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 100;
                                                                        break;
                                                                    }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            int colNos = dBranchCol.Ordinal;
                                                            switch (dBranchCol.ColumnName.ToString().ToUpper())
                                                            {
                                                                case "DESCRIPTION":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 80;
                                                                        break;
                                                                    }
                                                                case "CAPTION 1":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 1":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "CAPTION 2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 30;
                                                                        break;
                                                                    }
                                                                case "CAPTION 3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "CAPTION 4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "CAPTION 5":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "AMOUNT 5":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 45;
                                                                        break;
                                                                    }
                                                                case "COLUMN1":
                                                                case "COLUMN2":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 10;
                                                                        break;
                                                                    }
                                                                case "COLUMN3":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 40;
                                                                        break;
                                                                    }
                                                                case "COLUMN4":
                                                                    {
                                                                        BranchArraywidth1[colNos] = 100;
                                                                        break;
                                                                    }
                                                            }
                                                        }
                                                    }
                                                    PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 2);
                                                    Font myHeaderFont = new Font("Verdana", 10, FontStyle.Bold);
                                                    if (BranchDT.Columns.Contains("JobID"))
                                                    {
                                                        BranchDT.Columns.Remove("JobID");
                                                    }
                                                    myPdfTable1.SetBackgroundColor(Color.SandyBrown);
                                                    myPdfTable1.ImportDataTable(BranchDT);
                                                    myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                                    myPdfTable1.SetBorders(Color.Black, 1, BorderType.None);
                                                    myPdfTable1.SetColumnsWidth(BranchArraywidth1);
                                                    myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                    myPdfTable1.HeadersRow.SetForegroundColor(Color.White);
                                                    if (!BranchDT.Columns.Contains("JobID"))
                                                    {
                                                        BranchDT.Columns.Add("JobID");
                                                    }
                                                    if (m_htBranchRightAlign.Count > 0)
                                                    {
                                                        if (sumExists)
                                                        {
                                                            //Right justifying Summed row content
                                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                                            myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                        }
                                                        //Right justifying Summed column content and IsNumeric column content
                                                        for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                                        {
                                                            if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                            {
                                                                if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                                {
                                                                    myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                    myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    bool _recon = false;
                                                    bool _agency = false;
                                                    foreach (PdfRow prow in myPdfTable1.Rows)
                                                    {
                                                        foreach (PdfCell pcll in prow.Cells)
                                                        {
                                                            switch (pcll.Content.ToString().Trim().ToUpper())
                                                            {
                                                                case "RECONCILIATION":
                                                                    {
                                                                        pcll.SetBackgroundColor(Color.SandyBrown);
                                                                        pcll.SetFont(myHeaderFont);
                                                                        pcll.SetContentAlignment(ContentAlignment.TopCenter);
                                                                        _recon = true;
                                                                        break;
                                                                    }
                                                                case "AGENCY":
                                                                    {
                                                                        pcll.SetBackgroundColor(Color.SandyBrown);
                                                                        pcll.SetFont(myHeaderFont);
                                                                        pcll.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                        _agency = true;
                                                                        break;
                                                                    }
                                                                default:
                                                                    {
                                                                        pcll.SetBackgroundColor(Color.White);
                                                                        break;
                                                                    }
                                                            }
                                                        }
                                                        if (((bool)_recon) && ((bool)_agency))
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    for (int prow1 = 1; prow1 < BranchDT.Rows.Count; prow1++)
                                                    {
                                                        if (prow1 != BranchDT.Rows.Count)
                                                        {
                                                            for (int pcl1 = 0; pcl1 < BranchDT.Columns.Count; pcl1++)
                                                            {
                                                                if ((BranchDT.Columns[pcl1].ColumnName == "Column1") || (BranchDT.Columns[pcl1].ColumnName == "Column2"))
                                                                {
                                                                    string skipNames = BranchDT.Rows[prow1][pcl1].ToString();
                                                                    if (skipNames.Trim().ToUpper() == "SKIP")
                                                                    {
                                                                        myPdfTable1.Rows[prow1][pcl1].SetBackgroundColor(Color.White);
                                                                        myPdfTable1.Rows[prow1][pcl1].SetForegroundColor(Color.White);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    while (!myPdfTable1.AllTablePagesCreated)
                                                    {
                                                        //Setting the Y position and if required creating new page
                                                        if (currentYPos > myPdfDocument.PageHeight - 50)
                                                        {
                                                            posY = 70;
                                                            currentYPos = 70;
                                                            newPdfPage.SaveToDocument();
                                                            //Adding new page and adding Header table,logo image and pageNo 
                                                            newPdfPage = myPdfDocument.NewPage();
                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                            //Adding logo
                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 300, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                        }
                                                        else
                                                        {
                                                            posY = currentYPos + 10;
                                                        }
                                                        if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                        {
                                                            posY = 70;
                                                            currentYPos = 70;
                                                            newPdfPage.SaveToDocument();
                                                            //Adding new page and adding Header table,logo image and pageNo 
                                                            newPdfPage = myPdfDocument.NewPage();
                                                            newPdfPage.Add(myHeaderPdfTablePage);
                                                            //Adding logo
                                                            if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                            newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 600, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 600, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                        }
                                                        PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                                        newPdfPage.Add(newPdfTablePage1);
                                                        currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                                    }
                                                }
                                                #endregion
                                                newPdfPage.SaveToDocument();
                                            }
                                            #endregion
                                        }//dtall columns end
                                        if (dsAll.Tables.Contains("InvoiceInfo"))
                                        {
                                            string branchNodeName = "InvoiceInfo";
                                            DataTable BranchDT = new DataTable();
                                            BranchDT = objclsrpt.GetJobCostingBranchDataToPrint(xDoc.OuterXml.ToString(), m_JobID, branchNodeName, "JobID");
                                            BranchDT = objclsrpt.ChangeDateAndAmountFormats(BranchDT, xDoc.OuterXml.ToString(), branchNodeName);
                                            if (BranchDT.Rows.Count > 0)
                                            {
                                                Hashtable m_htBranchRightAlign = new Hashtable();
                                                Font SumRowFont = new Font("Verdana", 9, FontStyle.Bold);
                                                bool sumExists = false;
                                                int rowsInBranchDT = BranchDT.Rows.Count;
                                                int colsInBranchDT = BranchDT.Columns.Count;
                                                //Getting the columns to be displayed in grid
                                                XmlNode nodeCols1 = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + branchNodeName + "/GridHeading/Columns");
                                                int branchColPos = 0;
                                                int[] BranchArraywidth = new int[colsInBranchDT];
                                                foreach (DataColumn dBranchCol in BranchDT.Columns)
                                                {
                                                    XmlNode nodeBranchCol = nodeCols.SelectSingleNode("Col[@Caption = '" + dBranchCol.ColumnName + "']");
                                                    //Checking for isSummed value for that column
                                                    if (nodeBranchCol != null)
                                                    {
                                                        //Getting the cols having Issummed=1 
                                                        if (nodeBranchCol.Attributes["IsSummed"] != null)
                                                        {
                                                            if (nodeBranchCol.Attributes["IsSummed"].Value == "1")
                                                            {
                                                                if (!sumExists)
                                                                    sumExists = true;
                                                                if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                                    m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["IsSummed"].Value);
                                                            }
                                                        }
                                                        //Getting the cols having ControlType="Amount"//Isnumeric=1
                                                        if (nodeBranchCol.Attributes["ControlType"] != null)
                                                        {
                                                            if (nodeBranchCol.Attributes["ControlType"].Value == "Amount")
                                                            {
                                                                if (!m_htBranchRightAlign.Contains(nodeBranchCol.Attributes["Caption"].Value))
                                                                    m_htBranchRightAlign.Add(nodeBranchCol.Attributes["Caption"].Value, nodeBranchCol.Attributes["ControlType"].Value);
                                                            }
                                                        }
                                                    }
                                                    //Setting the column width of branch table
                                                    int dcPos = dBranchCol.Ordinal;
                                                    int colFVL = 0;
                                                    if (nodeBranchCol != null)
                                                    {
                                                        if (nodeBranchCol.Attributes["FullViewLength"] != null)
                                                        {
                                                            colFVL = Convert.ToInt32(nodeBranchCol.Attributes["FullViewLength"].Value);
                                                        }
                                                    }
                                                    if (colFVL != 0)
                                                    {
                                                        BranchArraywidth[dcPos] = colFVL;
                                                    }
                                                    else
                                                    {
                                                        BranchArraywidth[dcPos] = 15;
                                                    }
                                                }
                                                PdfTable myPdfTable1 = myPdfDocument.NewTable(FontRegular, rowsInBranchDT, colsInBranchDT, 1);
                                                Font myHeaderFont = new Font("Verdana", 7, FontStyle.Bold);
                                                myPdfTable1.ImportDataTable(BranchDT);
                                                myPdfTable1.HeadersRow.SetFont(myHeaderFont);
                                                myPdfTable1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                                myPdfTable1.SetColumnsWidth(BranchArraywidth);
                                                myPdfTable1.HeadersRow.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                myPdfTable1.SetContentAlignment(ContentAlignment.MiddleLeft);
                                                if (m_htBranchRightAlign.Count > 0)
                                                {
                                                    if (sumExists)
                                                    {
                                                        //Right justifying Summed row content
                                                        myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetFont(SumRowFont);
                                                        myPdfTable1.Rows[BranchDT.Rows.Count - 1].SetContentAlignment(ContentAlignment.MiddleRight);
                                                    }
                                                    //Right justifying Summed column content and IsNumeric column content
                                                    for (int pdfcol = 0; pdfcol < colsInBranchDT; pdfcol++)
                                                    {
                                                        if (myPdfTable1.HeadersRow[pdfcol].Content.ToString() != string.Empty)
                                                        {

                                                            if (m_htBranchRightAlign.Contains(myPdfTable1.HeadersRow[pdfcol].Content.ToString()))
                                                            {
                                                                myPdfTable1.HeadersRow[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                                myPdfTable1.Columns[pdfcol].SetContentAlignment(ContentAlignment.MiddleRight);
                                                            }
                                                        }
                                                    }
                                                }
                                                while (!myPdfTable1.AllTablePagesCreated)
                                                {
                                                    //Setting the Y position and if required creating new page
                                                    if (currentYPos > myPdfDocument.PageHeight - 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        //Adding logo
                                                        //if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    else
                                                    {
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        posY = 70 + 10;
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                        currentYPos = 70;
                                                    }
                                                    if (myPdfDocument.PageHeight - 50 - posY < 50)
                                                    {
                                                        posY = 70;
                                                        currentYPos = 70;
                                                        newPdfPage.SaveToDocument();
                                                        //Adding new page and adding Header table,logo image and pageNo 
                                                        newPdfPage = myPdfDocument.NewPage();
                                                        newPdfPage.Add(myHeaderPdfTablePage);
                                                        //Adding logo
                                                        if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                        newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    }
                                                    PdfTablePage newPdfTablePage1 = myPdfTable1.CreateTablePage(new PdfArea(myPdfDocument, posX, posY + 10, width, height));
                                                    newPdfPage.Add(newPdfTablePage1);
                                                    currentYPos = newPdfTablePage1.Area.BottomLeftVertex.Y;
                                                    newPdfPage.SaveToDocument();
                                                    //Adding new page and adding Header table,logo image and pageNo 
                                                    newPdfPage = myPdfDocument.NewPage();
                                                    //newPdfPage.Add(myHeaderPdfTablePage);
                                                    ////Adding logo
                                                    //if (LogoImage != null) { newPdfPage.Add(LogoImage, imgPosX, imgPosY); }
                                                    //newPdfPage.Add(new PdfTextArea(FontRegular, Color.Black, new PdfArea(myPdfDocument, myPdfDocument.PageWidth - 400, myPdfDocument.PageHeight - 50, myPdfDocument.PageWidth - 200, 50), ContentAlignment.MiddleCenter, "Page " + Convert.ToString((++pageCnt))));
                                                    currentYPos = 70;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                #endregion
                                #region BUDGETTOTAL
                                case "BUDGETTOTAL":
                                    {
                                        if (nodeRowList != null)
                                        {
                                            if (nodeRowList.ChildNodes != null)
                                            {
                                                foreach (XmlNode nodeRow in nodeRowList.ChildNodes)
                                                {
                                                    if (nodeRow.Attributes["TrxID"] != null)
                                                    {
                                                        string trxID = nodeRow.Attributes["TrxID"].Value;
                                                        string jobID = nodeRow.Attributes["JobID"].Value;
                                                        string accountID = nodeRow.Attributes["AccountID"].Value;
                                                        DataRow[] foundRows = null;
                                                        foundRows = dt.Select("TrxID ='" + trxID + "' and JobID='" + dsAll.Tables[0].Rows[drs]["TrxID"].ToString() + "' and AccountID='" + accountID + "'");
                                                        if (foundRows.Length > 0)
                                                        {
                                                            int rowIndex = dt.Rows.IndexOf(foundRows[0]);
                                                            DataRow dt2Row = dtAll.NewRow();
                                                            if (dtAll.Columns.Count == 0)
                                                            {
                                                                for (int x = 0; x < dt.Columns.Count; x++)
                                                                {
                                                                    dtAll.Columns.Add(dt.Columns[x].ColumnName);
                                                                }
                                                            }
                                                            for (int i = 0; i < dtAll.Columns.Count; i++)
                                                            {
                                                                dt2Row[i] = foundRows[0].ItemArray[i].ToString();
                                                            }
                                                            dtAll.Rows.Add(dt2Row);
                                                            dt.Rows[rowIndex].Delete();
                                                            dtAll.AcceptChanges();
                                                            dtAll.TableName = dt.TableName;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        GVParentChildJobCosting(dtAll, "PDFrpt", NotesDT, "NO", xDoc.OuterXml.ToString(), "NORMAL", dt.TableName.Trim().ToString(), dsAll.Tables[0].Rows[drs]["TrxID"].ToString(), pageCnt);
                                        _budgetTotal = true;
                                        break;
                                    }
                                #endregion
                            }
                            if ((bool)invPrinted)
                            {
                            }
                        }
                    }
                }
                XmlNode xEmailsNode = xDoc.SelectSingleNode("//EmailIDS");
                fileName = xDoc.SelectSingleNode("Root/bpeout/FormInfo/Title").InnerText;
                if (xEmailsNode != null)
                {
                    SendEmails(xDoc.OuterXml.ToString(), fileName);
                }
                //SaveToResponse("PDFReport");
                if (ConfigurationManager.AppSettings["ShowPDF"].ToString() == "0")
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    HttpContext.Current.Response.AppendHeader("Content-disposition", string.Format("attachment;filename={0}.pdf", fileName));
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }
                else
                {
                    HttpContext.Current.Response.ClearHeaders();
                    HttpContext.Current.Response.ClearContent();
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", string.Format("inline;filename={0}.pdf", fileName));
                    HttpContext.Current.Response.ContentType = "application/pdf";
                    myPdfDocument.SaveToStream(HttpContext.Current.Response.OutputStream);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.Close();
                }


                if (xEmailsNode != null)
                {
                    string m_PhysicalFilePath = string.Empty;
                    m_PhysicalFilePath = ConfigurationManager.AppSettings["TempFilePath"].ToString() + "\\" + fileName + "_" + DateTime.Now.ToString("yyyy-MM-dd hh-mm-ss") + ".PDF";
                    FileInfo fin = new FileInfo(m_PhysicalFilePath);
                    if (fin.Exists)
                    {
                        fin.Delete();
                    }
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
        }
        #endregion


        /// <summary>
        /// Gets the DataTable to be printed
        /// </summary>
        /// <param name=""></param>
        /// <param name=""></param>
        //public DataTable XMLToDataTable(string GVXml, string treeNodeName, string rptType)
        public DataTable XMLToDataTable(string GVXml, string treeNodeName, string rptType)
        {
            DataTable dt = new DataTable();
            if (GVXml != string.Empty)
            {
                XmlDocument xDoc = new XmlDocument();
                XmlNode nodeRows;
                string filenodename = string.Empty;
                xDoc.LoadXml(GVXml);
                nodeRows = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/RowList");
                if (nodeRows != null)
                {
                    XmlNodeReader read = new XmlNodeReader(nodeRows);
                    DataSet dsRows = new DataSet();
                    dsRows.ReadXml(read);
                    //Getting the datatable                
                    dt = dsRows.Tables[0];
                    int rowCnt = dt.Rows.Count;
                    //Getting the columns to be displayed in grid
                    XmlNode nodeCols = xDoc.SelectSingleNode("Root/bpeout/FormControls/" + treeNodeName + "/GridHeading/Columns");
                    m_htGVColumns.Clear();
                    int colPos = 0;
                    //Storing the columns names and captions in the HashTable
                    foreach (XmlNode node in nodeCols)
                    {
                        string currentLabel = node.Attributes["Label"].Value;
                        if (!m_htGVColumns.Contains(currentLabel))
                        {
                            if (node.Attributes["FullViewLength"].Value != "0")
                            {
                                m_htGVColumns.Add(currentLabel, node.Attributes["Caption"].Value);
                            }
                        }
                        //Set the column order in the DataTable(RowsList) as per the Columns Node
                        DataColumn dc = dt.Columns[currentLabel];
                        if (dc != null && dc.Ordinal != colPos)
                        {
                            int tableColPos = colPos;
                            if (tableColPos >= dt.Columns.Count)
                            {
                                tableColPos = dt.Columns.Count - 1;//Put it at the last
                            }
                            dc.SetOrdinal(tableColPos);
                        }
                        colPos++;
                    }
                    //Removing unwanted columns and setting the captions as per the XML.
                    for (int index = 0; index < dt.Columns.Count; index++)
                    {
                        bool numericExists = false;
                        bool sumExists = false;
                        bool chkbx = false;
                        bool cal = false;//DateTime column
                        string colName = dt.Columns[index].ColumnName;
                        if (!(m_htGVColumns.ContainsKey(colName)))//Column not present(FullViewLength=0)
                        {
                            if (colName.Trim() != "Notes" && colName.Trim() != "TrxID")
                            {
                                dt.Columns.Remove(colName);
                                index--;
                            }
                        }
                        else//Present..Set the caption
                        {
                            XmlNode nodeCol = nodeCols.SelectSingleNode("Col[@Label = '" + dt.Columns[index].ColumnName.Trim().ToString() + "']");
                            //Checking for isSummed value for that column
                            if (nodeCol != null)
                            {
                                //Checking for IsSummed attribute
                                if (!sumExists)
                                {
                                    if (nodeCol.Attributes["IsSummed"] != null)
                                    {
                                        if (nodeCol.Attributes["IsSummed"].Value == "1")
                                        {
                                            sumExists = true;
                                        }
                                    }
                                }
                                if (nodeCol.Attributes["ControlType"] != null)
                                {
                                    if (nodeCol.Attributes["ControlType"].Value == "Check")
                                    {
                                        chkbx = true;
                                    }
                                    else if (nodeCol.Attributes["ControlType"].Value == "Amount")
                                    {
                                        numericExists = true;
                                    }
                                    else if (nodeCol.Attributes["ControlType"].Value == "Cal")
                                    {
                                        cal = true;
                                    }
                                }
                                int colFVL = 0;
                                if (nodeCol.Attributes["FullViewLength"] != null)
                                {
                                    colFVL = Convert.ToInt32(nodeCol.Attributes["FullViewLength"].Value);
                                }
                                decimal sum = 0;
                                //Iterating through each row and truncating the data and summing value 
                                foreach (DataRow dRow in dt.Rows)
                                {
                                    if (m_htGVColumns.ContainsKey(dt.Columns[index].ColumnName.Trim().ToString()))
                                    {
                                        if (dRow[dt.Columns[index]].ToString() != string.Empty)
                                        {
                                            //Truncating the data if it is greater than its FullView Length
                                            int datavalLength = dRow[dt.Columns[index].ColumnName.Trim()].ToString().Length;
                                            if (colFVL != 0)
                                            {
                                                if (dRow[dt.Columns[index].ColumnName.Trim()].ToString().Length > colFVL)
                                                {
                                                    //Keeping commas if IsNumeric ="1"
                                                    if (numericExists)
                                                    {
                                                        decimal amount;
                                                        if (Decimal.TryParse(dRow[dt.Columns[index]].ToString(), out amount))
                                                        {
                                                            dRow[dt.Columns[index]] = string.Format("{0:N}", amount);
                                                        }
                                                    }
                                                    //Formatting Date field 
                                                    if (cal)
                                                    {
                                                        DateTime dateTime;
                                                        if (DateTime.TryParse(dRow[dt.Columns[index]].ToString(), out dateTime))
                                                        {
                                                            dRow[dt.Columns[index]] = dateTime.ToString("MM/dd/yy");
                                                        }
                                                    }
                                                    if (rptType.ToString().ToUpper().Trim() != "EXCEL")
                                                    {
                                                        if (dRow[dt.Columns[index]].ToString().Trim().Length > colFVL)
                                                        {
                                                            dRow[dt.Columns[index]] = dRow[dt.Columns[index]].ToString().Remove(colFVL - 3) + "...";
                                                        }
                                                    }
                                                }
                                            }
                                            if (chkbx)
                                            {
                                                if (dRow[dt.Columns[index]].ToString() == "1")
                                                {
                                                    dRow[dt.Columns[index]] = "x";//"&radic;";
                                                }
                                                else if (dRow[dt.Columns[index]].ToString() == "0")
                                                {
                                                    dRow[dt.Columns[index]] = "";
                                                }
                                            }
                                            //Summing the values in each row for that column
                                            if (sumExists)
                                            {
                                                sum = sum + Convert.ToDecimal(dRow[dt.Columns[index]]);
                                            }
                                        }
                                    }
                                }
                                //Adding the row to dt if isSummed exists and updating the row count
                                if (sumExists)
                                {
                                    if (dt.Rows.Count == rowCnt)
                                    {
                                        DataRow dr = dt.NewRow();
                                        dt.Rows.Add(dr);
                                    }
                                    dt.Rows[dt.Rows.Count - 1][dt.Columns[index]] = sum;
                                }
                            }
                            //Changing the column name to caption 
                            dt.Columns[index].ColumnName = m_htGVColumns[colName].ToString();
                        }
                    }
                    if (dt.Columns.Contains("TrxID"))
                    {
                        dt.Columns["TrxID"].SetOrdinal(dt.Columns.Count - 1);
                    }
                    //Removing empty rows
                    for (int rwCnt = 0; rwCnt < dt.Rows.Count; rwCnt++)
                    {
                        bool emptyRow = true;
                        for (int colcnt = 0; colcnt < dt.Columns.Count; colcnt++)
                        {
                            if (dt.Columns[colcnt].ColumnName.ToUpper().Trim() != "TRXID")
                            {
                                if (dt.Rows[rwCnt][colcnt].ToString() != string.Empty)
                                    emptyRow = false;
                            }
                        }
                        if (emptyRow)
                        {
                            dt.Rows[rwCnt].Delete();
                            rwCnt--;
                        }
                    }
                }
            }
            return dt;
        }


        /// <summary>
        /// Changing Date and Amount Formats
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="outxml"></param>
        /// <param name="treeNodeName"></param>
        /// <returns></returns>
        public DataTable ChangeDateAndAmountFormats1(DataTable dt, string outxml, string treeNodeName)
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.LoadXml(outxml);
            string m_AmountNodes = string.Empty;
            string m_DateFormats = string.Empty;
            foreach (XmlNode xns in xDoc.SelectSingleNode("//" + treeNodeName + "/GridHeading/Columns").ChildNodes)
            {
                if (xns.Attributes["ControlType"] != null)
                {
                    if (xns.Attributes["ControlType"].Value == "Cal")
                    {
                        m_DateFormats = xns.Attributes["Caption"].Value;
                    }
                    if (xns.Attributes["ControlType"].Value == "Amount" || xns.Attributes["ControlType"].Value == "Calc")
                    {
                        m_AmountNodes = xns.Attributes["Caption"].Value;
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        foreach (DataColumn dc in dt.Columns)
                        {
                            if (dc.ColumnName == m_AmountNodes)
                            {
                                decimal amount;
                                if (Decimal.TryParse(dr[m_AmountNodes].ToString(), out amount))
                                {
                                    string amt = string.Format("{0:N}", amount);
                                    dr[m_AmountNodes] = amt;
                                }
                            }
                            if (dc.ColumnName == m_DateFormats)
                            {
                                DateTime date;
                                if (commonObjUI.IsDate(dr[m_DateFormats].ToString()))
                                {
                                    //if the value is IsDate then change format MM/DD/YYYY
                                    DateTime.TryParse(dr[m_DateFormats].ToString(), out date);
                                    string dates = date.ToString("MM/dd/yyyy");
                                    dr[m_DateFormats] = dates;
                                }
                            }
                        }
                    }
                }
            }
            return dt;
        }


        #region Set Columns Width
        public DataTable SetColumnsWidths(DataTable dt)
        {
            DataRow drColumns = dt.NewRow();
            foreach (DataColumn dCol in dt.Columns)
            {
                drColumns[dCol.Ordinal] = dCol.ColumnName;
            }
            dt.Rows.InsertAt(drColumns, 0);
            return dt;
        }
        #endregion


        #endregion

        /// <summary>
        /// To Send Emails 
        /// </summary>
        /// <param name="OutXML"></param>
        /// <param name="fileName"></param>
        public bool SendEmails(string OutXML, string fileName)
        {
            bool messagestatus = false;
            try
            {
                string m_PhysicalFilePath = string.Empty;

                m_PhysicalFilePath = ConfigurationManager.AppSettings["TempFilePath"].ToString() + "\\" + fileName + "_" + DateTime.Now.ToString("yyyy-MM-dd hh-mm-ss") + ".PDF";
                Mail objMail = new Mail();

                FileInfo fin = new FileInfo(m_PhysicalFilePath);
                if (fin.Exists)
                {
                    fin.Delete();
                }
                string emailIDS = string.Empty;
                XmlDocument xdoc = new XmlDocument();
                xdoc.LoadXml(OutXML);
                XmlNode xEmailsNode = xdoc.SelectSingleNode("//EmailIDS");
                if (xEmailsNode != null)
                {
                    emailIDS = xEmailsNode.InnerXml.ToString();
                    string[] emailNames = new string[emailIDS.Split(';').Length];
                    int ik = 0;
                    foreach (string sr in emailIDS.Split(';'))
                    {
                        for (; ik < emailNames.Length; )
                        {
                            emailNames[ik] = sr.ToString();
                            break;
                        }
                        ik++;
                    }
                    string ccNames = string.Empty;
                    for (int i = 0; i < emailNames.Length; i++)
                    {
                        if (i == 0)
                        {
                            objMail.To = emailNames[i].ToString();
                        }
                        else
                        {
                            ccNames += emailNames[i].ToString() + ",";
                        }
                    }
                    if (ccNames != string.Empty)
                    {
                        if (ccNames.Contains(","))
                        {
                            ccNames = ccNames.Remove(ccNames.Length - 1, 1);
                        }
                        objMail.Cc = ccNames;
                    }
                    myPdfDocument.SaveToFile(m_PhysicalFilePath);
                    objMail.Subject = fileName;
                    objMail.Body = "This is an autogenerated email...Please do not reply...";
                    objMail.Attachment = m_PhysicalFilePath;
                    messagestatus = objMail.SendMail();
                }
            }
            catch (Exception ex)
            {
                #region NLog
                logger.Fatal(ex);
                #endregion

                throw ex;
            }
            return messagestatus;
        }

    }
}
